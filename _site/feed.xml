<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-01-04T20:17:17+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">harry’s blog</title><subtitle>harry's technology blog 
</subtitle><author><name>harry</name><email>harry_c2016@163.com</email></author><entry><title type="html">iOS自旋锁与互斥锁</title><link href="http://localhost:4000/2023/01/04/00_iOS%E4%B8%AD%E8%87%AA%E6%97%8B%E9%94%81%E5%92%8C%E4%BA%92%E6%96%A5%E9%94%81.html" rel="alternate" type="text/html" title="iOS自旋锁与互斥锁" /><published>2023-01-04T00:00:00+08:00</published><updated>2023-01-04T00:00:00+08:00</updated><id>http://localhost:4000/2023/01/04/00_iOS%E4%B8%AD%E8%87%AA%E6%97%8B%E9%94%81%E5%92%8C%E4%BA%92%E6%96%A5%E9%94%81</id><content type="html" xml:base="http://localhost:4000/2023/01/04/00_iOS%E4%B8%AD%E8%87%AA%E6%97%8B%E9%94%81%E5%92%8C%E4%BA%92%E6%96%A5%E9%94%81.html">&lt;h4 id=&quot;ios中自旋锁和互斥锁&quot;&gt;iOS中自旋锁和互斥锁&lt;/h4&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;起因&quot;&gt;起因&lt;/h5&gt;

&lt;p&gt;属性修饰符atomic，是否是绝对线程安全的？&lt;/p&gt;

&lt;p&gt;当然乍一看，这两个问题好像没有必然的联系，但是了解atomic的内部实现，就能明白为什么我能跨度到自旋锁和互斥锁。（因为atomic其实内部是对于setter和getter加锁实现的）&lt;/p&gt;

&lt;p&gt;后边我们再看atomic到底是否安全的问题&lt;/p&gt;

&lt;h5 id=&quot;定义&quot;&gt;定义&lt;/h5&gt;

&lt;p&gt;锁：在&lt;a href=&quot;https://zh.wikipedia.org/wiki/计算机科学&quot;&gt;计算机科学&lt;/a&gt;中，&lt;strong&gt;锁&lt;/strong&gt;是在执行&lt;a href=&quot;https://zh.wikipedia.org/wiki/多线程&quot;&gt;多线程&lt;/a&gt;时用于强行限制资源访问的&lt;a href=&quot;https://zh.wikipedia.org/wiki/同步&quot;&gt;同步&lt;/a&gt;机制，即用于在&lt;a href=&quot;https://zh.wikipedia.org/wiki/并发控制&quot;&gt;并发控制&lt;/a&gt;中保证对&lt;a href=&quot;https://zh.wikipedia.org/wiki/互斥&quot;&gt;互斥&lt;/a&gt;要求的满足。(维基百科中的定义)&lt;/p&gt;

&lt;p&gt;自旋锁： 自旋锁其实就是线程再未获得锁的时候处于忙等的状态，一直消耗cpu，而不会进入内核态。&lt;/p&gt;

&lt;p&gt;互斥锁：互斥锁则是当未获得锁时，线程进入内核态，释放cpu的消耗，直到锁资源被释放，重新唤起休眠的线程。&lt;/p&gt;

&lt;p&gt;其实从定义中我们也能很明确的看到了他们的优缺点：自旋锁一直处于忙等的状态，会持续消耗cpu，而互斥锁则不会，但是互斥锁会频繁的切换线程的状态，比较效率上会比自旋锁低很多。&lt;/p&gt;

&lt;h5 id=&quot;ios-中的锁&quot;&gt;iOS 中的锁&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;NSLock 非递归互斥锁。是对于pthread_mutex_t的封装。遵循了NSLocking协议。-lock与unlock必须在同一线程调用，否则会产生问题。&lt;/li&gt;
  &lt;li&gt;NSCondition， 与NSLock类似都是对于pthread_mutex_t的封装，区别在于，他还对于pthread_cond_t的封装，所以NSLock只能等待锁资源释放，然后唤起等待的线程，而NSCondition则可以由我们主动唤起线程&lt;/li&gt;
  &lt;li&gt;NSConditionLock, 条件互斥锁，也就是说，除了正常的锁资源释放我们获得锁之外，我们还需要满足设置的另外一个条件，才能获得锁。释放锁也是如此。&lt;/li&gt;
  &lt;li&gt;NSRecursiveLock, 递归锁，也是一个互斥锁。与其他锁不同的是，递归锁可以其他锁如果同一个线程获得锁并且没有释放，这个线程再次获取锁就会造成死锁，互斥锁则可以运行同一个线程获得了锁之后依然可以再次获得锁。&lt;/li&gt;
  &lt;li&gt;@synchronize，对象锁，也是一个递归互斥锁。&lt;/li&gt;
  &lt;li&gt;Dispatch_semaphore,  信号量，更高级的互斥锁，初始值可以控制并发访问的最大量&lt;/li&gt;
  &lt;li&gt;OSSpinLock, iOS 10 废弃的自旋锁，原因是10之后增加了许多的线程默认优先级，自旋锁可能会造成线程优先级反转，导致死锁&lt;/li&gt;
  &lt;li&gt;os_unfair_lock, 用来取代OSSpinLock的互斥锁&lt;/li&gt;
  &lt;li&gt;pthread_mutex, 底层pthread互斥锁&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;性能&quot;&gt;性能&lt;/h5&gt;

&lt;p&gt;从&lt;a href=&quot;https://blog.ibireme.com/author/ibireme/&quot;&gt;ibireme&lt;/a&gt;的博客中图来看性能对比大概是这样的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blog.ibireme.com/wp-content/uploads/2016/01/lock_benchmark.png&quot; alt=&quot;lock_benchmark&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然作者只是单线程的一个时间消耗数据。不能反应多线程的实际性能，只能作为一个定性分析。&lt;/p&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="iOS" /><summary type="html">iOS中自旋锁和互斥锁 起因 属性修饰符atomic，是否是绝对线程安全的？ 当然乍一看，这两个问题好像没有必然的联系，但是了解atomic的内部实现，就能明白为什么我能跨度到自旋锁和互斥锁。（因为atomic其实内部是对于setter和getter加锁实现的） 后边我们再看atomic到底是否安全的问题 定义 锁：在计算机科学中，锁是在执行多线程时用于强行限制资源访问的同步机制，即用于在并发控制中保证对互斥要求的满足。(维基百科中的定义) 自旋锁： 自旋锁其实就是线程再未获得锁的时候处于忙等的状态，一直消耗cpu，而不会进入内核态。 互斥锁：互斥锁则是当未获得锁时，线程进入内核态，释放cpu的消耗，直到锁资源被释放，重新唤起休眠的线程。 其实从定义中我们也能很明确的看到了他们的优缺点：自旋锁一直处于忙等的状态，会持续消耗cpu，而互斥锁则不会，但是互斥锁会频繁的切换线程的状态，比较效率上会比自旋锁低很多。 iOS 中的锁 NSLock 非递归互斥锁。是对于pthread_mutex_t的封装。遵循了NSLocking协议。-lock与unlock必须在同一线程调用，否则会产生问题。 NSCondition， 与NSLock类似都是对于pthread_mutex_t的封装，区别在于，他还对于pthread_cond_t的封装，所以NSLock只能等待锁资源释放，然后唤起等待的线程，而NSCondition则可以由我们主动唤起线程 NSConditionLock, 条件互斥锁，也就是说，除了正常的锁资源释放我们获得锁之外，我们还需要满足设置的另外一个条件，才能获得锁。释放锁也是如此。 NSRecursiveLock, 递归锁，也是一个互斥锁。与其他锁不同的是，递归锁可以其他锁如果同一个线程获得锁并且没有释放，这个线程再次获取锁就会造成死锁，互斥锁则可以运行同一个线程获得了锁之后依然可以再次获得锁。 @synchronize，对象锁，也是一个递归互斥锁。 Dispatch_semaphore, 信号量，更高级的互斥锁，初始值可以控制并发访问的最大量 OSSpinLock, iOS 10 废弃的自旋锁，原因是10之后增加了许多的线程默认优先级，自旋锁可能会造成线程优先级反转，导致死锁 os_unfair_lock, 用来取代OSSpinLock的互斥锁 pthread_mutex, 底层pthread互斥锁 性能 从ibireme的博客中图来看性能对比大概是这样的： 当然作者只是单线程的一个时间消耗数据。不能反应多线程的实际性能，只能作为一个定性分析。</summary></entry><entry><title type="html">Objective-CLint（创建一个轻量级的、支持pre-commit的Objective-C 的静态检查）</title><link href="http://localhost:4000/2022/09/14/Objective_CLint.html" rel="alternate" type="text/html" title="Objective-CLint（创建一个轻量级的、支持pre-commit的Objective-C 的静态检查）" /><published>2022-09-14T00:00:00+08:00</published><updated>2022-09-14T00:00:00+08:00</updated><id>http://localhost:4000/2022/09/14/Objective_CLint</id><content type="html" xml:base="http://localhost:4000/2022/09/14/Objective_CLint.html">&lt;h1 id=&quot;objective-clint&quot;&gt;Objective-CLint&lt;/h1&gt;
&lt;p&gt;创建一个轻量级的、支持pre-commit的Objective-C 的静态检查&lt;/p&gt;

&lt;h3 id=&quot;感谢&quot;&gt;感谢&lt;/h3&gt;
&lt;p&gt;感谢 &lt;a href=&quot;https://github.com/square/spacecommander&quot;&gt;spacecommander&lt;/a&gt;作者提供的Objective-C lint的思路以及open source
本文大部分是基于 &lt;a href=&quot;https://github.com/square/spacecommander&quot;&gt;spacecommander&lt;/a&gt;累加的一些新功能。再次感谢开源作者，非常棒👍🏻&lt;/p&gt;

&lt;h3 id=&quot;架构构思&quot;&gt;架构/构思&lt;/h3&gt;
&lt;h4 id=&quot;1前因&quot;&gt;1.前因&lt;/h4&gt;
&lt;p&gt;因为OC-Lint的重量型检查，导致如果使用OCLint 那么首先我们需要安装OCLint 以及 还需要编译工程，如果我们使用&lt;a href=&quot;https://pre-commit.com/&quot;&gt;pre-commit&lt;/a&gt;那么
就会导致我们每次 git commit 时间会增加很多，每次 commit可能对于我们来说都是一种煎熬。ok那么就需要我们使用另外的方式解决。&lt;/p&gt;

&lt;p&gt;OK，解决方法之一就是我们之间使用Clang-format，我们知道其实OCLint也是基于Clang-format做的，那么在寻找的过程中发现了有伟大的 spacecommander 作者已经帮助我们集成了Clang-format
作者除此之外还解决了可能会引起Clang-format有歧义的代码修改、以及Clang-format 扫不到的一些规则修改。&lt;/p&gt;

&lt;p&gt;那么有了伟大的 spacecommander 作为基础，我们就可以利用他做一个pre-commit hook，用来OClint&lt;/p&gt;

&lt;h4 id=&quot;2相关实现改动&quot;&gt;2.相关实现、改动&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;在spacecommander 的基础上，实现了支持pre-commit，更方便集成&lt;/li&gt;
  &lt;li&gt;spacecommander 只是对比了format之后行数，以用来比较是否有不否和规则的代码出现，不够明显，我们采用diff的方式对比了
 format之前和之后的代码，使得开发者能更清楚，自己哪些地方代码不规范&lt;/li&gt;
  &lt;li&gt;spacecommander 提供了api 一键format代码，我们不提供此功能，因为我总觉得只有多次的认识到不规范的代码，才能保证下次写出规范的代码&lt;/li&gt;
  &lt;li&gt;提供了diff之后可视化输出，打开html，一眼即可看到不规范的代码&lt;/li&gt;
  &lt;li&gt;修改了部分自定义规则代码，以适应灵活的代码不规范&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/HaoXianSen/Objective-CLint/blob/main/.clang-format&quot;&gt;.clang-format&lt;/a&gt; 配置了更多的clang 规则&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;使用&quot;&gt;使用&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装 pre-commit , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install pre-commit&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在工程根目录添加(即.git同级目录)添加 &lt;a href=&quot;https://github.com/HaoXianSen/Objective-CLint/blob/main/.pre-commit-config.yaml&quot;&gt;.pre-commit-config.yaml&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;并配置为：&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fail_fast: false
repos:
  - repo: https://github.com/HaoXianSen/Objective-CLint.git
    rev: v0.0.2
    hooks:
      - id: objc-lint
        name: objc-format
        entry: format-objc-hook
        language: script
        require_serial: true
        verbose: true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;strong&gt;高阶使用&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;fork 工程，可修改、增加自定义规则，以及.clang 规则&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;相关截图&quot;&gt;相关截图&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20220914145908image-20220914145906934.png&quot; alt=&quot;image-20220914145906934&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20220914145930image-20220914145930603.png&quot; alt=&quot;image-20220914145930603&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20220914150033image-20220914150033308.png&quot; alt=&quot;image-20220914150033308&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;github&quot;&gt;github&lt;/h3&gt;

&lt;p&gt;https://github.com/HaoXianSen/Objective-CLint&lt;/p&gt;

&lt;h4 id=&quot;联系方式&quot;&gt;联系方式&lt;/h4&gt;

&lt;p&gt;harry_c2016@163.com&lt;/p&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="iOS" /><category term="pre-commit" /><category term="hooks" /><summary type="html">Objective-CLint 创建一个轻量级的、支持pre-commit的Objective-C 的静态检查 感谢 感谢 spacecommander作者提供的Objective-C lint的思路以及open source 本文大部分是基于 spacecommander累加的一些新功能。再次感谢开源作者，非常棒👍🏻 架构/构思 1.前因 因为OC-Lint的重量型检查，导致如果使用OCLint 那么首先我们需要安装OCLint 以及 还需要编译工程，如果我们使用pre-commit那么 就会导致我们每次 git commit 时间会增加很多，每次 commit可能对于我们来说都是一种煎熬。ok那么就需要我们使用另外的方式解决。 OK，解决方法之一就是我们之间使用Clang-format，我们知道其实OCLint也是基于Clang-format做的，那么在寻找的过程中发现了有伟大的 spacecommander 作者已经帮助我们集成了Clang-format 作者除此之外还解决了可能会引起Clang-format有歧义的代码修改、以及Clang-format 扫不到的一些规则修改。 那么有了伟大的 spacecommander 作为基础，我们就可以利用他做一个pre-commit hook，用来OClint 2.相关实现、改动 在spacecommander 的基础上，实现了支持pre-commit，更方便集成 spacecommander 只是对比了format之后行数，以用来比较是否有不否和规则的代码出现，不够明显，我们采用diff的方式对比了 format之前和之后的代码，使得开发者能更清楚，自己哪些地方代码不规范 spacecommander 提供了api 一键format代码，我们不提供此功能，因为我总觉得只有多次的认识到不规范的代码，才能保证下次写出规范的代码 提供了diff之后可视化输出，打开html，一眼即可看到不规范的代码 修改了部分自定义规则代码，以适应灵活的代码不规范 .clang-format 配置了更多的clang 规则 使用 安装 pre-commit , brew install pre-commit 在工程根目录添加(即.git同级目录)添加 .pre-commit-config.yaml 并配置为： fail_fast: false repos: - repo: https://github.com/HaoXianSen/Objective-CLint.git rev: v0.0.2 hooks: - id: objc-lint name: objc-format entry: format-objc-hook language: script require_serial: true verbose: true 高阶使用 fork 工程，可修改、增加自定义规则，以及.clang 规则 相关截图 github https://github.com/HaoXianSen/Objective-CLint 联系方式 harry_c2016@163.com</summary></entry><entry><title type="html">关于iOS 代码质量把控研究</title><link href="http://localhost:4000/2022/08/29/%E5%85%B3%E4%BA%8EiOS-%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%8A%8A%E6%8E%A7%E7%A0%94%E7%A9%B6.html" rel="alternate" type="text/html" title="关于iOS 代码质量把控研究" /><published>2022-08-29T00:00:00+08:00</published><updated>2022-08-29T00:00:00+08:00</updated><id>http://localhost:4000/2022/08/29/%E5%85%B3%E4%BA%8EiOS%20%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%8A%8A%E6%8E%A7%E7%A0%94%E7%A9%B6</id><content type="html" xml:base="http://localhost:4000/2022/08/29/%E5%85%B3%E4%BA%8EiOS-%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%8A%8A%E6%8E%A7%E7%A0%94%E7%A9%B6.html">&lt;h3 id=&quot;前提&quot;&gt;前提&lt;/h3&gt;

&lt;p&gt;code review 是我们工作中可以说必不可少的一环，一方面能够提早的发现代码中不合理的部分、或者不稳定、架构不合理的部分，提高代码的质量；另外一方面能，更够让团队的知识共享，互相熟悉业务需求，以及团队写的好的部分。OK，作为code review最早最基础的一环，可以说是代码规范。如果人工进行代码规范的维护，难免会遗漏，而且会花费时间在这部分。&lt;/p&gt;

&lt;p&gt;所以，针对这种情况，我们可以做的是，做一个lint帮助我们检测不规范的代码，OK，下面就lint，开始研究！&lt;/p&gt;

&lt;h3 id=&quot;lint-时机&quot;&gt;Lint 时机&lt;/h3&gt;

&lt;p&gt;我们熟知的Objective-C lint，有&lt;a href=&quot;https://docs.oclint.org/en/stable/index.html#usage&quot;&gt;OClint&lt;/a&gt;、&lt;a href=&quot;https://fbinfer.com/&quot;&gt;Infer&lt;/a&gt;; swift 有&lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;swiftLint&lt;/a&gt;，首先我们先不考虑这个几个lint的问题，我们先考虑一个重要的问题，lint应该放到什么阶段？&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;放到build时期？&lt;/p&gt;

    &lt;p&gt;这种方案被我们pass掉了，首先放到build时期会增加我们的build时间，第二事实上我们需要嵌入脚本到项目里，可能会影响到打包。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;放到git push 之后gitlab pipeline时期？&lt;/p&gt;

    &lt;p&gt;这种方案不出意外也被pass了，首先如果知道pipeline job的人都知道，我们需要配置runner, 本身来说配置加集成，可能就不是一个容易的事情，而且对于我来说我觉得这个事情，太晚了，lint 有问题，还等再次push….&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;放到pre commit时期？&lt;/p&gt;

    &lt;p&gt;Ok, 对于比较合适的事情，我觉得就是在precommit时期，因为基于git 管理，我们代码每次改动之后都需要commit，那么commit事情去做lint这件事情，是非常合适的，如果存在问题，那么就修改之后，再次commit。时间上，时机上我觉得都很合适&lt;/p&gt;

    &lt;p&gt;ok， 对于 lint 放到哪个时机的问题，我们已经确定–pre commit时期&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;pre-commit&quot;&gt;&lt;a href=&quot;https://pre-commit.com/#install&quot;&gt;pre-commit&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;git 其实为我们提供了很多种的hook方式，随便打开一个.git文件夹就可以看到一堆的hooks example文件，如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20220915152238image-20220915152237340.png&quot; alt=&quot;image-20220915152237340&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OK，所以其实我们想要hook，就变得非常容易，只要我们修改pre-commit为可执行文件，并在里边按照example嵌入执行代码即可。&lt;/p&gt;

&lt;p&gt;这一步，早就有人帮我们做了，那就是&lt;a href=&quot;https://pre-commit.com/#install&quot;&gt;pre-commit&lt;/a&gt; 他不仅简单了我们的操作，并且起到了脚本lint代码分离的效果，他通过.pre-commit-config.yaml 文件中的配置，在执行git commit时候执行&lt;a href=&quot;https://pre-commit.com/#install&quot;&gt;pre-commit&lt;/a&gt; 脚本，再而执行到安装的pre-commit代码里，进行clone .pre-commit-config.yaml里配置的repo，以及分析，执行对应的hook代码。&lt;/p&gt;

&lt;p&gt;接下来简单的介绍一下&lt;a href=&quot;https://pre-commit.com/#install&quot;&gt;pre-commit&lt;/a&gt; 相关的东西：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装&lt;/p&gt;

    &lt;p&gt;Mac 推荐使用：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install pre-commit&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;其他安装：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip install pre-commit&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda install -c conda-forge pre-commit&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;配置&lt;/p&gt;

    &lt;p&gt;安装完pre-commit之后，在.git 同级目录，添加.pre-commit-config.yaml 文件，则可支持pre-commit&lt;/p&gt;

    &lt;p&gt;.pre-commit-config.yaml的相关配置：&lt;/p&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;repos&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;   &lt;span class=&quot;na&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://github.com/pre-commit/pre-commit-hooks&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;rev&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v2.3.0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;   &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;check-yaml&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;   &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;end-of-file-fixer&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;   &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;trailing-whitespace&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;   &lt;span class=&quot;na&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://github.com/psf/black&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;rev&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;21.12b0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;   &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;black&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;注意点：rev: 不再支持commit hash id， 只支持tag&lt;/p&gt;

    &lt;p&gt;具体参考：https://pre-commit.com/#plugins&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建一个自己的hook&lt;/p&gt;

    &lt;p&gt;一个hook必须要包含a .pre-commit-hooks.yaml 文件，这个文件是告诉pre-commit，这个hook库里包含的hook id等信息…&lt;/p&gt;

    &lt;p&gt;大概张这个样子…&lt;/p&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;   &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;trailing-whitespace&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Trim Trailing Whitespace&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;This hook trims trailing whitespace.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;trailing-whitespace-fixer&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;python&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;​		hooks 仓库，支持很多种语言，每种语言包含的文件也不太一样，比如script （shell脚本）必须entry参		数给一个相对路径的shell脚本；比如python，必须要执行pip install .（及包括setup.py或者		pyproject.toml）以及entry一般在setup.py 里的console_scripts或者scripts配置的。&lt;/p&gt;

&lt;p&gt;​	&lt;a href=&quot;https://pre-commit.com/#script&quot;&gt;了解更多&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;objective-c-lint&quot;&gt;Objective-C Lint&lt;/h3&gt;

&lt;p&gt;上面提到现存在两种lint，&lt;a href=&quot;https://oclint.org/&quot;&gt;oc-lint&lt;/a&gt;/ infer。&lt;/p&gt;

&lt;h4 id=&quot;oc-lint&quot;&gt;&lt;a href=&quot;https://oclint.org/&quot;&gt;oc-lint&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;安装： &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew tap oclint/formulae&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;​			&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;	 brew install oclint&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;​			&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*// 安装xcpretty* gem install xcpretty&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;先简单介绍一下OC lint：OC lint 是通过编译之后的产物 compile_commands.json 去分析的，所以必要的是我们执行oc-lint必须要build。然后在完成之后会以自动打开一个html分析结果。&lt;/p&gt;

&lt;p&gt;我们先说说他的缺点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;必须要编译，首先这是一个漫长的过程，而且对于我们一个不支持模拟器的app（害！因为内部直播的framework没把x86打进去）这是比较致命的可以说&lt;/li&gt;
  &lt;li&gt;他不支持增量查，这样会带出来很多历史遗留问题，对于集成来说，又成了一个比较窘困的问题（你想想，以前多少可能有问题的代码，这集成都得改，不得改个三天三夜的😁）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;接下来我们说说他的优点：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. oc-lint 不仅查了不规范的代码，而且查了可能会导致问题的坏味道代码
1. oc-lint 对于代码严重程度做了等级分化，并且以html的方式打开，更加的直观
1. oc-lint支持自定义规则，和修改规则
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当然，对于1.2的缺点，已经有了一些方案解决，&lt;a href=&quot;https://github.com/shulong-apple/fast-oclint&quot;&gt;了解更多&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;后面会尝试集成到pre-commit hook, 敬请期待…&lt;/p&gt;

&lt;h4 id=&quot;infer&quot;&gt;&lt;a href=&quot;https://infer.liaohuqiu.net/docs/getting-started.html&quot;&gt;infer&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;安装: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install infer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;​			可以选择下载安装包安装，&lt;a href=&quot;https://infer.liaohuqiu.net/docs/getting-started.html&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Infer 是facebook提供的一个lint 库&lt;/p&gt;

&lt;p&gt;缺点：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	1. 貌似infer 也需要编译工程
	1. 不支持自定义规则
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;优点：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 支持多种检测，包括空指针、内存泄漏等等的检测
1. 支持增量检测
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;具体我也没有太多研究，需要深入研究的，&lt;a href=&quot;https://fbinfer.com/docs/analyzing-apps-or-projects&quot;&gt;请参考&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;objective-clint-自制hook-&quot;&gt;&lt;a href=&quot;https://github.com/HaoXianSen/Objective-CLint&quot;&gt;Objective-CLint 自制hook &lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;这个库是我基于SpaceCommand三方库，做的pre-commit hook，简单的介绍一下：&lt;/p&gt;

&lt;p&gt;SpaceCommand是基于clang-format 制作的代码规范工具，而且写了一些自定义规则，用来检测clang-format忽略或者有歧义的部分。它支持了检测不规范代码，并给出终端提示；而且提供了一键格式化所有有问题的代码。&lt;/p&gt;

&lt;p&gt;那么Objective-CLint 在它的基础上，1. 我显示了将它配置成一个可以pre-commit集成的hook，2. 增加了可视化diff 到html，自动打开 3. 去掉了一键格式化 5. 修改自定义规则，使得适用更加广泛。&lt;/p&gt;

&lt;p&gt;具体内容介绍，请移步到&lt;a href=&quot;https://haoxiansen.github.io/2022/09/14/Objective_CLint.html&quot;&gt;个人博客Objective-CLint&lt;/a&gt; 或者移步到&lt;a href=&quot;https://github.com/HaoXianSen/Objective-CLint&quot;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;到此，我们对于OC代码已经有了好几种方案，我选择了容易集成且轻量级的自制hook。&lt;/p&gt;

&lt;h3 id=&quot;swift-lint&quot;&gt;Swift Lint&lt;/h3&gt;

&lt;h4 id=&quot;swiftlint&quot;&gt;&lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;swiftLint&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;​	Swift 代码毫无疑问，我们就可以使用SwiftLint去集成。swiftLint 已经为我们提供了pre-commit hook，我	们可以直接使用，当然也可以fork，修改规则使用&lt;/p&gt;

&lt;p&gt;​	具体请查看github：https://github.com/realm/SwiftLint&lt;/p&gt;

&lt;h3 id=&quot;集成&quot;&gt;集成&lt;/h3&gt;

&lt;p&gt;到此为止，我们所有的lint 工具 以及hook 工具已经齐全，即 pre-commit + Objective-CLint + SwiftLint!&lt;/p&gt;

&lt;p&gt;Ok, 当然我们还有一些工作量需要做，为了团队更好的集成，我们添加检测安装脚本位于pod pre_install, 目的在于自动检测是否安装了pre-commit，以及自动安装pre-commit。&lt;/p&gt;

&lt;p&gt;下面是检测脚本：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;正在检查安装必要工具...&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 检测是否安装了homebrew&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; brew &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;✅homebrew 已经安装&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else 
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;正在安装brew...&quot;&lt;/span&gt;
    /bin/bash &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'✅安装完成homebrew 🍺🍺🍺 /n'&lt;/span&gt;
   
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 检测是否安装了pre-commit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; pre-commit&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;✅pre-commit 已经安装&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;正在安装pre-commit...&quot;&lt;/span&gt;
    brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pre-commit
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'✅安装完成pre-commit 🍺🍺🍺/n'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi


if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.pre-commit-config.yaml&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[31m❎文件 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.pre-commit-config.yaml&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; 不存在， 请添加.pre-commit-config.yaml&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;pre-commit &lt;span class=&quot;nb&quot;&gt;install
echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[36m ...................所有工具都安装成功😁😁😁 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ok, 我们把它集成到pod中，当然没有使用pod管理的，直接执行这个脚本即可。把下面的脚本嵌入到podfile中&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pre_install&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;installer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;sb&quot;&gt;`sh check_tools.sh`&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Pod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;UI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;添加.pre-commit-config.yaml&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;fail_fast&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;repos&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://github.com/HaoXianSen/Objective-CLint.git&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;rev&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v0.0.4&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;objc-lint&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;objc-format&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;format-objc-hook&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;script&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;require_serial&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;verbose&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://github.com/realm/SwiftLint&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;rev&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.49.1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;swiftlint&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;OK，这样我们整个集成就完成了。&lt;/p&gt;

&lt;p&gt;当然swiftLint的配置不一定是适用于我们的，比如我们想report为html、或者添加一些自定义的规则等等，就需要我们fork一份swiftLint，做一些自己的适配。上面的swiftLint就使用自己的repo以及自己tag就好了。&lt;/p&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

&lt;p&gt;到此为止，我们可以说整iOS 混合发开的代码规范lint就集成完事了。&lt;/p&gt;

&lt;p&gt;当然我们还有优化的部分，首先自己的lint 只是规范检测，不想OCLint 那样面积大，并且输出也不是很哇塞。后续我们可以继续使用fast-oclint的方案，既能使用OCLint的强大，又能不用编译还支持增量编译。&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="iOS" /><summary type="html">前提 code review 是我们工作中可以说必不可少的一环，一方面能够提早的发现代码中不合理的部分、或者不稳定、架构不合理的部分，提高代码的质量；另外一方面能，更够让团队的知识共享，互相熟悉业务需求，以及团队写的好的部分。OK，作为code review最早最基础的一环，可以说是代码规范。如果人工进行代码规范的维护，难免会遗漏，而且会花费时间在这部分。 所以，针对这种情况，我们可以做的是，做一个lint帮助我们检测不规范的代码，OK，下面就lint，开始研究！ Lint 时机 我们熟知的Objective-C lint，有OClint、Infer; swift 有swiftLint，首先我们先不考虑这个几个lint的问题，我们先考虑一个重要的问题，lint应该放到什么阶段？ 放到build时期？ 这种方案被我们pass掉了，首先放到build时期会增加我们的build时间，第二事实上我们需要嵌入脚本到项目里，可能会影响到打包。 放到git push 之后gitlab pipeline时期？ 这种方案不出意外也被pass了，首先如果知道pipeline job的人都知道，我们需要配置runner, 本身来说配置加集成，可能就不是一个容易的事情，而且对于我来说我觉得这个事情，太晚了，lint 有问题，还等再次push…. 放到pre commit时期？ Ok, 对于比较合适的事情，我觉得就是在precommit时期，因为基于git 管理，我们代码每次改动之后都需要commit，那么commit事情去做lint这件事情，是非常合适的，如果存在问题，那么就修改之后，再次commit。时间上，时机上我觉得都很合适 ok， 对于 lint 放到哪个时机的问题，我们已经确定–pre commit时期 pre-commit git 其实为我们提供了很多种的hook方式，随便打开一个.git文件夹就可以看到一堆的hooks example文件，如下： OK，所以其实我们想要hook，就变得非常容易，只要我们修改pre-commit为可执行文件，并在里边按照example嵌入执行代码即可。 这一步，早就有人帮我们做了，那就是pre-commit 他不仅简单了我们的操作，并且起到了脚本lint代码分离的效果，他通过.pre-commit-config.yaml 文件中的配置，在执行git commit时候执行pre-commit 脚本，再而执行到安装的pre-commit代码里，进行clone .pre-commit-config.yaml里配置的repo，以及分析，执行对应的hook代码。 接下来简单的介绍一下pre-commit 相关的东西： 安装 Mac 推荐使用：brew install pre-commit 其他安装：pip install pre-commit conda install -c conda-forge pre-commit 配置 安装完pre-commit之后，在.git 同级目录，添加.pre-commit-config.yaml 文件，则可支持pre-commit .pre-commit-config.yaml的相关配置： repos: - repo: https://github.com/pre-commit/pre-commit-hooks rev: v2.3.0 hooks: - id: check-yaml - id: end-of-file-fixer - id: trailing-whitespace - repo: https://github.com/psf/black rev: 21.12b0 hooks: - id: black 注意点：rev: 不再支持commit hash id， 只支持tag 具体参考：https://pre-commit.com/#plugins 创建一个自己的hook 一个hook必须要包含a .pre-commit-hooks.yaml 文件，这个文件是告诉pre-commit，这个hook库里包含的hook id等信息… 大概张这个样子… - id: trailing-whitespace name: Trim Trailing Whitespace description: This hook trims trailing whitespace. entry: trailing-whitespace-fixer language: python types: [text] ​ hooks 仓库，支持很多种语言，每种语言包含的文件也不太一样，比如script （shell脚本）必须entry参 数给一个相对路径的shell脚本；比如python，必须要执行pip install .（及包括setup.py或者 pyproject.toml）以及entry一般在setup.py 里的console_scripts或者scripts配置的。 ​ 了解更多 Objective-C Lint 上面提到现存在两种lint，oc-lint/ infer。 oc-lint 安装： brew tap oclint/formulae ​ brew install oclint ​ *// 安装xcpretty* gem install xcpretty 先简单介绍一下OC lint：OC lint 是通过编译之后的产物 compile_commands.json 去分析的，所以必要的是我们执行oc-lint必须要build。然后在完成之后会以自动打开一个html分析结果。 我们先说说他的缺点： 必须要编译，首先这是一个漫长的过程，而且对于我们一个不支持模拟器的app（害！因为内部直播的framework没把x86打进去）这是比较致命的可以说 他不支持增量查，这样会带出来很多历史遗留问题，对于集成来说，又成了一个比较窘困的问题（你想想，以前多少可能有问题的代码，这集成都得改，不得改个三天三夜的😁） 接下来我们说说他的优点： 1. oc-lint 不仅查了不规范的代码，而且查了可能会导致问题的坏味道代码 1. oc-lint 对于代码严重程度做了等级分化，并且以html的方式打开，更加的直观 1. oc-lint支持自定义规则，和修改规则 当然，对于1.2的缺点，已经有了一些方案解决，了解更多 后面会尝试集成到pre-commit hook, 敬请期待… infer 安装: brew install infer ​ 可以选择下载安装包安装，下载地址 Infer 是facebook提供的一个lint 库 缺点： 1. 貌似infer 也需要编译工程 1. 不支持自定义规则 优点： 1. 支持多种检测，包括空指针、内存泄漏等等的检测 1. 支持增量检测 具体我也没有太多研究，需要深入研究的，请参考 Objective-CLint 自制hook 这个库是我基于SpaceCommand三方库，做的pre-commit hook，简单的介绍一下： SpaceCommand是基于clang-format 制作的代码规范工具，而且写了一些自定义规则，用来检测clang-format忽略或者有歧义的部分。它支持了检测不规范代码，并给出终端提示；而且提供了一键格式化所有有问题的代码。 那么Objective-CLint 在它的基础上，1. 我显示了将它配置成一个可以pre-commit集成的hook，2. 增加了可视化diff 到html，自动打开 3. 去掉了一键格式化 5. 修改自定义规则，使得适用更加广泛。 具体内容介绍，请移步到个人博客Objective-CLint 或者移步到github 到此，我们对于OC代码已经有了好几种方案，我选择了容易集成且轻量级的自制hook。 Swift Lint swiftLint ​ Swift 代码毫无疑问，我们就可以使用SwiftLint去集成。swiftLint 已经为我们提供了pre-commit hook，我 们可以直接使用，当然也可以fork，修改规则使用 ​ 具体请查看github：https://github.com/realm/SwiftLint 集成 到此为止，我们所有的lint 工具 以及hook 工具已经齐全，即 pre-commit + Objective-CLint + SwiftLint! Ok, 当然我们还有一些工作量需要做，为了团队更好的集成，我们添加检测安装脚本位于pod pre_install, 目的在于自动检测是否安装了pre-commit，以及自动安装pre-commit。 下面是检测脚本： #!/bin/bash echo &quot;正在检查安装必要工具...&quot; # 检测是否安装了homebrew if [ &quot;$(command -v brew -v)&quot; ]; then echo &quot;✅homebrew 已经安装&quot; else echo &quot;正在安装brew...&quot; /bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot; echo '✅安装完成homebrew 🍺🍺🍺 /n' fi # 检测是否安装了pre-commit if [ &quot;$(command -v pre-commit)&quot; ]; then echo &quot;✅pre-commit 已经安装&quot; else echo &quot;正在安装pre-commit...&quot; brew install pre-commit echo '✅安装完成pre-commit 🍺🍺🍺/n' fi if [ ! -f &quot;.pre-commit-config.yaml&quot; ]; then echo &quot;\033[31m❎文件 \&quot;.pre-commit-config.yaml\&quot; 不存在， 请添加.pre-commit-config.yaml\033[0m&quot; exit 1 fi pre-commit install echo &quot;\033[36m ...................所有工具都安装成功😁😁😁 \033[0m&quot; Ok, 我们把它集成到pod中，当然没有使用pod管理的，直接执行这个脚本即可。把下面的脚本嵌入到podfile中 pre_install do |installer| flag = `sh check_tools.sh` Pod::UI.puts flag end 添加.pre-commit-config.yaml fail_fast: false repos: - repo: https://github.com/HaoXianSen/Objective-CLint.git rev: v0.0.4 hooks: - id: objc-lint name: objc-format entry: format-objc-hook language: script require_serial: true verbose: true - repo: https://github.com/realm/SwiftLint rev: 0.49.1 hooks: - id: swiftlint OK，这样我们整个集成就完成了。 当然swiftLint的配置不一定是适用于我们的，比如我们想report为html、或者添加一些自定义的规则等等，就需要我们fork一份swiftLint，做一些自己的适配。上面的swiftLint就使用自己的repo以及自己tag就好了。 总结 到此为止，我们可以说整iOS 混合发开的代码规范lint就集成完事了。 当然我们还有优化的部分，首先自己的lint 只是规范检测，不想OCLint 那样面积大，并且输出也不是很哇塞。后续我们可以继续使用fast-oclint的方案，既能使用OCLint的强大，又能不用编译还支持增量编译。 ​</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20220914182001fengjingpic.png" /><media:content medium="image" url="https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20220914182001fengjingpic.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">我想搞个mac app 插件，仅仅为了Typroa插入几行预置文字</title><link href="http://localhost:4000/2022/08/26/%E6%88%91%E6%83%B3%E6%90%9E%E4%B8%AATyproa%E7%9A%84%E6%8F%92%E4%BB%B6-%E4%BB%85%E4%BB%85%E4%B8%BA%E4%BA%86%E6%8F%92%E5%85%A5%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81.html" rel="alternate" type="text/html" title="我想搞个mac app 插件，仅仅为了Typroa插入几行预置文字" /><published>2022-08-26T00:00:00+08:00</published><updated>2022-08-26T00:00:00+08:00</updated><id>http://localhost:4000/2022/08/26/%E6%88%91%E6%83%B3%E6%90%9E%E4%B8%AATyproa%E7%9A%84%E6%8F%92%E4%BB%B6,%E4%BB%85%E4%BB%85%E4%B8%BA%E4%BA%86%E6%8F%92%E5%85%A5%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81</id><content type="html" xml:base="http://localhost:4000/2022/08/26/%E6%88%91%E6%83%B3%E6%90%9E%E4%B8%AATyproa%E7%9A%84%E6%8F%92%E4%BB%B6-%E4%BB%85%E4%BB%85%E4%B8%BA%E4%BA%86%E6%8F%92%E5%85%A5%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81.html">&lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;

&lt;p&gt;为了更好的维持我的博客系统，想着之后的博客都发布于github.io， 那么如果你有搭建过github.io 那么相比都知道YAML, 通过MARK down 中插入YAML FORMAT 语言，我们可以控制博客的标题、评论等等。。那么简单来说就是我不想用Typora每次建立一个新blog，都需要繁琐的插入那一堆YAML，比如&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;title: position、anchorPoint、frame理解

tags: iOS

key: 107

# article_header:

# type: cover

# image:

# src: https://user-images.githubusercontent.com/8369671/80915045-153ff780-8d82-11ea-9acf-6ccbf2b05d9d.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;OK，所以首先呢我把Typora的所有文档看了一遍，没有入口可配置。那咋办？&lt;/p&gt;

&lt;p&gt;想法也就从这诞生了，我能不能写个插件，在Typora 新建文件的时候，手动插入预置文字，接下来记录插件开发过程，成功不成功最后见分晓！&lt;/p&gt;

&lt;h2 id=&quot;着手干查资料&quot;&gt;着手干（查资料）&lt;/h2&gt;

&lt;p&gt;通过查看资料，我们需要两个东西辅助，1.&lt;a href=&quot;https://www.jianshu.com/p/1e3fe0a8c048&quot;&gt;class-dump)&lt;/a&gt; 2. &lt;a href=&quot;https://github.com/Tyilo/insert_dylib&quot;&gt;insert_dylib&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; 基本原理就是：&lt;/p&gt;

&lt;p&gt;Mach-O 二进制文件Load Commands中的 LC_LOAD_DYLIB 标头告诉 macOS在执行期间要加载哪些动态库 (dylib)。所以我们只需要在二进制文件中添加一条LC_LOAD_DYLIB就可以。而&lt;a href=&quot;https://github.com/Tyilo/insert_dylib&quot;&gt;insert_dylib&lt;/a&gt;工具已经为我们实现了添加的功能&lt;/p&gt;

&lt;p&gt;接下来一个一个解释：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;class-dump&lt;/p&gt;

    &lt;p&gt;通过名字我们大概能猜到这是一个什么工具，类似一个解释类的工具，确实他也是干这个的，正确安装之后，我们可以通过class-dump [option] Mach-o文件，输出mac app的暴露类的相关属性，OK，我们用的就是class-dump -H Mach-o文件 输出头文件，我们通过头文件查看mac app源头文件，然后找到需要hook的类进行hook（具体的安装可以点击超链接查看）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;insert_dylib&lt;/p&gt;

    &lt;p&gt;这个工具，可以帮助我们插入一个dylib 到Mach-o二进制文件中，所以也就是说我们需要做一个framework然后通过这个库，嵌入到app的Mach-o二进制文件里&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ok，工具都全乎了，接下来的时间，就是需要我们做一个framework，这个framework是用专门hook的动态库。&lt;/p&gt;

&lt;p&gt;当然hook，Objective-C里就是runtime里的Swizzing Method搞定，这个iOS 开发应该都用过不少（常规技术）&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;具体实践&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;new project - framework&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/:Users:haoyh02:Library:Application%20Support:typora-user-images:image-20220829140442928.png&quot; alt=&quot;image-20220829140442928&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;我们新建一个framework，用来做动态库&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;查看class-dump的类，hook 找到的类做功能&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/:Users:haoyh02:Library:Application%20Support:typora-user-images:image-20220829140836995.png&quot; alt=&quot;image-20220829140836995&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;cd 到 /Applications/Typora.app/Contents/MacOS/&lt;/p&gt;

        &lt;p&gt;使用class-dump -H /Applications/Typora.app/Contents/MacOS/Typora -o /Users/haoyh02/Desktop/typora.h 输出头文件解析到桌面目标目录，如下&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/:Users:haoyh02:Library:Application%20Support:typora-user-images:image-20220829141211348.png&quot; alt=&quot;image-20220829141211348&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;ok，接下来我就需要分析头文件，找出自己需要hook的类，以及方法，当然这个过程才是最漫长的，而且是不断的尝试出来的。具体的分析我就不赘述了，就是看代码呗。&lt;/p&gt;

        &lt;p&gt;最终我们找到了LibraryCommands 类，他大概就是一些文件命令处理，比如新建文件，当然我们hook的是这个类，但是具体文件处理则是Document这个类，集成于NSDocument。&lt;/p&gt;

        &lt;p&gt;具体看代码&lt;/p&gt;

        &lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  TyporaAutoRejectHook.m&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  TyporaAutoReject&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  Created by 郝玉鸿 on 2022/8/26.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
      
&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;
#import &amp;lt;AppKit/AppKit.h&amp;gt;
#import &quot;TyporaAutoReject.h&quot;
#import &amp;lt;objc/runtime.h&amp;gt;
&lt;/span&gt;      
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ty_hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swizzClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swizzSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class_getInstanceMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;originClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swizzledMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class_getInstanceMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;swizzClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swizzSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;originalMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swizzledMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;method_exchangeImplementations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;originalMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swizzledMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSDocument&lt;/span&gt;
      
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
      
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LibraryCommands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSObject&lt;/span&gt;
      
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
      
&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Typora&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      
&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hookThunder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ty_hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objc_getClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LibraryCommands&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hook_newDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hook_newDocument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hook_newDocument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
          
    &lt;span class=&quot;n&quot;&gt;dispatch_after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatch_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DISPATCH_TIME_NOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;LibraryCommands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LibraryCommands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;injectString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;---&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;title: &amp;lt;xxxx&amp;gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;tags: [iOS] [MAC] [Plugin]&amp;gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;key: xxx &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# article_header:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# type: cover &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# image:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; # src: https://user-images.githubusercontent.com/8369671/80915045-153ff780-8d82-11ea-9acf-6ccbf2b05d9d.png &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;---&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;injectString&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forKeyPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
              
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;writeToURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileURL&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ofType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;performSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSSelectorFromString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;syncToClient&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;performSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSSelectorFromString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;syncToSelf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
      
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__attribute__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSObject&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hookThunder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;很简单，思路就是hook到新建文件的方法，然后2s之后，文件内插入一段预置文字。然后同步界面。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;copy framework的产出（编译，products/xxx.framework）到mac app 下的contents/MacOS&lt;/p&gt;

        &lt;p&gt;OK，接下来我们需要build工程，得到products/xxx.framework 产物。xcode13 隐藏了products，我们只需要打开pbxproj文件, 修改mainGroup 和 productRefGroup 一样（本身也是一样的，我们只需要copy再次保存就好了），保存就可以出现，也可以到DerivedData里去找&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/:Users:haoyh02:Library:Application%20Support:typora-user-images:image-20220829141839812.png&quot; alt=&quot;image-20220829141839812&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/:Users:haoyh02:Library:Application%20Support:typora-user-images:image-20220829141945528.png&quot; alt=&quot;image-20220829141945528&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;然后copy framework，到/Applications/Typora.app/Contents/ 下即可。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;执行insert_dylib 命令&lt;/p&gt;

        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ./insert_dylib &lt;span class=&quot;nt&quot;&gt;--all-yes&lt;/span&gt; /Applications/Typora.app/Contents/MacOS/TyporaAutoReject.framework/TyporaAutoReject Typora_backup Typora 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;执行这个命令后，即可嵌入framework&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;重新打开应用&lt;/p&gt;

        &lt;p&gt;一定要重新打开应用，否则不生效（这个其实不用想也是这样，毕竟我们是编译型程序）&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;ok，当然这个步骤很麻烦，为了我们能更好的重复验证，我写了脚本执行，这些命令&lt;/p&gt;

        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      
&lt;span class=&quot;nb&quot;&gt;sudo rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; /Applications/Typora.app/Contents/MacOS/TyporaAutoReject.framework
&lt;span class=&quot;nb&quot;&gt;sudo mv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; /Users/haoyh02/Library/Developer/Xcode/DerivedData/TyporaAutoReject-duhvxgpyrtuykugkepbmpmhciiyh/Build/Products/Debug/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /Applications/Typora.app/Contents/MacOS/
./insert_dylib &lt;span class=&quot;nt&quot;&gt;--all-yes&lt;/span&gt; /Applications/Typora.app/Contents/MacOS/TyporaAutoReject.framework/TyporaAutoReject Typora_backup Typora
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;​	至此，我们为Typora做的小插件，完全生效了。我们来看一下效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/:Users:haoyh02:Desktop:result.png&quot; alt=&quot;result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/1e3fe0a8c048&quot;&gt;安装class-dump&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lemonlie.com/develop-plug-in-for-mac-app/&quot;&gt;如何为macOS应用开发插件&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Tyilo/insert_dylib&quot;&gt;insert_dylib&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nygard/class-dump&quot;&gt;class-dump&lt;/a&gt;&lt;/p&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="iOS" /><category term="MAC" /><category term="Plugin" /><summary type="html">前提 为了更好的维持我的博客系统，想着之后的博客都发布于github.io， 那么如果你有搭建过github.io 那么相比都知道YAML, 通过MARK down 中插入YAML FORMAT 语言，我们可以控制博客的标题、评论等等。。那么简单来说就是我不想用Typora每次建立一个新blog，都需要繁琐的插入那一堆YAML，比如 title: position、anchorPoint、frame理解 tags: iOS key: 107 # article_header: # type: cover # image: # src: https://user-images.githubusercontent.com/8369671/80915045-153ff780-8d82-11ea-9acf-6ccbf2b05d9d.png OK，所以首先呢我把Typora的所有文档看了一遍，没有入口可配置。那咋办？ 想法也就从这诞生了，我能不能写个插件，在Typora 新建文件的时候，手动插入预置文字，接下来记录插件开发过程，成功不成功最后见分晓！ 着手干（查资料） 通过查看资料，我们需要两个东西辅助，1.class-dump) 2. insert_dylib  基本原理就是： Mach-O 二进制文件Load Commands中的 LC_LOAD_DYLIB 标头告诉 macOS在执行期间要加载哪些动态库 (dylib)。所以我们只需要在二进制文件中添加一条LC_LOAD_DYLIB就可以。而insert_dylib工具已经为我们实现了添加的功能 接下来一个一个解释： class-dump 通过名字我们大概能猜到这是一个什么工具，类似一个解释类的工具，确实他也是干这个的，正确安装之后，我们可以通过class-dump [option] Mach-o文件，输出mac app的暴露类的相关属性，OK，我们用的就是class-dump -H Mach-o文件 输出头文件，我们通过头文件查看mac app源头文件，然后找到需要hook的类进行hook（具体的安装可以点击超链接查看） insert_dylib 这个工具，可以帮助我们插入一个dylib 到Mach-o二进制文件中，所以也就是说我们需要做一个framework然后通过这个库，嵌入到app的Mach-o二进制文件里 ok，工具都全乎了，接下来的时间，就是需要我们做一个framework，这个framework是用专门hook的动态库。 当然hook，Objective-C里就是runtime里的Swizzing Method搞定，这个iOS 开发应该都用过不少（常规技术） 具体实践 new project - framework 我们新建一个framework，用来做动态库 查看class-dump的类，hook 找到的类做功能 cd 到 /Applications/Typora.app/Contents/MacOS/ 使用class-dump -H /Applications/Typora.app/Contents/MacOS/Typora -o /Users/haoyh02/Desktop/typora.h 输出头文件解析到桌面目标目录，如下 ok，接下来我就需要分析头文件，找出自己需要hook的类，以及方法，当然这个过程才是最漫长的，而且是不断的尝试出来的。具体的分析我就不赘述了，就是看代码呗。 最终我们找到了LibraryCommands 类，他大概就是一些文件命令处理，比如新建文件，当然我们hook的是这个类，但是具体文件处理则是Document这个类，集成于NSDocument。 具体看代码 // // TyporaAutoRejectHook.m // TyporaAutoReject // // Created by 郝玉鸿 on 2022/8/26. // #import &amp;lt;Foundation/Foundation.h&amp;gt; #import &amp;lt;AppKit/AppKit.h&amp;gt; #import &quot;TyporaAutoReject.h&quot; #import &amp;lt;objc/runtime.h&amp;gt; void ty_hook(Class originClass, SEL originSelector, Class swizzClass, SEL swizzSelector) { Method originalMethod = class_getInstanceMethod(originClass, originSelector); Method swizzledMethod = class_getInstanceMethod(swizzClass, swizzSelector); if(originalMethod &amp;amp;&amp;amp; swizzledMethod) { method_exchangeImplementations(originalMethod, swizzledMethod); } } @interface Document : NSDocument @end @interface LibraryCommands: NSObject @property(retain) Document *document; @end @implementation NSObject (Typora) + (void)hookThunder{ ty_hook(objc_getClass(&quot;LibraryCommands&quot;), @selector(createFile:), [self class], @selector(hook_newDocument:)); } - (void)hook_newDocument:(id)args { [self hook_newDocument:args]; dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{ LibraryCommands *commans = (LibraryCommands *)self; Document *document = commans.document; NSString *injectString = @&quot;---\ntitle: &amp;lt;xxxx&amp;gt; \ntags: [iOS] [MAC] [Plugin]&amp;gt; \nkey: xxx \n# article_header:\n# type: cover \n# image:\n # src: https://user-images.githubusercontent.com/8369671/80915045-153ff780-8d82-11ea-9acf-6ccbf2b05d9d.png \n---&quot;; [document setValue:injectString forKeyPath:@&quot;content&quot;]; [document writeToURL:document.fileURL ofType:document.fileType error:nil]; [document performSelector:NSSelectorFromString(@&quot;syncToClient&quot;)]; [document performSelector:NSSelectorFromString(@&quot;syncToSelf&quot;)]; }); } @end static void __attribute__((constructor)) initialize(void) { [NSObject hookThunder]; } 很简单，思路就是hook到新建文件的方法，然后2s之后，文件内插入一段预置文字。然后同步界面。 copy framework的产出（编译，products/xxx.framework）到mac app 下的contents/MacOS OK，接下来我们需要build工程，得到products/xxx.framework 产物。xcode13 隐藏了products，我们只需要打开pbxproj文件, 修改mainGroup 和 productRefGroup 一样（本身也是一样的，我们只需要copy再次保存就好了），保存就可以出现，也可以到DerivedData里去找 然后copy framework，到/Applications/Typora.app/Contents/ 下即可。 执行insert_dylib 命令 ./insert_dylib --all-yes /Applications/Typora.app/Contents/MacOS/TyporaAutoReject.framework/TyporaAutoReject Typora_backup Typora 执行这个命令后，即可嵌入framework 重新打开应用 一定要重新打开应用，否则不生效（这个其实不用想也是这样，毕竟我们是编译型程序） ok，当然这个步骤很麻烦，为了我们能更好的重复验证，我写了脚本执行，这些命令 sudo rm -d -r /Applications/Typora.app/Contents/MacOS/TyporaAutoReject.framework sudo mv -f /Users/haoyh02/Library/Developer/Xcode/DerivedData/TyporaAutoReject-duhvxgpyrtuykugkepbmpmhciiyh/Build/Products/Debug/* /Applications/Typora.app/Contents/MacOS/ ./insert_dylib --all-yes /Applications/Typora.app/Contents/MacOS/TyporaAutoReject.framework/TyporaAutoReject Typora_backup Typora ​ ​ 至此，我们为Typora做的小插件，完全生效了。我们来看一下效果： ​ 参考 安装class-dump 如何为macOS应用开发插件 insert_dylib class-dump</summary></entry><entry><title type="html">position、anchorPoint、frame理解</title><link href="http://localhost:4000/2022/05/01/00_position_anchorPoint_frame.html" rel="alternate" type="text/html" title="position、anchorPoint、frame理解" /><published>2022-05-01T00:00:00+08:00</published><updated>2022-05-01T00:00:00+08:00</updated><id>http://localhost:4000/2022/05/01/00_position_anchorPoint_frame</id><content type="html" xml:base="http://localhost:4000/2022/05/01/00_position_anchorPoint_frame.html">&lt;h4 id=&quot;前情提要&quot;&gt;前情提要&lt;/h4&gt;

&lt;p&gt;​	     最近在学2d游戏框架SpriteKit，其中使用大量的AnchorPoint/position 来确定Node的位置，那本身来说对于anchorPoint、position的概念、以及他们之间互相起到什么作用，对于view又会造成什么影响，都是比较模糊的，所以再定位Node布局来说，就是一顿迷糊，正好工作这么多年了，还是对于这些基础的还是模糊，是有点说不过去了，所以我决定认真分析一下Frame、bounds、position、anchorPoint之间的关系，以及他们对显示的影响。&lt;/p&gt;

&lt;h4 id=&quot;进入正文&quot;&gt;进入正文&lt;/h4&gt;

&lt;p&gt;frame： 表示了一个view 在其superView坐标系具体位置，那么他的参照物是其父view&lt;/p&gt;

&lt;p&gt;bounds：表示了一个view的本地坐标系下，参照物是自身，他的修改不会改变frame，但是会改变其的子view的位置，为什么呢？稍后我会画图解释&lt;/p&gt;

&lt;p&gt;position：这是CALayer的属性，我的理解是他的物理中心点，他和anchorPoint有着密切的关系&lt;/p&gt;

&lt;p&gt;anchorPoint：也是CALayer的属性，翻译过来叫做锚点，也就是固定的点，他的坐标系是以unit 坐标系定义，左上角为(0,0)， 右上角(1, 0), 左下角(0,1), 右下角(1,1)&lt;/p&gt;

&lt;p&gt;好！概念都说完了，但是这个概念只能让我们理解一部分，并不能真实的理解到他们的具体作用，下面我们用图的概念去一点点理解&lt;/p&gt;

&lt;h4 id=&quot;深入&quot;&gt;深入&lt;/h4&gt;

&lt;p&gt;frame 没什么可说的，我们以前frame布局，用的再熟练不过了，他就是view在其父view中位置&lt;/p&gt;

&lt;p&gt;如果我们修改了frame，那么就会直接影响到他的位置和大小。&lt;/p&gt;

&lt;p&gt;对于bounds 来说，他是自身的坐标系，如果我们修改了他的origin，那么他的子view就会以这个点为为原点来计算位置，比如：一个红色的view，我们设置了他的bounds.origin为（-20， 20），那么他就会改变自己的本地坐标系的原点为-20，-20，那么当我们设置一个蓝色的子viewframe的origin为（0，0），那么这个子view就会向右下偏移20，因为当前左上角的原点为-20，-20，（0，0）点的位置在右下角偏移20的位置，所以最后看到蓝色view并不是靠着左上角。文字描述有点。。。费劲，还是想办法画图吧。。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/image-20210929181748669.png&quot; alt=&quot;image-20210929181748669&quot; /&gt;&lt;/p&gt;

&lt;p&gt;大概就是这样的一个过程，所以bounds.origin的修改会导致子view的位置改变，那么修改bounds的size呢？ 改变自己bounds的size会使自身的大小发生变化，从而影响frame，不会影响父view&lt;/p&gt;

&lt;p&gt;那么对于position 和anchorPoint，我受一片他人的文章影响，有一个很恰当的比喻：&lt;/p&gt;

&lt;p&gt;一幅画，anchorPoint就相当于在这个画的四个角或者中间沾一块胶（或者你有高档的什么固定的都行。。），而position就相当于这块胶要沾在哪个位置，这么来说的话他应该是和anchor重合的，比如说position为墙壁的某个点，anchorPoint为画的中间（0.5，0.5），那么画就会沾到position的位置，我们view默认的position就是view的中心点相对于父view的点，所以如果我们改变anchor的话就类比刚才图片的问题，是那个角或者中点固定到这个position点而已。&lt;/p&gt;

&lt;p&gt;也画个图吧。。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/image-20210929183736725.png&quot; alt=&quot;image-20210929183736725&quot; /&gt;&lt;/p&gt;

&lt;p&gt;基本上通过上边的介绍，我想你和我都掌握这几个属性的真正含义。&lt;/p&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="iOS" /><summary type="html">前情提要 ​ 最近在学2d游戏框架SpriteKit，其中使用大量的AnchorPoint/position 来确定Node的位置，那本身来说对于anchorPoint、position的概念、以及他们之间互相起到什么作用，对于view又会造成什么影响，都是比较模糊的，所以再定位Node布局来说，就是一顿迷糊，正好工作这么多年了，还是对于这些基础的还是模糊，是有点说不过去了，所以我决定认真分析一下Frame、bounds、position、anchorPoint之间的关系，以及他们对显示的影响。 进入正文 frame： 表示了一个view 在其superView坐标系具体位置，那么他的参照物是其父view bounds：表示了一个view的本地坐标系下，参照物是自身，他的修改不会改变frame，但是会改变其的子view的位置，为什么呢？稍后我会画图解释 position：这是CALayer的属性，我的理解是他的物理中心点，他和anchorPoint有着密切的关系 anchorPoint：也是CALayer的属性，翻译过来叫做锚点，也就是固定的点，他的坐标系是以unit 坐标系定义，左上角为(0,0)， 右上角(1, 0), 左下角(0,1), 右下角(1,1) 好！概念都说完了，但是这个概念只能让我们理解一部分，并不能真实的理解到他们的具体作用，下面我们用图的概念去一点点理解 深入 frame 没什么可说的，我们以前frame布局，用的再熟练不过了，他就是view在其父view中位置 如果我们修改了frame，那么就会直接影响到他的位置和大小。 对于bounds 来说，他是自身的坐标系，如果我们修改了他的origin，那么他的子view就会以这个点为为原点来计算位置，比如：一个红色的view，我们设置了他的bounds.origin为（-20， 20），那么他就会改变自己的本地坐标系的原点为-20，-20，那么当我们设置一个蓝色的子viewframe的origin为（0，0），那么这个子view就会向右下偏移20，因为当前左上角的原点为-20，-20，（0，0）点的位置在右下角偏移20的位置，所以最后看到蓝色view并不是靠着左上角。文字描述有点。。。费劲，还是想办法画图吧。。。 大概就是这样的一个过程，所以bounds.origin的修改会导致子view的位置改变，那么修改bounds的size呢？ 改变自己bounds的size会使自身的大小发生变化，从而影响frame，不会影响父view 那么对于position 和anchorPoint，我受一片他人的文章影响，有一个很恰当的比喻： 一幅画，anchorPoint就相当于在这个画的四个角或者中间沾一块胶（或者你有高档的什么固定的都行。。），而position就相当于这块胶要沾在哪个位置，这么来说的话他应该是和anchor重合的，比如说position为墙壁的某个点，anchorPoint为画的中间（0.5，0.5），那么画就会沾到position的位置，我们view默认的position就是view的中心点相对于父view的点，所以如果我们改变anchor的话就类比刚才图片的问题，是那个角或者中点固定到这个position点而已。 也画个图吧。。。 基本上通过上边的介绍，我想你和我都掌握这几个属性的真正含义。</summary></entry><entry><title type="html">解决原生横滑scrollView和Flutter 纵滑CustomScroll的冲突</title><link href="http://localhost:4000/2020/06/08/01_flutter_and_ios_matter.html" rel="alternate" type="text/html" title="解决原生横滑scrollView和Flutter 纵滑CustomScroll的冲突" /><published>2020-06-08T00:00:00+08:00</published><updated>2020-06-08T00:00:00+08:00</updated><id>http://localhost:4000/2020/06/08/01_flutter_and_ios_matter</id><content type="html" xml:base="http://localhost:4000/2020/06/08/01_flutter_and_ios_matter.html">&lt;h4 id=&quot;前言&quot;&gt;前言&lt;/h4&gt;

&lt;hr /&gt;

&lt;p&gt;最近项目中在横向滑动的PageViewController（WMPageController）里嵌入了Flutter 的 CustomScrollView，原本会觉得一切ok，却出现了一个致命的问题：安卓嵌入之后滑动流程稳定，没有任何问题，iOS 嵌入之后出现Flutter 页面滑动卡顿、不流畅，体现在触发flutter 列表滑动的同时，会触发原生横滑，且必须垂直滑动（无一点左右的滑动偏移）才会稳定触发Flutter 列表的滑动，否则容易触发左右横滑，所以我们习惯了单手用手机的人，根本无法顺畅滑动。如下面的gif（其实我已经很努力的在上下滑了，很明显上下滑动的距离大于水平滑动的距离，用户的用意也应该是要上下滑动，但是却触发了横滑）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1789706-053b62962bcf93b3.png?imageMogr2/auto-orient/strip&quot; alt=&quot;1&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;解决方式&quot;&gt;解决方式&lt;/h4&gt;

&lt;hr /&gt;

&lt;p&gt;首先触摸flutter的页面，原生的UIScrollView的panGesture也会收到触摸事件，导致UIScrollView的手势生效，开始我想着如果能再UIScrollView的手势代理方法中区分出Flutter CustomScrollView的手势，然后再做调整。但是这条路是错误的，因为Flutter的滑动手势并不是采用系统提供的手势，在断点时发现，触发之后，并没有相关flutter 上的 系统手势类。所以我改变了思路用以下去解决这个问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如果当前触摸在FlutterView上，我们的子类UIScrollView 手势就不接收touch事件，控制其手势不会生效；&lt;/li&gt;
  &lt;li&gt;继承FLBFlutterViewContainer父类，重写touches相关方法，手动调整UIScrollView 的contentOffset（注意: 我们混合栈使用的是闲鱼的FlutterBoost， FLBFlutterViewContainer继承自FlutterViewController）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上代码：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;自定义继承自UIScrollView的子类，并且实现手势代理方法，控制Touch的传递。如果touch的View是FlutterView 我们的ScrollView就不接收这个touch事件。&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;@interface WMScrollView()
   
@end
   
@implementation WMScrollView
   
#pragma mark - &amp;lt;UIGestureRecognizerDelegate&amp;gt;
   
- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch {
    if ([NSStringFromClass(touch.view.class) isEqualToString:@&quot;FlutterView&quot;]) {
        return NO;
    }
    return YES;
}
   
@end
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;自定义一个继承自FLBFlutterViewContainer的子类，重写Touches方法，在touchBegan方法的时候，我们让自定的ScrollView手势不生效；在touchMoved的时候，我们干预计算触摸方向的识别，如果&lt;del&gt;在纵滑&amp;lt;5 &amp;amp;&amp;amp; 横滑大于2的时候我们默认用户想要横滑&lt;/del&gt; 横滑距离大于纵滑的距离我们认为用户想要横滑(判断横滑距离大于纵滑距离如下代码)，故手动改变ScrollView的contentOffset，否则的话手势继续不生效， flutterView 生效；在touchEnd和touchCancel的情况下，我们判断当前的contentOffset，如果距离大于当前页距离的1/3, 跳转到下一页，如果距离小于上一页距离的2/3, 跳转到前一页；负责调整offset回到当前页面的起始位置。&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;@implementation DDScrollFlutterViewContainer
    
- (void)viewDidLoad {
    [super viewDidLoad];
 }
    
#pragma mark - UITouches
- (void)touchesBegan:(NSSet&amp;lt;UITouch *&amp;gt; *)touches withEvent:(UIEvent *)event {
    [super touchesBegan:touches withEvent:event];
    [self touchesBegan:touches];
}
    
- (void)touchesMoved:(NSSet&amp;lt;UITouch *&amp;gt; *)touches withEvent:(UIEvent *)event {
    [self touchMoveWithTouch:touches event:event];
}
    
- (void)touchesEnded:(NSSet&amp;lt;UITouch *&amp;gt; *)touches withEvent:(UIEvent *)event {
    [self touchEnd:touches event:event isCanceled:NO];
}
    
- (void)touchesCancelled:(NSSet&amp;lt;UITouch *&amp;gt; *)touches withEvent:(UIEvent *)event {
    [self touchEnd:touches event:event isCanceled:YES];
}
    
- (void)touchesBegan:(NSSet *)touches {
    UIScrollView *superView = (UIScrollView *)self.view.superview.superview;
    superView.panGestureRecognizer.enabled = NO;
    self.hasOffset = NO;
    self.lastLocation = [touches.anyObject locationInView:self.view];
}
    
- (void)touchMoveWithTouch:(NSSet *)touches event:(UIEvent *)event{
    UITouch *touch = [touches anyObject];
    CGPoint previoursLocation = self.lastLocation;
    CGPoint location = [touch locationInView:self.view];
    CGFloat deltax = fabs(location.x - previoursLocation.x);
    CGFloat deltay = fabs(location.y - previoursLocation.y);
    UIScrollView *superView = (UIScrollView *)self.view.superview.superview;
    if (deltax &amp;gt; deltay) {
        CGPoint offset = superView.contentOffset;
        [superView.delegate scrollViewWillBeginDragging:superView];
        CGPoint previours = [touch previousLocationInView:self.view];
        [superView setContentOffset:CGPointMake(offset.x - (location.x - previours.x), offset.y)];
        self.hasOffset = YES;
    } else {
        if (!self.hasOffset) {
            [super touchesMoved:touches withEvent:event];
        }
    }
}
    
- (void)touchEnd:(NSSet *)touches event:(UIEvent *)event isCanceled:(BOOL)isCanceled {
    UIScrollView *superView = (UIScrollView *)self.view.superview.superview;
    if (self.hasOffset) {
        CGPoint offset = superView.contentOffset;
        CGFloat offsetX = offset.x;
        if (offsetX &amp;gt; (1 * self.view.width+ self.view.width * 1 / 3)) {
            [superView setContentOffset:CGPointMake(2*self.view.width, offset.y) animated:YES];
        } else if (offsetX &amp;lt;=  self.view.width * 2 / 3) {
            [superView setContentOffset:CGPointMake(0, offset.y) animated:YES];
        } else {
            [superView setContentOffset:CGPointMake(self.view.width, offset.y) animated:YES];
        }
        [superView.delegate scrollViewDidEndDecelerating:superView];
        [self.nextResponder touchesEnded:touches withEvent:event];
    }
isCanceled ? [super touchesCancelled:touches withEvent:event] : [super touchesEnded:touches withEvent:event];
    superView.panGestureRecognizer.enabled = YES;
}
    
    
@end
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;处理之后的效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1789706-ad3c670a61f4c292.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;2&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;总结&quot;&gt;总结&lt;/h4&gt;

&lt;hr /&gt;

&lt;p&gt;这个问题也是困扰了许久，因为在安卓上表现良好，而在iphone上表现极其的不舒适，所以最初考虑到这也是Flutter团队对于CustomScrollView 原生渲染适配的问题，但是既然他们适配不好，我们就需要手动的去适配。但是从解决办法的探索中，我们发现Flutter的手势并不是通过iOS原生的手势实现的，而是自己的一套手势识别。而且FlutterViewController 的touches事件是被重写了，因为假如你重写了touches的方法，没有调用父类方法，那么会发现flutter 不能滑动，所以判断flutter的滑动事件Touches方法也是参与其中，所以记得调用父类方法。而我们重写了Touches的事件也是区分了一下用户意图要滑动的方向，相当于做了个手势的方向的识别。&lt;/p&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="Flutter" /><category term="iOS" /><summary type="html">前言 最近项目中在横向滑动的PageViewController（WMPageController）里嵌入了Flutter 的 CustomScrollView，原本会觉得一切ok，却出现了一个致命的问题：安卓嵌入之后滑动流程稳定，没有任何问题，iOS 嵌入之后出现Flutter 页面滑动卡顿、不流畅，体现在触发flutter 列表滑动的同时，会触发原生横滑，且必须垂直滑动（无一点左右的滑动偏移）才会稳定触发Flutter 列表的滑动，否则容易触发左右横滑，所以我们习惯了单手用手机的人，根本无法顺畅滑动。如下面的gif（其实我已经很努力的在上下滑了，很明显上下滑动的距离大于水平滑动的距离，用户的用意也应该是要上下滑动，但是却触发了横滑）： 解决方式 首先触摸flutter的页面，原生的UIScrollView的panGesture也会收到触摸事件，导致UIScrollView的手势生效，开始我想着如果能再UIScrollView的手势代理方法中区分出Flutter CustomScrollView的手势，然后再做调整。但是这条路是错误的，因为Flutter的滑动手势并不是采用系统提供的手势，在断点时发现，触发之后，并没有相关flutter 上的 系统手势类。所以我改变了思路用以下去解决这个问题： 如果当前触摸在FlutterView上，我们的子类UIScrollView 手势就不接收touch事件，控制其手势不会生效； 继承FLBFlutterViewContainer父类，重写touches相关方法，手动调整UIScrollView 的contentOffset（注意: 我们混合栈使用的是闲鱼的FlutterBoost， FLBFlutterViewContainer继承自FlutterViewController） 上代码： 自定义继承自UIScrollView的子类，并且实现手势代理方法，控制Touch的传递。如果touch的View是FlutterView 我们的ScrollView就不接收这个touch事件。 @interface WMScrollView() @end @implementation WMScrollView #pragma mark - &amp;lt;UIGestureRecognizerDelegate&amp;gt; - (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch { if ([NSStringFromClass(touch.view.class) isEqualToString:@&quot;FlutterView&quot;]) { return NO; } return YES; } @end 自定义一个继承自FLBFlutterViewContainer的子类，重写Touches方法，在touchBegan方法的时候，我们让自定的ScrollView手势不生效；在touchMoved的时候，我们干预计算触摸方向的识别，如果在纵滑&amp;lt;5 &amp;amp;&amp;amp; 横滑大于2的时候我们默认用户想要横滑 横滑距离大于纵滑的距离我们认为用户想要横滑(判断横滑距离大于纵滑距离如下代码)，故手动改变ScrollView的contentOffset，否则的话手势继续不生效， flutterView 生效；在touchEnd和touchCancel的情况下，我们判断当前的contentOffset，如果距离大于当前页距离的1/3, 跳转到下一页，如果距离小于上一页距离的2/3, 跳转到前一页；负责调整offset回到当前页面的起始位置。 @implementation DDScrollFlutterViewContainer - (void)viewDidLoad { [super viewDidLoad]; } #pragma mark - UITouches - (void)touchesBegan:(NSSet&amp;lt;UITouch *&amp;gt; *)touches withEvent:(UIEvent *)event { [super touchesBegan:touches withEvent:event]; [self touchesBegan:touches]; } - (void)touchesMoved:(NSSet&amp;lt;UITouch *&amp;gt; *)touches withEvent:(UIEvent *)event { [self touchMoveWithTouch:touches event:event]; } - (void)touchesEnded:(NSSet&amp;lt;UITouch *&amp;gt; *)touches withEvent:(UIEvent *)event { [self touchEnd:touches event:event isCanceled:NO]; } - (void)touchesCancelled:(NSSet&amp;lt;UITouch *&amp;gt; *)touches withEvent:(UIEvent *)event { [self touchEnd:touches event:event isCanceled:YES]; } - (void)touchesBegan:(NSSet *)touches { UIScrollView *superView = (UIScrollView *)self.view.superview.superview; superView.panGestureRecognizer.enabled = NO; self.hasOffset = NO; self.lastLocation = [touches.anyObject locationInView:self.view]; } - (void)touchMoveWithTouch:(NSSet *)touches event:(UIEvent *)event{ UITouch *touch = [touches anyObject]; CGPoint previoursLocation = self.lastLocation; CGPoint location = [touch locationInView:self.view]; CGFloat deltax = fabs(location.x - previoursLocation.x); CGFloat deltay = fabs(location.y - previoursLocation.y); UIScrollView *superView = (UIScrollView *)self.view.superview.superview; if (deltax &amp;gt; deltay) { CGPoint offset = superView.contentOffset; [superView.delegate scrollViewWillBeginDragging:superView]; CGPoint previours = [touch previousLocationInView:self.view]; [superView setContentOffset:CGPointMake(offset.x - (location.x - previours.x), offset.y)]; self.hasOffset = YES; } else { if (!self.hasOffset) { [super touchesMoved:touches withEvent:event]; } } } - (void)touchEnd:(NSSet *)touches event:(UIEvent *)event isCanceled:(BOOL)isCanceled { UIScrollView *superView = (UIScrollView *)self.view.superview.superview; if (self.hasOffset) { CGPoint offset = superView.contentOffset; CGFloat offsetX = offset.x; if (offsetX &amp;gt; (1 * self.view.width+ self.view.width * 1 / 3)) { [superView setContentOffset:CGPointMake(2*self.view.width, offset.y) animated:YES]; } else if (offsetX &amp;lt;= self.view.width * 2 / 3) { [superView setContentOffset:CGPointMake(0, offset.y) animated:YES]; } else { [superView setContentOffset:CGPointMake(self.view.width, offset.y) animated:YES]; } [superView.delegate scrollViewDidEndDecelerating:superView]; [self.nextResponder touchesEnded:touches withEvent:event]; } isCanceled ? [super touchesCancelled:touches withEvent:event] : [super touchesEnded:touches withEvent:event]; superView.panGestureRecognizer.enabled = YES; } @end 处理之后的效果： 总结 这个问题也是困扰了许久，因为在安卓上表现良好，而在iphone上表现极其的不舒适，所以最初考虑到这也是Flutter团队对于CustomScrollView 原生渲染适配的问题，但是既然他们适配不好，我们就需要手动的去适配。但是从解决办法的探索中，我们发现Flutter的手势并不是通过iOS原生的手势实现的，而是自己的一套手势识别。而且FlutterViewController 的touches事件是被重写了，因为假如你重写了touches的方法，没有调用父类方法，那么会发现flutter 不能滑动，所以判断flutter的滑动事件Touches方法也是参与其中，所以记得调用父类方法。而我们重写了Touches的事件也是区分了一下用户意图要滑动的方向，相当于做了个手势的方向的识别。</summary></entry><entry><title type="html">热重载原理研究和探索</title><link href="http://localhost:4000/2020/06/07/00_flutter-hot-reload.html" rel="alternate" type="text/html" title="热重载原理研究和探索" /><published>2020-06-07T00:00:00+08:00</published><updated>2020-06-07T00:00:00+08:00</updated><id>http://localhost:4000/2020/06/07/00_flutter-hot-reload</id><content type="html" xml:base="http://localhost:4000/2020/06/07/00_flutter-hot-reload.html">&lt;h2 id=&quot;热重载原理研究和探索&quot;&gt;热重载原理研究和探索&lt;/h2&gt;

&lt;h4 id=&quot;1-前言&quot;&gt;1. 前言&lt;/h4&gt;

&lt;hr /&gt;

&lt;p&gt;Flutter 亚秒级别的热重载是开发者的神兵利器，它能够提供我们快速修改UI、增加功能、修复bug，不需要重新启动应用，就可以看到改动效果。那么Flutter是如何做到这样的功能的呢？下面我们一起探究一下其中的原理。&lt;/p&gt;

&lt;h4 id=&quot;2-首先需要知道jit-和aot&quot;&gt;2. 首先需要知道JIT 和AOT&lt;/h4&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;jit&quot;&gt;JIT&lt;/h5&gt;

&lt;p&gt;JIT（Just In Time），指的是运行时编译，Flutter 在debug模式下采用这种方式，在运行时动态下发和执行代码，启动速度快，但是由于在运行时编译，性能会受影响。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/80/v2-5ac75ecfd558061556120bad41866ddd_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;aot&quot;&gt;AOT&lt;/h5&gt;

&lt;p&gt;AOT（Ahead Of Time），指的是在运行之前进行编译，Flutter 在Release模式下采用，可以为特定的平台生成稳定的二进制代码、执行性能好、运行速度快，但是每次都需要重新运行编译，开发效率低。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/80/v2-494be33d7893b43cc45146974b49f0c7_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以，Flutter提供的两种编译模式中，AOT 是静态编译，编译成设备直接可执行的二进制代码；而JIT 则是先生成中间代码（Script snapshot），然后通过dart Vm 解释执行。&lt;/p&gt;

&lt;h4 id=&quot;3-hot-reload-原理&quot;&gt;3. Hot Reload 原理&lt;/h4&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;扫描修改的文件；&lt;/li&gt;
  &lt;li&gt;生成kernal file（app.dill.incremental.dill）；&lt;/li&gt;
  &lt;li&gt;将文件通过Http协议下发到dartVM；&lt;/li&gt;
  &lt;li&gt;VM服务通过RPC 调用_reloadSources，进行资源重载；&lt;/li&gt;
  &lt;li&gt;VM 资源加载成功，将FlutterDevice UI线程重置（uiIsolate），通过RPC调用，触发Flutter树的重建、重绘。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如下图形象说明：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.yuque.com/api/filetransfer/images?url=http%3A%2F%2Fgw.alicdn.com%2Fmt%2FTB1Qe3hisfpK1RjSZFOXXa6nFXa-895-477.png&amp;amp;sign=e8bfac5a86b2ca4bce992c9cdd10c865d27516def919ce6fb7afee3f7cb41bd4&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4-源码分析&quot;&gt;4. 源码分析&lt;/h4&gt;

&lt;hr /&gt;

&lt;p&gt;​	通过命令行输入r或者触发闪电按钮，其实会触发flutter_tools的run_hot文件的HotRunner的restart() 方法（位于flutter/pakages/flutter_tools/）；&lt;/p&gt;

&lt;p&gt;​	flutter_tools 调试步骤：&lt;/p&gt;

&lt;p&gt;​	1）用AS打开Flutter_tools，打开 Run/Debug Configurations;	&lt;img src=&quot;/Users/ddreader/Library/Application Support/typora-user-images/image-20200706151828238.png&quot; alt=&quot;image-20200706151828238&quot; /&gt;&lt;/p&gt;

&lt;p&gt;​	2) 添加Dart Command Line App， Name 设置为Flutter Tools Debugger， Dart file 设置为flutter_tools的文件目录，Working directory 设置为一个测试项目路径&lt;/p&gt;

&lt;p&gt;​	3) 运行Debug，运行完成后，断点打在HotRunner 的restart（）方法处。&lt;/p&gt;

&lt;p&gt;​	4）随便修改测试项目的Widget，在flutter_tools 工程的Console输入r回车；发现断点断在了restart方法。下面我们从restart（）方法开始逐步分析，热重载的原理。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;restart（）方法&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OperationResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullRestart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pauseAfterRestart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reason&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;benchmarkMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetPlatform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sdkName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 判断当前的设备，并且获取当前设备的targetPlatform、sdkName、emulator&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flutterDevices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Device&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flutterDevices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;targetPlatform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getNameForTargetPlatform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;targetPlatform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sdkName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sdkNameAndVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;emulator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isLocalEmulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flutterDevices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;targetPlatform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'multiple'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sdkName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'multiple'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;emulator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;targetPlatform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'unknown'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sdkName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'unknown'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;emulator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stopwatch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stopwatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()..&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fullRestart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;完全重新启动、非热重载部分省略&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OperationResult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_hotReloadHelper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;targetPlatform:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetPlatform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;sdkName:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sdkName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;emulator:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;reason:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reason&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;pauseAfterRestart:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pauseAfterRestart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elapsed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getElapsedAsMilliseconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;elapsed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${result.message}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; in &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$elapsed&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​	调用到restart方法之后，会获取当前设备的一些信息，然后根据是否是fullRestart执行不同流程，我们研究的是Hot reload不是fullRestart所以我们走的是下边的流程，执行_hotReloadHelper（）；&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;_hotReloadHelper&lt;/p&gt;

    &lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OperationResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_hotReloadHelper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetPlatform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sdkName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reason&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pauseAfterRestart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reloadOnTopOfSnapshot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_runningFromSnapshot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;progressPrefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reloadOnTopOfSnapshot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Initializing'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Performing'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startProgress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$progressPrefix&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; hot reload...'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;timeout:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeoutConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fastOperation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;progressId:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'hot.reload'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;OperationResult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_reloadSources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;targetPlatform:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetPlatform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;sdkName:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sdkName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;emulator:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;pause:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pauseAfterRestart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;reason:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reason&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;onSlow:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startProgress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;timeout:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeoutConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;slowOperation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;progressId:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'hot.reload'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rpc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RpcException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;HotEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'exception'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;targetPlatform:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetPlatform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;sdkName:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sdkName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;emulator:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;fullRestart:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;reason:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reason&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OperationResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'hot reload failed to complete'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;fatal:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;这个方法呢，其实也是对于核心逻辑方法_reloadSources（）方法的封装。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;_reloadSources()&lt;/p&gt;

    &lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OperationResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_reloadSources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetPlatform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sdkName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pause&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reason&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onSlow&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// 遍历所有Device的FlutterView, 并且uiIsolate 不存在的话，执行失败&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FlutterDevice&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flutterDevices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FlutterView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uiIsolate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OperationResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Application isolate not found'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;fatal:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shouldReportReloadTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_runningFromSnapshot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// 开启计时器&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stopwatch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reloadTimer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stopwatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()..&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// 判断FlutterView的uiIsolate是否为null或者处于暂停状态，如果是刷新所有view&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_isPaused&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Refreshing active FlutterViews before reloading.'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 触发所有设备的vmService RPC 发送_flutter.listViews消息&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refreshViews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stopwatch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;devFSTimer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stopwatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()..&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
   	&lt;span class=&quot;c1&quot;&gt;// 同步修改的文件&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UpdateFSReport&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updatedDevFS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_updateDevFS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Record time it took to synchronize to DevFS.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_addBenchmarkData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hotReloadDevFSSyncMilliseconds'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;devFSTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;elapsed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inMilliseconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;updatedDevFS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OperationResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'DevFS synchronization failed'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reloadMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stopwatch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vmReloadTimer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stopwatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()..&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstReloadDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entryPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;getReloadPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;fullRestart:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;from:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;projectRootPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeviceReloadReport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allReportsFutures&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeviceReloadReport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;[];&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FlutterDevice&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flutterDevices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_runningFromSnapshot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// Asset directory has to be set only once when we switch from&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// running from snapshot to running from uploaded files.&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resetAssetDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Completer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeviceReloadReport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Completer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeviceReloadReport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;allReportsFutures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 触发RPC 调用_reloadSources 重新加载资源&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reportFutures&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reloadSources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;entryPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;pause:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 处理RPC 调用_reloadSources 返回结果&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;unawaited&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reportFutures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// TODO(aam): Investigate why we are validating only first reload report,&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// which seems to be current behavior&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstReport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Don't print errors because they will be printed further down when&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// `validateReloadReport` is called again.&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;updateReloadStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;validateReloadReport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstReport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;printErrors:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;completer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeviceReloadReport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeviceReloadReport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allReportsFutures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeviceReloadReport&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;report&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reloadReport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validateReloadReport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reloadReport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// Reload failed.&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;HotEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'reload-reject'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;targetPlatform:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetPlatform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;sdkName:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sdkName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;emulator:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;fullRestart:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;reason:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reason&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OperationResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Reload rejected'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Collect stats only from the first device. If/when run -d all is&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// refactored, we'll probably need to send one hot reload/restart event&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// per device to analytics.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;firstReloadDetails&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reloadReport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'details'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadedLibraryCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reloadReport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'details'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'loadedLibraryCount'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finalLibraryCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reloadReport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'details'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'finalLibraryCount'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'reloaded &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$loadedLibraryCount&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; of &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$finalLibraryCount&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; libraries'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;reloadMessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Reloaded &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$loadedLibraryCount&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; of &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$finalLibraryCount&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; libraries'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Hot reload failed: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$error&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$stackTrace&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'code'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorMessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'message'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Isolate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;kIsolateReloadBarred&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;errorMessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Unable to hot reload application due to an unrecoverable error in '&lt;/span&gt;
                       &lt;span class=&quot;s&quot;&gt;'the source code. Please address the error and then use &quot;R&quot; to '&lt;/span&gt;
                       &lt;span class=&quot;s&quot;&gt;'restart the app.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;
                       &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$errorMessage&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; (error code: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$errorCode&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;HotEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'reload-barred'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nl&quot;&gt;targetPlatform:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetPlatform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nl&quot;&gt;sdkName:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sdkName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nl&quot;&gt;emulator:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nl&quot;&gt;fullRestart:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nl&quot;&gt;reason:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reason&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OperationResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OperationResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$errorMessage&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; (error code: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$errorCode&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Hot reload failed: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$error&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$stackTrace&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OperationResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$error&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Record time it took for the VM to reload the sources.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_addBenchmarkData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hotReloadVMReloadMilliseconds'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vmReloadTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;elapsed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inMilliseconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stopwatch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reassembleTimer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stopwatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()..&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Reload the isolate.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allDevices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;[];&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// 触发所有的FlutterView 的uiIsolate 刷新&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FlutterDevice&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flutterDevices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Sending reload events to &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${device.device.name}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;futuresViews&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;[];&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FlutterView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Sending reload event to &quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${view.uiIsolate.name}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;futuresViews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uiIsolate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Completer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deviceCompleter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Completer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;unawaited&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;futuresViews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;whenComplete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;deviceCompleter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;refreshViews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}));&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;allDevices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deviceCompleter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allDevices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// We are now running from source.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_runningFromSnapshot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Check if any isolates are paused.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FlutterView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reassembleViews&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FlutterView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;[];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceEventKind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pausedIsolatesFound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   	&lt;span class=&quot;c1&quot;&gt;// 添加 ressembleViews&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FlutterDevice&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flutterDevices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FlutterView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Check if the isolate is paused, and if so, don't reassemble. Ignore the&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// PostPauseEvent event - the client requesting the pause will resume the app.&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pauseEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uiIsolate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pauseEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pauseEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pauseEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isPauseEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pauseEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;kPausePostRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;pausedIsolatesFound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serviceEventKind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;serviceEventKind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pauseEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serviceEventKind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pauseEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;serviceEventKind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// many kinds&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;reassembleViews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pausedIsolatesFound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onSlow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;onSlow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${_describePausedIsolates(pausedIsolatesFound, serviceEventKind)}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;; interface might not update.'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reassembleViews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Skipping reassemble because all isolates are paused.'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OperationResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OperationResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reloadMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;//删除dirty 资源&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Evicting dirty assets'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_evictDirtyAssets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reassembleViews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNotEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Reassembling application'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failedReassemble&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;futures&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;[];&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// rpc触发所有的FlutterView uiIsolate ressemble&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FlutterView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reassembleViews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uiIsolate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flutterReassemble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;failedReassemble&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;printError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Reassembling &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${view.uiIsolate.name}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; failed: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$error&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reassembleFuture&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reassembleFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;seconds:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;onTimeout:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pausedIsolatesFound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;shouldReportReloadTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// probably no point waiting, they're probably deadlocked and we've already warned.&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Check if any isolate is newly paused.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'This is taking a long time; will now check for paused isolates.'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postReloadPausedIsolatesFound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceEventKind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FlutterView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reassembleViews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uiIsolate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pauseEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uiIsolate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pauseEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pauseEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pauseEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isPauseEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;postReloadPausedIsolatesFound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serviceEventKind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;serviceEventKind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pauseEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serviceEventKind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pauseEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;serviceEventKind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// many kinds&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Found &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$postReloadPausedIsolatesFound&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; newly paused isolate(s).'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postReloadPausedIsolatesFound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reassembleFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// must just be taking a long time... keep waiting!&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;shouldReportReloadTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onSlow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;onSlow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${_describePausedIsolates(postReloadPausedIsolatesFound, serviceEventKind)}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Record time it took for Flutter to reassemble the application.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_addBenchmarkData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hotReloadFlutterReassembleMilliseconds'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reassembleTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;elapsed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inMilliseconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;reloadTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reloadDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reloadTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;elapsed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reloadInMs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reloadDuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inMilliseconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Collect stats that help understand scale of update for this hot reload request.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// For example, [syncedLibraryCount]/[finalLibraryCount] indicates how&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// many libraries were affected by the hot reload request.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Relation of [invalidatedSourcesCount] to [syncedLibraryCount] should help&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// understand sync/transfer &quot;overhead&quot; of updating this number of source files.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HotEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'reload'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;targetPlatform:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetPlatform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;sdkName:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sdkName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;emulator:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;fullRestart:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;reason:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reason&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;overallTimeInMs:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reloadInMs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;finalLibraryCount:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstReloadDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'finalLibraryCount'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;syncedLibraryCount:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstReloadDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'receivedLibraryCount'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;syncedClassesCount:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstReloadDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'receivedClassesCount'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;syncedProceduresCount:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstReloadDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'receivedProceduresCount'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;syncedBytes:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updatedDevFS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;syncedBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;invalidatedSourcesCount:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updatedDevFS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invalidatedSourcesCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;transferTimeInMs:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;devFSTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;elapsed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inMilliseconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shouldReportReloadTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Hot reload performed in &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${getElapsedAsMilliseconds(reloadDuration)}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Record complete time it took for the reload.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;_addBenchmarkData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hotReloadMillisecondsToFrame'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reloadInMs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Only report timings if we reloaded a single view without any errors.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reassembleViews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;failedReassemble&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shouldReportReloadTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;flutterUsage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendTiming&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hot'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'reload'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reloadDuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OperationResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;failedReassemble&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OperationResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;reloadMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;​	这个方法主要干了 5件事情&lt;/p&gt;

&lt;p&gt;​	1. 扫描修改的文件，生成dill文件，并且通过Http服务下发到设备资源文件；&lt;/p&gt;

 	2. RPC 调用_reloadSources 触发VM重新加载修改后的文件
 	3. RPC 调用 flutter View的uiIsolate refreshView
 	4. 删除dirty文件
 	5. rpc触发所有的FlutterView uiIsolate ressemble

&lt;h4 id=&quot;5-不会发生hot-reload的场景&quot;&gt;5. 不会发生Hot Reload的场景&lt;/h4&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;应用被杀死&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编译错误&lt;/p&gt;

    &lt;p&gt;当代码更改导致编译错误时，热重载会生成类似于以下内容的错误消息：&lt;/p&gt;

    &lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Hot&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reload&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;was&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;rejected:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'/Users/obiwan/Library/Developer/CoreSimulator/Devices/AC94F0FF-16F7-46C8-B4BF-218B73C547AC/data/Containers/Data/Application/4F72B076-42AD-44A4-A7CF-57D9F93E895E/tmp/ios_testWIDYdS/ios_test/lib/main.dart'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;warning:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;38&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unbalanced&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'{'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opens&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;here&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BuildContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                                     &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'/Users/obiwan/Library/Developer/CoreSimulator/Devices/AC94F0FF-16F7-46C8-B4BF-218B73C547AC/data/Containers/Data/Application/4F72B076-42AD-44A4-A7CF-57D9F93E895E/tmp/ios_testWIDYdS/ios_test/lib/main.dart'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;error:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unbalanced&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;')'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;在这种情况下，只需更正上述代码的错误，即可以继续使用热重载&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;CupertinoTabView’s builder&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;在修改了CupertinoTableView 的builder内容时，Hot reload 不会生效&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;枚举类型改变成class 类型&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;当一个枚举类型，改成一个类时，Hot reload 不会生效&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;字体修改&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;泛型修改&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;修改前&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class A&amp;lt;T&amp;gt; {
  T i;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;修改后&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class A&amp;lt;T, V&amp;gt; {
  T i;
  V v;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;Native code&lt;/p&gt;

        &lt;p&gt;更改原生代码， hot reload 不会生效&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;statelessWidget 和 statefulWidget 的互改&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;静态变量和全局变量的改变&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://flutter.cn/docs/development/tools/hot-reload&quot;&gt; Flutter Hot Reload doc &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU4MDUxOTI5NA==&amp;amp;mid=2247483816&amp;amp;idx=1&amp;amp;sn=deedc011bc902511d0712de959bb8b06&amp;amp;scene=19#wechat_redirect&quot;&gt;深入理解flutter的编译原理与优化&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.yuque.com/xytech/flutter/uhw8vw#tx8udt&quot;&gt;揭秘Flutter Hot Reload（原理篇)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://xiaozhuanlan.com/topic/0845671932&quot;&gt;底层原理 - Flutter Hot Reload 详解&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tech.meituan.com/2018/08/09/waimai-flutter-practice.html&quot;&gt;美团-Flutter原理与实践&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gityuan.com/2019/06/23/dart-vm/&quot;&gt;头条开发攻城狮-深入理解Dart虚拟机启动&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://annatarhe.github.io/2019/01/31/introduction-to-dart-vm.html&quot;&gt;Dart VM 简介&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ketao1989.github.io/2016/12/10/rpc-theory-in-action/&quot;&gt;深入浅出RPC原理&lt;/a&gt;&lt;/p&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="Flutter" /><summary type="html">热重载原理研究和探索 1. 前言 Flutter 亚秒级别的热重载是开发者的神兵利器，它能够提供我们快速修改UI、增加功能、修复bug，不需要重新启动应用，就可以看到改动效果。那么Flutter是如何做到这样的功能的呢？下面我们一起探究一下其中的原理。 2. 首先需要知道JIT 和AOT JIT JIT（Just In Time），指的是运行时编译，Flutter 在debug模式下采用这种方式，在运行时动态下发和执行代码，启动速度快，但是由于在运行时编译，性能会受影响。 AOT AOT（Ahead Of Time），指的是在运行之前进行编译，Flutter 在Release模式下采用，可以为特定的平台生成稳定的二进制代码、执行性能好、运行速度快，但是每次都需要重新运行编译，开发效率低。 所以，Flutter提供的两种编译模式中，AOT 是静态编译，编译成设备直接可执行的二进制代码；而JIT 则是先生成中间代码（Script snapshot），然后通过dart Vm 解释执行。 3. Hot Reload 原理 扫描修改的文件； 生成kernal file（app.dill.incremental.dill）； 将文件通过Http协议下发到dartVM； VM服务通过RPC 调用_reloadSources，进行资源重载； VM 资源加载成功，将FlutterDevice UI线程重置（uiIsolate），通过RPC调用，触发Flutter树的重建、重绘。 如下图形象说明： 4. 源码分析 ​ 通过命令行输入r或者触发闪电按钮，其实会触发flutter_tools的run_hot文件的HotRunner的restart() 方法（位于flutter/pakages/flutter_tools/）； ​ flutter_tools 调试步骤： ​ 1）用AS打开Flutter_tools，打开 Run/Debug Configurations; ​ 2) 添加Dart Command Line App， Name 设置为Flutter Tools Debugger， Dart file 设置为flutter_tools的文件目录，Working directory 设置为一个测试项目路径 ​ 3) 运行Debug，运行完成后，断点打在HotRunner 的restart（）方法处。 ​ 4）随便修改测试项目的Widget，在flutter_tools 工程的Console输入r回车；发现断点断在了restart方法。下面我们从restart（）方法开始逐步分析，热重载的原理。 restart（）方法 @override Future&amp;lt;OperationResult&amp;gt; restart({ bool fullRestart = false, bool pauseAfterRestart = false, String reason, bool benchmarkMode = false }) async { String targetPlatform; String sdkName; bool emulator; // 判断当前的设备，并且获取当前设备的targetPlatform、sdkName、emulator if (flutterDevices.length == 1) { final Device device = flutterDevices.first.device; targetPlatform = getNameForTargetPlatform(await device.targetPlatform); sdkName = await device.sdkNameAndVersion; emulator = await device.isLocalEmulator; } else if (flutterDevices.length &amp;gt; 1) { targetPlatform = 'multiple'; sdkName = 'multiple'; emulator = false; } else { targetPlatform = 'unknown'; sdkName = 'unknown'; emulator = false; } final Stopwatch timer = Stopwatch()..start(); if (fullRestart) { ... 完全重新启动、非热重载部分省略 return; } final OperationResult result = await _hotReloadHelper( targetPlatform: targetPlatform, sdkName: sdkName, emulator: emulator, reason: reason, pauseAfterRestart: pauseAfterRestart, ); if (result.isOk) { final String elapsed = getElapsedAsMilliseconds(timer.elapsed); printStatus('${result.message} in $elapsed.'); } return result; } ​ 调用到restart方法之后，会获取当前设备的一些信息，然后根据是否是fullRestart执行不同流程，我们研究的是Hot reload不是fullRestart所以我们走的是下边的流程，执行_hotReloadHelper（）； _hotReloadHelper Future&amp;lt;OperationResult&amp;gt; _hotReloadHelper({ String targetPlatform, String sdkName, bool emulator, String reason, bool pauseAfterRestart = false, }) async { final bool reloadOnTopOfSnapshot = _runningFromSnapshot; final String progressPrefix = reloadOnTopOfSnapshot ? 'Initializing' : 'Performing'; Status status = logger.startProgress( '$progressPrefix hot reload...', timeout: timeoutConfiguration.fastOperation, progressId: 'hot.reload', ); OperationResult result; try { result = await _reloadSources( targetPlatform: targetPlatform, sdkName: sdkName, emulator: emulator, pause: pauseAfterRestart, reason: reason, onSlow: (String message) { status?.cancel(); status = logger.startProgress( message, timeout: timeoutConfiguration.slowOperation, progressId: 'hot.reload', ); }, ); } on rpc.RpcException { HotEvent('exception', targetPlatform: targetPlatform, sdkName: sdkName, emulator: emulator, fullRestart: false, reason: reason).send(); return OperationResult(1, 'hot reload failed to complete', fatal: true); } finally { status.cancel(); } return result; } 这个方法呢，其实也是对于核心逻辑方法_reloadSources（）方法的封装。 _reloadSources() Future&amp;lt;OperationResult&amp;gt; _reloadSources({ String targetPlatform, String sdkName, bool emulator, bool pause = false, String reason, void Function(String message) onSlow }) async { // 遍历所有Device的FlutterView, 并且uiIsolate 不存在的话，执行失败 for (FlutterDevice device in flutterDevices) { for (FlutterView view in device.views) { if (view.uiIsolate == null) { return OperationResult(2, 'Application isolate not found', fatal: true); } } } bool shouldReportReloadTime = !_runningFromSnapshot; // 开启计时器 final Stopwatch reloadTimer = Stopwatch()..start(); // 判断FlutterView的uiIsolate是否为null或者处于暂停状态，如果是刷新所有view if (!_isPaused()) { printTrace('Refreshing active FlutterViews before reloading.'); // 触发所有设备的vmService RPC 发送_flutter.listViews消息 await refreshViews(); } final Stopwatch devFSTimer = Stopwatch()..start(); // 同步修改的文件 final UpdateFSReport updatedDevFS = await _updateDevFS(); // Record time it took to synchronize to DevFS. _addBenchmarkData('hotReloadDevFSSyncMilliseconds', devFSTimer.elapsed.inMilliseconds); if (!updatedDevFS.success) { return OperationResult(1, 'DevFS synchronization failed'); } String reloadMessage; final Stopwatch vmReloadTimer = Stopwatch()..start(); Map&amp;lt;String, dynamic&amp;gt; firstReloadDetails; try { final String entryPath = fs.path.relative( getReloadPath(fullRestart: false), from: projectRootPath, ); final List&amp;lt;Future&amp;lt;DeviceReloadReport&amp;gt;&amp;gt; allReportsFutures = &amp;lt;Future&amp;lt;DeviceReloadReport&amp;gt;&amp;gt;[]; for (FlutterDevice device in flutterDevices) { if (_runningFromSnapshot) { // Asset directory has to be set only once when we switch from // running from snapshot to running from uploaded files. await device.resetAssetDirectory(); } final Completer&amp;lt;DeviceReloadReport&amp;gt; completer = Completer&amp;lt;DeviceReloadReport&amp;gt;(); allReportsFutures.add(completer.future); // 触发RPC 调用_reloadSources 重新加载资源 final List&amp;lt;Future&amp;lt;Map&amp;lt;String, dynamic&amp;gt;&amp;gt;&amp;gt; reportFutures = device.reloadSources( entryPath, pause: pause, ); // 处理RPC 调用_reloadSources 返回结果 unawaited(Future.wait(reportFutures).then( (List&amp;lt;Map&amp;lt;String, dynamic&amp;gt;&amp;gt; reports) async { // TODO(aam): Investigate why we are validating only first reload report, // which seems to be current behavior final Map&amp;lt;String, dynamic&amp;gt; firstReport = reports.first; // Don't print errors because they will be printed further down when // `validateReloadReport` is called again. await device.updateReloadStatus( validateReloadReport(firstReport, printErrors: false), ); completer.complete(DeviceReloadReport(device, reports)); }, )); } final List&amp;lt;DeviceReloadReport&amp;gt; reports = await Future.wait(allReportsFutures); for (DeviceReloadReport report in reports) { final Map&amp;lt;String, dynamic&amp;gt; reloadReport = report.reports[0]; if (!validateReloadReport(reloadReport)) { // Reload failed. HotEvent('reload-reject', targetPlatform: targetPlatform, sdkName: sdkName, emulator: emulator, fullRestart: false, reason: reason, ).send(); return OperationResult(1, 'Reload rejected'); } // Collect stats only from the first device. If/when run -d all is // refactored, we'll probably need to send one hot reload/restart event // per device to analytics. firstReloadDetails ??= reloadReport['details']; final int loadedLibraryCount = reloadReport['details']['loadedLibraryCount']; final int finalLibraryCount = reloadReport['details']['finalLibraryCount']; printTrace('reloaded $loadedLibraryCount of $finalLibraryCount libraries'); reloadMessage = 'Reloaded $loadedLibraryCount of $finalLibraryCount libraries'; } } on Map&amp;lt;String, dynamic&amp;gt; catch (error, stackTrace) { printTrace('Hot reload failed: $error\n$stackTrace'); final int errorCode = error['code']; String errorMessage = error['message']; if (errorCode == Isolate.kIsolateReloadBarred) { errorMessage = 'Unable to hot reload application due to an unrecoverable error in ' 'the source code. Please address the error and then use &quot;R&quot; to ' 'restart the app.\n' '$errorMessage (error code: $errorCode)'; HotEvent('reload-barred', targetPlatform: targetPlatform, sdkName: sdkName, emulator: emulator, fullRestart: false, reason: reason, ).send(); return OperationResult(errorCode, errorMessage); } return OperationResult(errorCode, '$errorMessage (error code: $errorCode)'); } catch (error, stackTrace) { printTrace('Hot reload failed: $error\n$stackTrace'); return OperationResult(1, '$error'); } // Record time it took for the VM to reload the sources. _addBenchmarkData('hotReloadVMReloadMilliseconds', vmReloadTimer.elapsed.inMilliseconds); final Stopwatch reassembleTimer = Stopwatch()..start(); // Reload the isolate. final List&amp;lt;Future&amp;lt;void&amp;gt;&amp;gt; allDevices = &amp;lt;Future&amp;lt;void&amp;gt;&amp;gt;[]; // 触发所有的FlutterView 的uiIsolate 刷新 for (FlutterDevice device in flutterDevices) { printTrace('Sending reload events to ${device.device.name}'); final List&amp;lt;Future&amp;lt;ServiceObject&amp;gt;&amp;gt; futuresViews = &amp;lt;Future&amp;lt;ServiceObject&amp;gt;&amp;gt;[]; for (FlutterView view in device.views) { printTrace('Sending reload event to &quot;${view.uiIsolate.name}&quot;'); futuresViews.add(view.uiIsolate.reload()); } final Completer&amp;lt;void&amp;gt; deviceCompleter = Completer&amp;lt;void&amp;gt;(); unawaited(Future.wait(futuresViews).whenComplete(() { deviceCompleter.complete(device.refreshViews()); })); allDevices.add(deviceCompleter.future); } await Future.wait(allDevices); // We are now running from source. _runningFromSnapshot = false; // Check if any isolates are paused. final List&amp;lt;FlutterView&amp;gt; reassembleViews = &amp;lt;FlutterView&amp;gt;[]; String serviceEventKind; int pausedIsolatesFound = 0; // 添加 ressembleViews for (FlutterDevice device in flutterDevices) { for (FlutterView view in device.views) { // Check if the isolate is paused, and if so, don't reassemble. Ignore the // PostPauseEvent event - the client requesting the pause will resume the app. final ServiceEvent pauseEvent = view.uiIsolate.pauseEvent; if (pauseEvent != null &amp;amp;&amp;amp; pauseEvent.isPauseEvent &amp;amp;&amp;amp; pauseEvent.kind != ServiceEvent.kPausePostRequest) { pausedIsolatesFound += 1; if (serviceEventKind == null) { serviceEventKind = pauseEvent.kind; } else if (serviceEventKind != pauseEvent.kind) { serviceEventKind = ''; // many kinds } } else { reassembleViews.add(view); } } } if (pausedIsolatesFound &amp;gt; 0) { if (onSlow != null) onSlow('${_describePausedIsolates(pausedIsolatesFound, serviceEventKind)}; interface might not update.'); if (reassembleViews.isEmpty) { printTrace('Skipping reassemble because all isolates are paused.'); return OperationResult(OperationResult.ok.code, reloadMessage); } } //删除dirty 资源 printTrace('Evicting dirty assets'); await _evictDirtyAssets(); assert(reassembleViews.isNotEmpty); printTrace('Reassembling application'); bool failedReassemble = false; final List&amp;lt;Future&amp;lt;void&amp;gt;&amp;gt; futures = &amp;lt;Future&amp;lt;void&amp;gt;&amp;gt;[]; // rpc触发所有的FlutterView uiIsolate ressemble for (FlutterView view in reassembleViews) { futures.add(() async { try { await view.uiIsolate.flutterReassemble(); } catch (error) { failedReassemble = true; printError('Reassembling ${view.uiIsolate.name} failed: $error'); return; } }()); } final Future&amp;lt;void&amp;gt; reassembleFuture = Future.wait&amp;lt;void&amp;gt;(futures).then&amp;lt;void&amp;gt;((List&amp;lt;void&amp;gt; values) { }); await reassembleFuture.timeout( const Duration(seconds: 2), onTimeout: () async { if (pausedIsolatesFound &amp;gt; 0) { shouldReportReloadTime = false; return; // probably no point waiting, they're probably deadlocked and we've already warned. } // Check if any isolate is newly paused. printTrace('This is taking a long time; will now check for paused isolates.'); int postReloadPausedIsolatesFound = 0; String serviceEventKind; for (FlutterView view in reassembleViews) { await view.uiIsolate.reload(); final ServiceEvent pauseEvent = view.uiIsolate.pauseEvent; if (pauseEvent != null &amp;amp;&amp;amp; pauseEvent.isPauseEvent) { postReloadPausedIsolatesFound += 1; if (serviceEventKind == null) { serviceEventKind = pauseEvent.kind; } else if (serviceEventKind != pauseEvent.kind) { serviceEventKind = ''; // many kinds } } } printTrace('Found $postReloadPausedIsolatesFound newly paused isolate(s).'); if (postReloadPausedIsolatesFound == 0) { await reassembleFuture; // must just be taking a long time... keep waiting! return; } shouldReportReloadTime = false; if (onSlow != null) onSlow('${_describePausedIsolates(postReloadPausedIsolatesFound, serviceEventKind)}.'); }, ); // Record time it took for Flutter to reassemble the application. _addBenchmarkData('hotReloadFlutterReassembleMilliseconds', reassembleTimer.elapsed.inMilliseconds); reloadTimer.stop(); final Duration reloadDuration = reloadTimer.elapsed; final int reloadInMs = reloadDuration.inMilliseconds; // Collect stats that help understand scale of update for this hot reload request. // For example, [syncedLibraryCount]/[finalLibraryCount] indicates how // many libraries were affected by the hot reload request. // Relation of [invalidatedSourcesCount] to [syncedLibraryCount] should help // understand sync/transfer &quot;overhead&quot; of updating this number of source files. HotEvent('reload', targetPlatform: targetPlatform, sdkName: sdkName, emulator: emulator, fullRestart: false, reason: reason, overallTimeInMs: reloadInMs, finalLibraryCount: firstReloadDetails['finalLibraryCount'], syncedLibraryCount: firstReloadDetails['receivedLibraryCount'], syncedClassesCount: firstReloadDetails['receivedClassesCount'], syncedProceduresCount: firstReloadDetails['receivedProceduresCount'], syncedBytes: updatedDevFS.syncedBytes, invalidatedSourcesCount: updatedDevFS.invalidatedSourcesCount, transferTimeInMs: devFSTimer.elapsed.inMilliseconds, ).send(); if (shouldReportReloadTime) { printTrace('Hot reload performed in ${getElapsedAsMilliseconds(reloadDuration)}.'); // Record complete time it took for the reload. _addBenchmarkData('hotReloadMillisecondsToFrame', reloadInMs); } // Only report timings if we reloaded a single view without any errors. if ((reassembleViews.length == 1) &amp;amp;&amp;amp; !failedReassemble &amp;amp;&amp;amp; shouldReportReloadTime) flutterUsage.sendTiming('hot', 'reload', reloadDuration); return OperationResult( failedReassemble ? 1 : OperationResult.ok.code, reloadMessage, ); } ​ 这个方法主要干了 5件事情 ​ 1. 扫描修改的文件，生成dill文件，并且通过Http服务下发到设备资源文件； 2. RPC 调用_reloadSources 触发VM重新加载修改后的文件 3. RPC 调用 flutter View的uiIsolate refreshView 4. 删除dirty文件 5. rpc触发所有的FlutterView uiIsolate ressemble 5. 不会发生Hot Reload的场景 应用被杀死 编译错误 当代码更改导致编译错误时，热重载会生成类似于以下内容的错误消息： Hot reload was rejected: '/Users/obiwan/Library/Developer/CoreSimulator/Devices/AC94F0FF-16F7-46C8-B4BF-218B73C547AC/data/Containers/Data/Application/4F72B076-42AD-44A4-A7CF-57D9F93E895E/tmp/ios_testWIDYdS/ios_test/lib/main.dart': warning: line 16 pos 38: unbalanced '{' opens here Widget build(BuildContext context) { ^ '/Users/obiwan/Library/Developer/CoreSimulator/Devices/AC94F0FF-16F7-46C8-B4BF-218B73C547AC/data/Containers/Data/Application/4F72B076-42AD-44A4-A7CF-57D9F93E895E/tmp/ios_testWIDYdS/ios_test/lib/main.dart': error: line 33 pos 5: unbalanced ')' ); 在这种情况下，只需更正上述代码的错误，即可以继续使用热重载 CupertinoTabView’s builder 在修改了CupertinoTableView 的builder内容时，Hot reload 不会生效 枚举类型改变成class 类型 当一个枚举类型，改成一个类时，Hot reload 不会生效 字体修改 泛型修改 修改前 class A&amp;lt;T&amp;gt; { T i; } 修改后 class A&amp;lt;T, V&amp;gt; { T i; V v; } Native code 更改原生代码， hot reload 不会生效 statelessWidget 和 statefulWidget 的互改 静态变量和全局变量的改变 参考 Flutter Hot Reload doc 深入理解flutter的编译原理与优化 揭秘Flutter Hot Reload（原理篇) 底层原理 - Flutter Hot Reload 详解 美团-Flutter原理与实践 头条开发攻城狮-深入理解Dart虚拟机启动 Dart VM 简介 深入浅出RPC原理</summary></entry><entry><title type="html">Flutter Text 文字下有黄色下划线</title><link href="http://localhost:4000/2020/05/01/02_flutter_text_has_underline.html" rel="alternate" type="text/html" title="Flutter Text 文字下有黄色下划线" /><published>2020-05-01T00:00:00+08:00</published><updated>2020-05-01T00:00:00+08:00</updated><id>http://localhost:4000/2020/05/01/02_flutter_text_has_underline</id><content type="html" xml:base="http://localhost:4000/2020/05/01/02_flutter_text_has_underline.html">&lt;h3 id=&quot;导致原因&quot;&gt;导致原因&lt;/h3&gt;

&lt;p&gt;导致这种情况发生的原因是因为，Text widget 隶属于Material 风格下的组件，如果根节点不是Material 相关组件，则会使用默认带黄色下划线的格式。如果根节点是Material 容器组件，则会采用其Material风格的样式（即不带有下换线）。&lt;/p&gt;

&lt;h3 id=&quot;解决方式&quot;&gt;解决方式&lt;/h3&gt;

&lt;h4 id=&quot;1-采用根节点为脚手架scaffold组件&quot;&gt;1. 采用根节点为脚手架Scaffold组件&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Scaffold(body: content,);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;2--采用根节点为material-组件&quot;&gt;2.  采用根节点为Material 组件&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Material(child: content);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;3-逐个修改text-组件的style-下的decoration为textdecorationnone&quot;&gt;3. 逐个修改Text 组件的style 下的decoration为TextDecoration.none&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;child: Text(
                      &quot;专栏的文章&quot;,
                      overflow: TextOverflow.ellipsis,
                      style: TextStyle(
                        decoration: TextDecoration.none,
                        color: Color(0xFF888888),
                        fontSize: 14,
                        fontWeight: FontWeight.bold,
                        fontFamily: defaultFontFamily,
                      ),
                    )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;结语&quot;&gt;结语&lt;/h3&gt;

&lt;p&gt;记录开发中遇到的问题，方便再次遇到快速解决。&lt;/p&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="Flutter" /><summary type="html">导致原因 导致这种情况发生的原因是因为，Text widget 隶属于Material 风格下的组件，如果根节点不是Material 相关组件，则会使用默认带黄色下划线的格式。如果根节点是Material 容器组件，则会采用其Material风格的样式（即不带有下换线）。 解决方式 1. 采用根节点为脚手架Scaffold组件 Scaffold(body: content,); 2. 采用根节点为Material 组件 Material(child: content); 3. 逐个修改Text 组件的style 下的decoration为TextDecoration.none child: Text( &quot;专栏的文章&quot;, overflow: TextOverflow.ellipsis, style: TextStyle( decoration: TextDecoration.none, color: Color(0xFF888888), fontSize: 14, fontWeight: FontWeight.bold, fontFamily: defaultFontFamily, ), ) 结语 记录开发中遇到的问题，方便再次遇到快速解决。</summary></entry></feed>