<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-06-06T17:13:43+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">harry’s blog</title><subtitle>harry's technology blog 
</subtitle><author><name>harry</name><email>harry_c2016@163.com</email></author><entry><title type="html">home brew 的研究</title><link href="http://localhost:4000/2023/05/31/homeBrew%E6%8E%A2%E7%A9%B6.html" rel="alternate" type="text/html" title="home brew 的研究" /><published>2023-05-31T00:00:00+08:00</published><updated>2023-05-31T00:00:00+08:00</updated><id>http://localhost:4000/2023/05/31/homeBrew%E6%8E%A2%E7%A9%B6</id><content type="html" xml:base="http://localhost:4000/2023/05/31/homeBrew%E6%8E%A2%E7%A9%B6.html">&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;虽然已经对homeBrew 如何去指定自己的taps 、如何写Formula脚本、以及安装更新自己的软件，有了一定的了解和使用，但是终归感觉不了解整体homeBrew的架构、机制。&lt;/p&gt;

&lt;p&gt;因此，需要对home brew 做一个深入的研究。&lt;/p&gt;

&lt;h3 id=&quot;正文&quot;&gt;正文&lt;/h3&gt;

&lt;h4 id=&quot;home-brew-简介&quot;&gt;home brew 简介&lt;/h4&gt;

&lt;p&gt;如果你是一名MacOs的使用者，那么我相信你肯定知道 home brew，也可能已经对于home brew 普通的一些命令非常熟悉了。那么home brew是什么？&lt;/p&gt;

&lt;p&gt;引用brew 官方文档的一句介绍的话：&lt;strong&gt;The Missing Package Manager for macOS (or Linux)， &lt;a href=&quot;https://formulae.brew.sh/cask/&quot;&gt;Homebrew Cask&lt;/a&gt; installs macOS apps, fonts and plugins and other non-open source software.&lt;/strong&gt;，home brew 一个MacOS 或者 Linux缺失包的管理器，通过brew cask还可以安装MasOS app 、字体、插件和一些不开源的软件。&lt;/p&gt;

&lt;p&gt;那么其实来说brew的意思呢是酿造的意思，home brew 呢也有着自家酿酒的意思，也就是说home brew 下载源码，自己进行编译。&lt;/p&gt;

&lt;p&gt;总体来说，home brew 就是一个命令行工具和MacOS 软件包管理安装工具。&lt;/p&gt;

&lt;h4 id=&quot;home-brew-有趣命名&quot;&gt;home brew 有趣命名&lt;/h4&gt;

&lt;p&gt;先来了解一下相关的概念：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;formula&lt;/strong&gt; ：字面意思为配方，也就是homeBrew包的安装源码编译的脚本（ruby编写）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;cask&lt;/strong&gt; ：字面意思也为桶，但是它功能类似于formula的，它是用来装定义了安装MacOS app的ruby脚本&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;keg&lt;/strong&gt; ：字面意思是桶，那么就是我们酿完酒之后需要的桶子装。也就是给定的Formula编译之后套件资料夹e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/local/Cellar/foo/0.1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;rack&lt;/strong&gt;：字面意思是支架的意思，也就是存放酒桶的架子，即keg的目录e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/local/Cellar/foo&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;**keg-only: ** 字面意思是不会超出桶，其实就是homeBrew不会做link到urs/bin操作的formula&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;cellar&lt;/strong&gt;：字面意思为地窖，也就是存放所有支架的，即代表/usr/local/Cellar/目录&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Caskroom&lt;/strong&gt;：字面意思呢是cask的房子，也就是用来存放一个或者多个cask的&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;external command&lt;/strong&gt;：一些brew的子命令但是不是在Homebrew/brew仓库，相当于我们扩展的一些brew命令&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;tap&lt;/strong&gt;：用来存放Formula、cask、external command的目录&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;bottle&lt;/strong&gt; ：提前构建好的酒桶，放到就架子上，也就是说是提前构建好的keg，然后放到rack上&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当我们了解了这些概念，在我们使用中或者理解homebrew工作机制会更有帮助。&lt;/p&gt;

&lt;p&gt;用一张图来了解一下这些概念：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230531175637image-20230531175637534.png&quot; alt=&quot;image-20230531175637534&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也就是说我们home brew是一个自己酿酒的过程，首先我们需要酿酒的配方（Formula），存放配方（Formula）的地方呢叫做tap，home brew 可以有多个tap。我们根据配方呢会造出来至少一桶酒keg，然后我们把酒桶呢是摆到了酒架子上。 最后呢我们存放酒架子的地方是酒窖。&lt;/p&gt;

&lt;p&gt;那么tap呢就对应目录为urs/local/Homebrew/Library/Taps/; 配方呢是tap目录下个某个Formula脚本。&lt;/p&gt;

&lt;p&gt;keg比如是/usr/local/Cellar/foo/0.1， rack呢就是/usr/local/Cellar/foo/ ，酒窖呢就对应为/usr/local/Cellar/&lt;/p&gt;

&lt;h4 id=&quot;home-brew-的一些机制&quot;&gt;home brew 的一些机制&lt;/h4&gt;

&lt;p&gt;由上面的介绍我们可以知道，我们整个比较关键的点，其实就是formula（配方）的制作。home brew 会根据formula进行编译安装。&lt;/p&gt;

&lt;p&gt;下面我们介绍一下整体的一个机制/命令：&lt;/p&gt;

&lt;p&gt;先来讲讲我们经常用到的几个命令：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先如果我们去执行 brew update，这个时候home brew 会更新自己tap 以及我们自定义的tap&lt;/li&gt;
  &lt;li&gt;如果我们自己创建了自己的tap，需要命名为homebrew-[特殊的名字]，否则你安装tap什么的会非常麻烦, 具体可以参看之前的&lt;a href=&quot;https://haoxiansen.github.io/2023/02/03/%E5%88%9B%E5%BB%BA%E4%B8%89%E6%96%B9homeBrew.html&quot;&gt;文章&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;更新tap只能执行 brew update&lt;/li&gt;
  &lt;li&gt;卸载tap， brew untap [tap名字]&lt;/li&gt;
  &lt;li&gt;安装CLI， brew install [CLI名字]， 重新安装brew reinstall&lt;/li&gt;
  &lt;li&gt;卸载CLI， brew uninstall [CLI名字]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;再来讲讲homebrew整体的一个机制&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;首先我们先了解一下MacOS的文件系统&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;bin/ 目录下存放的系统内置一些终端命令可执行文件，eg. ls、cp 等等&lt;/li&gt;
      &lt;li&gt;sbin/ 系统管理命令，这里存放的是系统管理员使用的管理程序&lt;/li&gt;
      &lt;li&gt;/etc 目录包含各种系统配置文件，许多网络配置文件也在/etc中&lt;/li&gt;
      &lt;li&gt;/home 用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;/usr&lt;/strong&gt; 是个很重要的目录，通常这一文件系统很大，因为所有程序安装在这里。/usr 里的所有文件一般来自linux发行版(distribution )；本地安装的程序和其他东西在/usr/local 下，因为这样可以在升级新版系统或新发行版时无须重新安装全部程序。/usr 目录下的许多内容是可选的，但这些功能会使用户使用系统更加有效。/usr可容纳许多大型的软件包和它们的配置文件。&lt;/li&gt;
      &lt;li&gt;/usr/bin  集中了几乎所有用户命令，是系统的软件库。另有些命令在/bin 或/usr/local/bin 中&lt;/li&gt;
      &lt;li&gt;/usr/sbin
包括了根文件系统不必要的系统管理命令&lt;/li&gt;
      &lt;li&gt;/usr/local
本地安装的软件和其他文件放在这里。这与/usr很相似。用户可能会在这发现一些比较大的软件包&lt;/li&gt;
      &lt;li&gt;/usr/local/bin
本地增加的命令 （就是在shell终端里执行的一些非系统命令）&lt;/li&gt;
      &lt;li&gt;/usr/local/lib
本地增加的库&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;了解以上的目录之后，我们再来看一下和home brew 相关的目录&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;/usr/local/Homebrew 这里是homebrew的工程目录，我们采用homebrew提供的安装方式，他就会在这里建立Homebrew目录，以及clone 远程homebrew仓库。并且他会将自己的/usr/local/Homebrew/bin/brew下的 链接到/usr/local/bin 下，这样我们brew命令就可以在终端使用&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230601115342image-20230601115342002.png&quot; alt=&quot;image-20230601115342002&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;我们home brew taps 在usr/local/Homebrew/Library/Taps/下，也就是说首次安装的时候其实不存在Taps，从&lt;a href=&quot;https://github.com/Homebrew/brew/tree/master/Library&quot;&gt;github&lt;/a&gt; 我们可以看的出。首次安装后，brew 会执行 brew tap 操作去添加公开的两个taps：homebrew-core、homebrew-cask， homebrew-core用来存放公开的CLI formula， homebrew-cask 存放MacOsApp的formula。我们自己的三方tap也会安装到这个目录下。&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230601120201image-20230601120201634.png&quot; alt=&quot;image-20230601120201634&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230601120305image-20230601120305439.png&quot; alt=&quot;image-20230601120305439&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;就如上面有趣的命名一样，brew 采用 formula（配方）酿制好酒，装入keg（酒桶）放入到rack(酒架子)上存在Caller(酒窖)。没错urs/locall/Caller 就是这个酒窖。brew 会把所有的编译好的文件都摆好放进去。&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230601121007image-20230601121007292.png&quot; alt=&quot;image-20230601121007292&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;上一步之后呢，他会把酒桶里的bin/的可执行文件，link到urs/bin下，实现可执行。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;最后呢，它会在/Users/xxx/Library/Caches/Homebrew，缓存文件下缓存未解压文件。&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230601121919image-20230601121919209.png&quot; alt=&quot;image-20230601121919209&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;以上呢就是我们对于brew 从安装到创建taps再到安装具体的软件，根据目录进行一个过程性描述。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;用一个复杂的git-formula-去了解-formula脚本内容&quot;&gt;用一个复杂的git formula 去了解 formula脚本内容&lt;/h5&gt;

&lt;p&gt;​	我们上面有讲到，最重要的其实就是Formula脚本的编写，配方决定着你酿出来的是什么酒。&lt;/p&gt;

&lt;p&gt;​	那么我们就用一个复杂一点的Formula的脚本例子，从例子中讲述，每一部分是什么作用。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Formula 脚本必须继承Formula类&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Formula&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;# 用来描述你的工具的一句话&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Distributed revision control system&quot;&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;# 必须是https的正确地址，可通过brew home 查看，如果发布到正式的tap这个有检验&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;homepage&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://git-scm.com&quot;&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;# 下载链接，也是一个源码库&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.39.1.tar.xz&quot;&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;# 源码zip包对应的一个sha256，用来验证缓存的完整性和安全性&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;40a38a0847b30c371b35873b3afcf123885dd41ea3ecbbf510efa97f3ce5c161&quot;&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;# 需要遵循的许可&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;license&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;GPL-2.0-only&quot;&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;# 可以直接通过--head 进行下载的，如果通过--head 就不会用url或者去下载&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/git/git.git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;branch: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;master&quot;&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;# 检查是否有新版本的block&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;livecheck&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://www.kernel.org/pub/software/scm/git/&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/href=.*?git[._-]v?(\d+(?:\.\d+)+)\.t/i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  	&lt;span class=&quot;c1&quot;&gt;# 已经编译好的可执行二进制文件对应的sha256, 如果有对应平台的bottle会直接采用&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bottle&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;arm64_ventura:  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2d9a37ed166b873b440d958901013b1e654bbd5ac727ccf1aedbf2775ef1d755&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;arm64_monterey: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;64f0c9cc05c506988b61e178562347032d86e4140063a57ca96fedb9c7ca7456&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;arm64_big_sur:  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;943e530d20cabe88ba728bf1e7c6a5872fa28701b42f6426372b813bd535922e&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;ventura:        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;f927b7c352d1e202cc072ea0f5582f8c09c57c6a374daf5682eae6de21ea04d5&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;monterey:       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b9849b6591a22a1cc2326301b258299888c8fd03dbb479793bab971bf14aadc8&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;big_sur:        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;7119f027abde700c0f3c7a012cceb7b0246a862735b3309f5ee70a63f7e69251&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;x86_64_linux:   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3c62fb80f565b24970423a4f882959377bbd8b67dc023ed8f47543faffe6fa36&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  	&lt;span class=&quot;c1&quot;&gt;# 依赖库，可指定具体场景时机使用&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;depends_on&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gettext&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;depends_on&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;pcre2&quot;&lt;/span&gt;
  
  	&lt;span class=&quot;c1&quot;&gt;# MacOS 提供的一些依赖库&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uses_from_macos&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;curl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;since: :catalina&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# macOS &amp;lt; 10.15.6 has broken cert path logic&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uses_from_macos&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;expat&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uses_from_macos&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;zlib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;since: :high_sierra&lt;/span&gt;
  
  	&lt;span class=&quot;c1&quot;&gt;# linux 系统的一些依赖&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_linux&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;depends_on&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;linux-headers@5.15&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:build&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;depends_on&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;openssl@1.1&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Uses CommonCrypto on macOS&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  	&lt;span class=&quot;c1&quot;&gt;# 额外的一些下载资源，会被定义为resource&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;html&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://mirrors.edge.kernel.org/pub/software/scm/git/git-htmldocs-2.39.1.tar.xz&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;032de9396c907383c8236e094a038191d54822a212390c2ce2fcd749db90dfd0&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
    &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;man&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://mirrors.edge.kernel.org/pub/software/scm/git/git-manpages-2.39.1.tar.xz&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b522a58e963fd5137f660802ec5a93283abfa3eaa0f069ebb6e7f00e529cc775&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
    &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Net::SMTP::SSL&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://cpan.metacpan.org/authors/id/R/RJ/RJBS/Net-SMTP-SSL-1.04.tar.gz&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;7b29c45add19d3d5084b751f7ba89a8e40479a446ce21cfd9cc741e558332a00&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  	&lt;span class=&quot;c1&quot;&gt;# 安装方法， 定义了如何安装， 里面具体内容不做过多注释了~&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# If these things are installed, tell Git build system not to use them&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NO_FINK&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NO_DARWIN_PORTS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PYTHON_PATH&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;which&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;python&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PERL_PATH&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;which&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;perl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;USE_LIBPCRE2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;INSTALL_SYMLINKS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;LIBPCREDIR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Formula&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pcre2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;opt_prefix&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;V&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# build verbosely&lt;/span&gt;
  
      &lt;span class=&quot;n&quot;&gt;perl_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Utils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;safe_popen_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;perl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;--version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/v(\d+\.\d+)(?:\.\d+)?/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mac?&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PERLLIB_EXTRA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%W[
          &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MacOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;active_developer_dir&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;
          /Library/Developer/CommandLineTools
          /Applications/Xcode.app/Contents/Developer
        ]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;uniq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/Library/Perl/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perl_version&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/darwin-thread-multi-2level&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;# The git-gui and gitk tools are installed by a separate formula (git-gui)&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# to avoid a dependency on tcl-tk and to avoid using the broken system&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# tcl-tk (see https://github.com/Homebrew/homebrew-core/issues/36390)&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# This is done by setting the NO_TCLTK make variable.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%W[
        prefix=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;
        sysconfdir=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;
        CC=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;
        CFLAGS=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cflags&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;
        LDFLAGS=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ldflags&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;
        NO_TCLTK=1
      ]&lt;/span&gt;
  
      &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mac?&lt;/span&gt;
        &lt;span class=&quot;sx&quot;&gt;%w[NO_OPENSSL=1 APPLE_COMMON_CRYPTO=1]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;openssl_prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Formula&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;openssl@1.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;opt_prefix&lt;/span&gt;
  
        &lt;span class=&quot;sx&quot;&gt;%W[NO_APPLE_COMMON_CRYPTO=1 OPENSSLDIR=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;openssl_prefix&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  		
  		&lt;span class=&quot;c1&quot;&gt;# 调用系统的cmake 进行install安装&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;make&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;install&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;
  
      &lt;span class=&quot;n&quot;&gt;git_core&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libexec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git-core&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git-svn&quot;&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;# Install the macOS keychain credential helper&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mac?&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;contrib/credential/osxkeychain&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;make&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CC=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;s2&quot;&gt;&quot;CFLAGS=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cflags&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;s2&quot;&gt;&quot;LDFLAGS=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ldflags&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;git_core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git-credential-osxkeychain&quot;&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;make&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;clean&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;# Generate diff-highlight perl script executable&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;contrib/diff-highlight&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;make&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;# Install the netrc credential helper&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;contrib/credential/netrc&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;make&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;git_core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git-credential-netrc&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;# Install git-subtree&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;contrib/subtree&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;make&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CC=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;s2&quot;&gt;&quot;CFLAGS=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cflags&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;s2&quot;&gt;&quot;LDFLAGS=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ldflags&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;git_core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git-subtree&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;# install the completion script first because it is inside &quot;contrib&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;bash_completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;contrib/completion/git-completion.bash&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;bash_completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;contrib/completion/git-prompt.sh&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;zsh_completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;contrib/completion/git-completion.zsh&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_git&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bash_completion&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/git-completion.bash&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zsh_completion&lt;/span&gt;
  
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;share&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git-core&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;contrib&quot;&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;# We could build the manpages ourselves, but the build process depends&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# on many other packages, and is somewhat crazy, this way is easier.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;man&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;man&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;share&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;doc/git-doc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;# Make html docs world-readable&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0644&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;share&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/doc/git-doc/**/*.{html,txt}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0755&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;share&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/doc/git-doc/{RelNotes,howto,technical}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;# git-send-email needs Net::SMTP::SSL or Net::SMTP &amp;gt;= 2.34&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Net::SMTP::SSL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stage&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;share&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;perl5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;lib/Net&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;# This is only created when building against system Perl, but it isn't&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# purged by Homebrew's post-install cleaner because that doesn't check&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# &quot;Library&quot; directories. It is however pointless to keep around as it&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# only contains the perllocal.pod installation file.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;rm_rf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Library/Perl&quot;&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;# Set the macOS keychain credential helper by default&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# (as Apple's CLT's git also does this).&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mac?&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buildpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gitconfig&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOS&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
          [credential]
          &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;helper = osxkeychain
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;        EOS&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gitconfig&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;caveats&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOS&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
        The Tcl/Tk GUIs (e.g. gitk, git-gui) are now in the `git-gui` formula.
        Subversion interoperability (git-svn) is now in the `git-svn` formula.
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;      EOS&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
		&lt;span class=&quot;c1&quot;&gt;# 测试方法，如果要发布到官方的tap中，test测试必须通过&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;init&quot;&lt;/span&gt;
      &lt;span class=&quot;sx&quot;&gt;%w[haunted house]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;touch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;add&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;haunted&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;house&quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;config&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;user.name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;'A U Thor'&quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;config&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;user.email&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;author@example.com&quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;commit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-m&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Initial Commit&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;haunted&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;house&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shell_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/git ls-files&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strip&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;# Check Net::SMTP or Net::SMTP::SSL works for git-send-email&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mac?&lt;/span&gt;
        &lt;span class=&quot;sx&quot;&gt;%w[foo bar]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;touch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;add&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;commit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-m&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Second Commit&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assert_match&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Authentication Required&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/git send-email --from=test@example.com --to=dev@null.com &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;--smtp-server=smtp.gmail.com --smtp-server-port=587 &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;--smtp-encryption=tls --confirm=never HEAD^ 2&amp;gt;&amp;amp;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上我们把Formula类相关的属性、方法的作用都做了注释，大家可以看看~，对于install方法内部没有做过多的注释，原因是git 安装方式，不是今天的主要内容，大致就是利用系统命令或者依赖命令完成编译安装。&lt;/p&gt;

&lt;p&gt;如果有更多对Formula类方法了解的，可以参考官方的&lt;a href=&quot;https://rubydoc.brew.sh/Formula&quot;&gt;文档&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;结束语&quot;&gt;结束语&lt;/h3&gt;

&lt;p&gt;通过home brew的学习，我们可以从中了解到设计者的幽默和设计理念。以酿酒的过程应用到brew的软件安装过程中，实在属于很形象也和强大。如果有好的mac 缺失的工具，我们也可以提供一份自己的力量对于brew 社区，mac 社区。&lt;/p&gt;

&lt;h3 id=&quot;引用--学习&quot;&gt;引用 &amp;amp; 学习&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.brew.sh/&quot;&gt;home brew 官网&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Homebrew/install/blob/master/install.sh&quot;&gt;home brew install.sh&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://rubydoc.brew.sh/Formula&quot;&gt;brew class list&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/6894537190295109645&quot;&gt;有趣的home brew命名&lt;/a&gt;&lt;/p&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="homeBrew" /><summary type="html">前言 虽然已经对homeBrew 如何去指定自己的taps 、如何写Formula脚本、以及安装更新自己的软件，有了一定的了解和使用，但是终归感觉不了解整体homeBrew的架构、机制。 因此，需要对home brew 做一个深入的研究。 正文 home brew 简介 如果你是一名MacOs的使用者，那么我相信你肯定知道 home brew，也可能已经对于home brew 普通的一些命令非常熟悉了。那么home brew是什么？ 引用brew 官方文档的一句介绍的话：The Missing Package Manager for macOS (or Linux)， Homebrew Cask installs macOS apps, fonts and plugins and other non-open source software.，home brew 一个MacOS 或者 Linux缺失包的管理器，通过brew cask还可以安装MasOS app 、字体、插件和一些不开源的软件。 那么其实来说brew的意思呢是酿造的意思，home brew 呢也有着自家酿酒的意思，也就是说home brew 下载源码，自己进行编译。 总体来说，home brew 就是一个命令行工具和MacOS 软件包管理安装工具。 home brew 有趣命名 先来了解一下相关的概念： formula ：字面意思为配方，也就是homeBrew包的安装源码编译的脚本（ruby编写） cask ：字面意思也为桶，但是它功能类似于formula的，它是用来装定义了安装MacOS app的ruby脚本 keg ：字面意思是桶，那么就是我们酿完酒之后需要的桶子装。也就是给定的Formula编译之后套件资料夹e.g. /usr/local/Cellar/foo/0.1 rack：字面意思是支架的意思，也就是存放酒桶的架子，即keg的目录e.g. /usr/local/Cellar/foo **keg-only: ** 字面意思是不会超出桶，其实就是homeBrew不会做link到urs/bin操作的formula cellar：字面意思为地窖，也就是存放所有支架的，即代表/usr/local/Cellar/目录 Caskroom：字面意思呢是cask的房子，也就是用来存放一个或者多个cask的 external command：一些brew的子命令但是不是在Homebrew/brew仓库，相当于我们扩展的一些brew命令 tap：用来存放Formula、cask、external command的目录 bottle ：提前构建好的酒桶，放到就架子上，也就是说是提前构建好的keg，然后放到rack上 当我们了解了这些概念，在我们使用中或者理解homebrew工作机制会更有帮助。 用一张图来了解一下这些概念： 也就是说我们home brew是一个自己酿酒的过程，首先我们需要酿酒的配方（Formula），存放配方（Formula）的地方呢叫做tap，home brew 可以有多个tap。我们根据配方呢会造出来至少一桶酒keg，然后我们把酒桶呢是摆到了酒架子上。 最后呢我们存放酒架子的地方是酒窖。 那么tap呢就对应目录为urs/local/Homebrew/Library/Taps/; 配方呢是tap目录下个某个Formula脚本。 keg比如是/usr/local/Cellar/foo/0.1， rack呢就是/usr/local/Cellar/foo/ ，酒窖呢就对应为/usr/local/Cellar/ home brew 的一些机制 由上面的介绍我们可以知道，我们整个比较关键的点，其实就是formula（配方）的制作。home brew 会根据formula进行编译安装。 下面我们介绍一下整体的一个机制/命令： 先来讲讲我们经常用到的几个命令： 首先如果我们去执行 brew update，这个时候home brew 会更新自己tap 以及我们自定义的tap 如果我们自己创建了自己的tap，需要命名为homebrew-[特殊的名字]，否则你安装tap什么的会非常麻烦, 具体可以参看之前的文章 更新tap只能执行 brew update 卸载tap， brew untap [tap名字] 安装CLI， brew install [CLI名字]， 重新安装brew reinstall 卸载CLI， brew uninstall [CLI名字] 再来讲讲homebrew整体的一个机制 首先我们先了解一下MacOS的文件系统 bin/ 目录下存放的系统内置一些终端命令可执行文件，eg. ls、cp 等等 sbin/ 系统管理命令，这里存放的是系统管理员使用的管理程序 /etc 目录包含各种系统配置文件，许多网络配置文件也在/etc中 /home 用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示 /usr 是个很重要的目录，通常这一文件系统很大，因为所有程序安装在这里。/usr 里的所有文件一般来自linux发行版(distribution )；本地安装的程序和其他东西在/usr/local 下，因为这样可以在升级新版系统或新发行版时无须重新安装全部程序。/usr 目录下的许多内容是可选的，但这些功能会使用户使用系统更加有效。/usr可容纳许多大型的软件包和它们的配置文件。 /usr/bin 集中了几乎所有用户命令，是系统的软件库。另有些命令在/bin 或/usr/local/bin 中 /usr/sbin 包括了根文件系统不必要的系统管理命令 /usr/local 本地安装的软件和其他文件放在这里。这与/usr很相似。用户可能会在这发现一些比较大的软件包 /usr/local/bin 本地增加的命令 （就是在shell终端里执行的一些非系统命令） /usr/local/lib 本地增加的库 了解以上的目录之后，我们再来看一下和home brew 相关的目录 /usr/local/Homebrew 这里是homebrew的工程目录，我们采用homebrew提供的安装方式，他就会在这里建立Homebrew目录，以及clone 远程homebrew仓库。并且他会将自己的/usr/local/Homebrew/bin/brew下的 链接到/usr/local/bin 下，这样我们brew命令就可以在终端使用 我们home brew taps 在usr/local/Homebrew/Library/Taps/下，也就是说首次安装的时候其实不存在Taps，从github 我们可以看的出。首次安装后，brew 会执行 brew tap 操作去添加公开的两个taps：homebrew-core、homebrew-cask， homebrew-core用来存放公开的CLI formula， homebrew-cask 存放MacOsApp的formula。我们自己的三方tap也会安装到这个目录下。 就如上面有趣的命名一样，brew 采用 formula（配方）酿制好酒，装入keg（酒桶）放入到rack(酒架子)上存在Caller(酒窖)。没错urs/locall/Caller 就是这个酒窖。brew 会把所有的编译好的文件都摆好放进去。 上一步之后呢，他会把酒桶里的bin/的可执行文件，link到urs/bin下，实现可执行。 最后呢，它会在/Users/xxx/Library/Caches/Homebrew，缓存文件下缓存未解压文件。 以上呢就是我们对于brew 从安装到创建taps再到安装具体的软件，根据目录进行一个过程性描述。 用一个复杂的git formula 去了解 formula脚本内容 ​ 我们上面有讲到，最重要的其实就是Formula脚本的编写，配方决定着你酿出来的是什么酒。 ​ 那么我们就用一个复杂一点的Formula的脚本例子，从例子中讲述，每一部分是什么作用。 # Formula 脚本必须继承Formula类 class Git &amp;lt; Formula # 用来描述你的工具的一句话 desc &quot;Distributed revision control system&quot; # 必须是https的正确地址，可通过brew home 查看，如果发布到正式的tap这个有检验 homepage &quot;https://git-scm.com&quot; # 下载链接，也是一个源码库 url &quot;https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.39.1.tar.xz&quot; # 源码zip包对应的一个sha256，用来验证缓存的完整性和安全性 sha256 &quot;40a38a0847b30c371b35873b3afcf123885dd41ea3ecbbf510efa97f3ce5c161&quot; # 需要遵循的许可 license &quot;GPL-2.0-only&quot; # 可以直接通过--head 进行下载的，如果通过--head 就不会用url或者去下载 head &quot;https://github.com/git/git.git&quot;, branch: &quot;master&quot; # 检查是否有新版本的block livecheck do url &quot;https://www.kernel.org/pub/software/scm/git/&quot; regex(/href=.*?git[._-]v?(\d+(?:\.\d+)+)\.t/i) end # 已经编译好的可执行二进制文件对应的sha256, 如果有对应平台的bottle会直接采用 bottle do sha256 arm64_ventura: &quot;2d9a37ed166b873b440d958901013b1e654bbd5ac727ccf1aedbf2775ef1d755&quot; sha256 arm64_monterey: &quot;64f0c9cc05c506988b61e178562347032d86e4140063a57ca96fedb9c7ca7456&quot; sha256 arm64_big_sur: &quot;943e530d20cabe88ba728bf1e7c6a5872fa28701b42f6426372b813bd535922e&quot; sha256 ventura: &quot;f927b7c352d1e202cc072ea0f5582f8c09c57c6a374daf5682eae6de21ea04d5&quot; sha256 monterey: &quot;b9849b6591a22a1cc2326301b258299888c8fd03dbb479793bab971bf14aadc8&quot; sha256 big_sur: &quot;7119f027abde700c0f3c7a012cceb7b0246a862735b3309f5ee70a63f7e69251&quot; sha256 x86_64_linux: &quot;3c62fb80f565b24970423a4f882959377bbd8b67dc023ed8f47543faffe6fa36&quot; end # 依赖库，可指定具体场景时机使用 depends_on &quot;gettext&quot; depends_on &quot;pcre2&quot; # MacOS 提供的一些依赖库 uses_from_macos &quot;curl&quot;, since: :catalina # macOS &amp;lt; 10.15.6 has broken cert path logic uses_from_macos &quot;expat&quot; uses_from_macos &quot;zlib&quot;, since: :high_sierra # linux 系统的一些依赖 on_linux do depends_on &quot;linux-headers@5.15&quot; =&amp;gt; :build depends_on &quot;openssl@1.1&quot; # Uses CommonCrypto on macOS end # 额外的一些下载资源，会被定义为resource resource &quot;html&quot; do url &quot;https://mirrors.edge.kernel.org/pub/software/scm/git/git-htmldocs-2.39.1.tar.xz&quot; sha256 &quot;032de9396c907383c8236e094a038191d54822a212390c2ce2fcd749db90dfd0&quot; end resource &quot;man&quot; do url &quot;https://mirrors.edge.kernel.org/pub/software/scm/git/git-manpages-2.39.1.tar.xz&quot; sha256 &quot;b522a58e963fd5137f660802ec5a93283abfa3eaa0f069ebb6e7f00e529cc775&quot; end resource &quot;Net::SMTP::SSL&quot; do url &quot;https://cpan.metacpan.org/authors/id/R/RJ/RJBS/Net-SMTP-SSL-1.04.tar.gz&quot; sha256 &quot;7b29c45add19d3d5084b751f7ba89a8e40479a446ce21cfd9cc741e558332a00&quot; end # 安装方法， 定义了如何安装， 里面具体内容不做过多注释了~ def install # If these things are installed, tell Git build system not to use them ENV[&quot;NO_FINK&quot;] = &quot;1&quot; ENV[&quot;NO_DARWIN_PORTS&quot;] = &quot;1&quot; ENV[&quot;PYTHON_PATH&quot;] = which(&quot;python&quot;) ENV[&quot;PERL_PATH&quot;] = which(&quot;perl&quot;) ENV[&quot;USE_LIBPCRE2&quot;] = &quot;1&quot; ENV[&quot;INSTALL_SYMLINKS&quot;] = &quot;1&quot; ENV[&quot;LIBPCREDIR&quot;] = Formula[&quot;pcre2&quot;].opt_prefix ENV[&quot;V&quot;] = &quot;1&quot; # build verbosely perl_version = Utils.safe_popen_read(&quot;perl&quot;, &quot;--version&quot;)[/v(\d+\.\d+)(?:\.\d+)?/, 1] if OS.mac? ENV[&quot;PERLLIB_EXTRA&quot;] = %W[ #{MacOS.active_developer_dir} /Library/Developer/CommandLineTools /Applications/Xcode.app/Contents/Developer ].uniq.map do |p| &quot;#{p}/Library/Perl/#{perl_version}/darwin-thread-multi-2level&quot; end.join(&quot;:&quot;) end # The git-gui and gitk tools are installed by a separate formula (git-gui) # to avoid a dependency on tcl-tk and to avoid using the broken system # tcl-tk (see https://github.com/Homebrew/homebrew-core/issues/36390) # This is done by setting the NO_TCLTK make variable. args = %W[ prefix=#{prefix} sysconfdir=#{etc} CC=#{ENV.cc} CFLAGS=#{ENV.cflags} LDFLAGS=#{ENV.ldflags} NO_TCLTK=1 ] args += if OS.mac? %w[NO_OPENSSL=1 APPLE_COMMON_CRYPTO=1] else openssl_prefix = Formula[&quot;openssl@1.1&quot;].opt_prefix %W[NO_APPLE_COMMON_CRYPTO=1 OPENSSLDIR=#{openssl_prefix}] end # 调用系统的cmake 进行install安装 system &quot;make&quot;, &quot;install&quot;, *args git_core = libexec/&quot;git-core&quot; rm git_core/&quot;git-svn&quot; # Install the macOS keychain credential helper if OS.mac? cd &quot;contrib/credential/osxkeychain&quot; do system &quot;make&quot;, &quot;CC=#{ENV.cc}&quot;, &quot;CFLAGS=#{ENV.cflags}&quot;, &quot;LDFLAGS=#{ENV.ldflags}&quot; git_core.install &quot;git-credential-osxkeychain&quot; system &quot;make&quot;, &quot;clean&quot; end end # Generate diff-highlight perl script executable cd &quot;contrib/diff-highlight&quot; do system &quot;make&quot; end # Install the netrc credential helper cd &quot;contrib/credential/netrc&quot; do system &quot;make&quot;, &quot;test&quot; git_core.install &quot;git-credential-netrc&quot; end # Install git-subtree cd &quot;contrib/subtree&quot; do system &quot;make&quot;, &quot;CC=#{ENV.cc}&quot;, &quot;CFLAGS=#{ENV.cflags}&quot;, &quot;LDFLAGS=#{ENV.ldflags}&quot; git_core.install &quot;git-subtree&quot; end # install the completion script first because it is inside &quot;contrib&quot; bash_completion.install &quot;contrib/completion/git-completion.bash&quot; bash_completion.install &quot;contrib/completion/git-prompt.sh&quot; zsh_completion.install &quot;contrib/completion/git-completion.zsh&quot; =&amp;gt; &quot;_git&quot; cp &quot;#{bash_completion}/git-completion.bash&quot;, zsh_completion (share/&quot;git-core&quot;).install &quot;contrib&quot; # We could build the manpages ourselves, but the build process depends # on many other packages, and is somewhat crazy, this way is easier. man.install resource(&quot;man&quot;) (share/&quot;doc/git-doc&quot;).install resource(&quot;html&quot;) # Make html docs world-readable chmod 0644, Dir[&quot;#{share}/doc/git-doc/**/*.{html,txt}&quot;] chmod 0755, Dir[&quot;#{share}/doc/git-doc/{RelNotes,howto,technical}&quot;] # git-send-email needs Net::SMTP::SSL or Net::SMTP &amp;gt;= 2.34 resource(&quot;Net::SMTP::SSL&quot;).stage do (share/&quot;perl5&quot;).install &quot;lib/Net&quot; end # This is only created when building against system Perl, but it isn't # purged by Homebrew's post-install cleaner because that doesn't check # &quot;Library&quot; directories. It is however pointless to keep around as it # only contains the perllocal.pod installation file. rm_rf prefix/&quot;Library/Perl&quot; # Set the macOS keychain credential helper by default # (as Apple's CLT's git also does this). if OS.mac? (buildpath/&quot;gitconfig&quot;).write &amp;lt;&amp;lt;~EOS [credential] \thelper = osxkeychain EOS etc.install &quot;gitconfig&quot; end end def caveats &amp;lt;&amp;lt;~EOS The Tcl/Tk GUIs (e.g. gitk, git-gui) are now in the `git-gui` formula. Subversion interoperability (git-svn) is now in the `git-svn` formula. EOS end # 测试方法，如果要发布到官方的tap中，test测试必须通过 test do system bin/&quot;git&quot;, &quot;init&quot; %w[haunted house].each { |f| touch testpath/f } system bin/&quot;git&quot;, &quot;add&quot;, &quot;haunted&quot;, &quot;house&quot; system bin/&quot;git&quot;, &quot;config&quot;, &quot;user.name&quot;, &quot;'A U Thor'&quot; system bin/&quot;git&quot;, &quot;config&quot;, &quot;user.email&quot;, &quot;author@example.com&quot; system bin/&quot;git&quot;, &quot;commit&quot;, &quot;-a&quot;, &quot;-m&quot;, &quot;Initial Commit&quot; assert_equal &quot;haunted\nhouse&quot;, shell_output(&quot;#{bin}/git ls-files&quot;).strip # Check Net::SMTP or Net::SMTP::SSL works for git-send-email if OS.mac? %w[foo bar].each { |f| touch testpath/f } system bin/&quot;git&quot;, &quot;add&quot;, &quot;foo&quot;, &quot;bar&quot; system bin/&quot;git&quot;, &quot;commit&quot;, &quot;-a&quot;, &quot;-m&quot;, &quot;Second Commit&quot; assert_match &quot;Authentication Required&quot;, pipe_output( &quot;#{bin}/git send-email --from=test@example.com --to=dev@null.com &quot; \ &quot;--smtp-server=smtp.gmail.com --smtp-server-port=587 &quot; \ &quot;--smtp-encryption=tls --confirm=never HEAD^ 2&amp;gt;&amp;amp;1&quot;, ) end end end 以上我们把Formula类相关的属性、方法的作用都做了注释，大家可以看看~，对于install方法内部没有做过多的注释，原因是git 安装方式，不是今天的主要内容，大致就是利用系统命令或者依赖命令完成编译安装。 如果有更多对Formula类方法了解的，可以参考官方的文档 结束语 通过home brew的学习，我们可以从中了解到设计者的幽默和设计理念。以酿酒的过程应用到brew的软件安装过程中，实在属于很形象也和强大。如果有好的mac 缺失的工具，我们也可以提供一份自己的力量对于brew 社区，mac 社区。 引用 &amp;amp; 学习 home brew 官网 home brew install.sh brew class list 有趣的home brew命名</summary></entry><entry><title type="html">shell 杂记(不断更新…)</title><link href="http://localhost:4000/2023/04/07/shell-%E6%8A%80%E6%9C%AF%E7%82%B9%E5%A4%87%E5%BF%98%E5%BD%95.html" rel="alternate" type="text/html" title="shell 杂记(不断更新...)" /><published>2023-04-07T00:00:00+08:00</published><updated>2023-04-07T00:00:00+08:00</updated><id>http://localhost:4000/2023/04/07/shell%20%E6%8A%80%E6%9C%AF%E7%82%B9%E5%A4%87%E5%BF%98%E5%BD%95</id><content type="html" xml:base="http://localhost:4000/2023/04/07/shell-%E6%8A%80%E6%9C%AF%E7%82%B9%E5%A4%87%E5%BF%98%E5%BD%95.html">&lt;h4 id=&quot;终端输出奇技淫巧&quot;&gt;终端输出奇技淫巧&lt;/h4&gt;

&lt;h6 id=&quot;1-u1b1au1bk&quot;&gt;1. \u{1B}[1A\u{1B}[K&lt;/h6&gt;

&lt;p&gt;这是一种 ANSI 转义序列，通常用于控制终端的光标位置和清除屏幕上的文本。”\u{1B}[1A” 表示将光标向上移动一行，”\u{1B}[K” 表示清除当前光标位置后面的文本。组合在一起，这个序列的意思是将光标移动到当前行的开头并清除该行的文本。&lt;/p&gt;

&lt;p&gt;Pod cache&lt;/p&gt;

&lt;p&gt;http://blog.fpliu.com/it/os/macOS/software/CocoaPods/pod-cache&lt;/p&gt;

&lt;h1 id=&quot;shell-杂记&quot;&gt;shell 杂记&lt;/h1&gt;

&lt;h4 id=&quot;1-shell-语句中的while-循环语句&quot;&gt;1. shell 语句中的while 循环语句&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;条件
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; 
&lt;span class=&quot;c&quot;&gt;# 循环体代码&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done

while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-gt&lt;/span&gt; 0&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done

while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-gt&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;2-shell-语法中的shift语句&quot;&gt;2. shell 语法中的shift语句&lt;/h4&gt;

&lt;p&gt;​	用于移动参数的位置，它将命令行参数往左移动一个位置，即第二个参数移动到第一个位置，以此类推&lt;/p&gt;

&lt;p&gt;​	语法为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; shift [n]&lt;/code&gt;, 可选的参数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt;指定移动参数的数量。如果未指定&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt;，则默认为1，即只移动一个参数。&lt;/p&gt;

&lt;h4 id=&quot;3-shell-中方法的定义与调用&quot;&gt;3. shell 中方法的定义与调用&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 定义&lt;/span&gt;
function_name&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# method body&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 调用&lt;/span&gt;
function_name parameter1 parameter2

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;4-shell-特殊变量&quot;&gt;4. shell 特殊变量&lt;/h4&gt;

&lt;p&gt;在shell编程中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$0&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$1&lt;/code&gt;是特殊变量，用于引用脚本名称和脚本的第一个参数。它们是内置的变量，可以在shell脚本中直接使用。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$0&lt;/code&gt;：代表当前脚本的名称，即执行脚本时输入的文件名或路径。例如，如果脚本名为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myscript.sh&lt;/code&gt;，则&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$0&lt;/code&gt;将为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myscript.sh&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$1&lt;/code&gt;：代表脚本的第一个参数，即在执行脚本时传递给它的第一个参数。例如，如果执行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myscript.sh&lt;/code&gt;时传递了一个参数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello&lt;/code&gt;，则&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$1&lt;/code&gt;将为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;5-dirname-shell命令&quot;&gt;5. dirname shell命令&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dirname&lt;/code&gt; 是一个常用的 Unix/Linux shell 命令，用于获取文件或目录路径的父目录。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dirname&lt;/code&gt; 命令接受一个文件或目录路径作为参数，并返回该路径的父目录&lt;/p&gt;

&lt;h4 id=&quot;-获取符号链接的真实地址&quot;&gt;. 获取符号链接的真实地址&lt;/h4&gt;

&lt;p&gt;在 shell 脚本中，您可以使用以下方法获取当前执行符号链接（link）脚本的真实路径&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bashCopy code
&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 获取当前执行符号链接脚本的真实路径&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;real_script_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dirname&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;readlink&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BASH_SOURCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[0]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &amp;amp;&amp;gt; /dev/null &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;当前执行符号链接脚本的真实路径: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$real_script_path&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这段代码首先使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${BASH_SOURCE[0]}&lt;/code&gt; 获取脚本的相对路径，然后使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readlink -f&lt;/code&gt; 获取符号链接脚本的真实路径。接下来，使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dirname&lt;/code&gt; 获取脚本所在的目录。最后，使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt; 命令进入该目录，并使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pwd&lt;/code&gt; 命令获取脚本所在目录的绝对路径。将结果赋值给 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;real_script_path&lt;/code&gt; 变量。&lt;/p&gt;

&lt;h4 id=&quot;7-判断数组是否为空&quot;&gt;7. 判断数组是否为空&lt;/h4&gt;

&lt;p&gt;在 shell 脚本中，可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-z&lt;/code&gt; 测试运算符来检查数组是否为空。以下是一个示例，演示如何检查数组是否为空：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 创建一个空数组&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;empty_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 创建一个非空数组&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;non_empty_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;元素1&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;元素2&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;元素3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 检查 empty_array 是否为空&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;empty_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;empty_array 是空的&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;empty_array 不是空的&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 检查 non_empty_array 是否为空&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;non_empty_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;non_empty_array 是空的&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;non_empty_array 不是空的&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;8-获取cpu架构&quot;&gt;8. 获取cpu架构&lt;/h4&gt;

&lt;p&gt;在 shell 脚本中，可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uname&lt;/code&gt; 命令来判断 CPU 的架构。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uname&lt;/code&gt; 命令用于输出系统信息，其中包括硬件架构。要获取硬件架构，可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uname -m&lt;/code&gt; 命令。&lt;/p&gt;

&lt;h4 id=&quot;9-读取管道传进来文本&quot;&gt;9. 读取管道传进来文本&lt;/h4&gt;

&lt;p&gt;在 shell 脚本中，可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read&lt;/code&gt; 命令从管道中读取传入的文本。以下是一个示例，演示如何在 shell 脚本中读取从管道传入的文本：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bashCopy code
#!/bin/bash

# 从管道中读取传入的文本
while IFS= read -r input_line; do
  # 输出传入的文本
  echo &quot;您传入的文本是：$input_line&quot;
done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在这个示例中，我们使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while&lt;/code&gt; 循环和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read&lt;/code&gt; 命令从管道中读取传入的文本。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IFS=&lt;/code&gt; 用于保留空白字符，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-r&lt;/code&gt; 选项用于防止反斜杠转义。对于从管道中读取的每一行文本，我们都会输出相应的内容。&lt;/p&gt;

&lt;h4 id=&quot;10-文字颜色背景颜色&quot;&gt;10. 文字颜色、背景颜色&lt;/h4&gt;

&lt;p&gt;在 shell 中，可以使用 ANSI 转义序列来更改文本颜色和背景颜色。ANSI 转义序列是一种特殊的字符序列，用于控制终端的显示属性，如颜色、粗体、下划线等。&lt;/p&gt;

&lt;p&gt;以下是一些常见的 ANSI 转义序列，用于更改文本颜色和背景颜色：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;文本颜色：
    &lt;ul&gt;
      &lt;li&gt;黑色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[30m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;红色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[31m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;绿色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[32m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;黄色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[33m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;蓝色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[34m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;洋红色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[35m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;青色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[36m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;白色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[37m&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;背景颜色：
    &lt;ul&gt;
      &lt;li&gt;黑色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[40m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;红色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[41m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;绿色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[42m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;黄色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[43m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;蓝色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[44m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;洋红色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[45m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;青色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[46m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;白色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[47m&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;要在 shell 脚本中使用这些 ANSI 转义序列，请将它们与要显示的文本一起输出。例如，要输出红色文本，可以使用以下命令：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bashCopy code
echo -e &quot;\033[31mThis is red text\033[0m&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在这个示例中，我们使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-e&lt;/code&gt; 选项告诉 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo&lt;/code&gt; 命令解释转义序列。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[31m&lt;/code&gt; 将文本颜色更改为红色，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[0m&lt;/code&gt; 将颜色重置为默认值。&lt;/p&gt;

&lt;p&gt;要同时更改文本颜色和背景颜色，可以将相应的转义序列组合在一起。例如，要输出白色文本和蓝色背景，可以使用以下命令：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bashCopy code
echo -e &quot;\033[37;44mWhite text on a blue background\033[0m&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在这个示例中，我们将文本颜色的转义序列（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[37m&lt;/code&gt;）和背景颜色的转义序列（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[44m&lt;/code&gt;）组合在一起。请注意，这些转义序列之间用分号（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;;&lt;/code&gt;）分隔&lt;/p&gt;

&lt;h4 id=&quot;11-shell-中给命令传入一个数组作为多参数&quot;&gt;11. shell 中给命令传入一个数组作为多参数&lt;/h4&gt;

&lt;p&gt;如果一个命令比如test [paths] test 命令可以传入至少一个path作为参数, 我们需要如下给test传入：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;path1&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;path2&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;path3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%s &quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;12-如何判断脚本是否在bash-shell中运行&quot;&gt;12. 如何判断脚本是否在Bash shell中运行&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-z &quot;${BASH_VERSION:-}&quot;&lt;/code&gt; 是一个 Bash 条件表达式，用于检查当前 shell 是否为 Bash。这个表达式的含义如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-z&lt;/code&gt;：这是一个测试运算符，用于检查字符串的长度是否为零。如果字符串长度为零，则返回真（true）；否则返回假（false）。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;${BASH_VERSION:-}&quot;&lt;/code&gt;：这是一个参数扩展表达式，用于获取 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BASH_VERSION&lt;/code&gt; 变量的值。如果 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BASH_VERSION&lt;/code&gt; 变量未设置或为空，则使用空字符串替换。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BASH_VERSION&lt;/code&gt; 变量在 Bash shell 中自动设置，包含当前 Bash 版本的信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-z &quot;${BASH_VERSION:-}&quot;&lt;/code&gt; 表达式的含义是：如果 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BASH_VERSION&lt;/code&gt; 变量为空（即字符串长度为零），则返回真（true）；否则返回假（false）。换句话说，如果当前 shell 不是 Bash（即 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BASH_VERSION&lt;/code&gt; 未设置），则此表达式为真（true）。&lt;/p&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="shell" /><summary type="html">终端输出奇技淫巧 1. \u{1B}[1A\u{1B}[K 这是一种 ANSI 转义序列，通常用于控制终端的光标位置和清除屏幕上的文本。”\u{1B}[1A” 表示将光标向上移动一行，”\u{1B}[K” 表示清除当前光标位置后面的文本。组合在一起，这个序列的意思是将光标移动到当前行的开头并清除该行的文本。 Pod cache http://blog.fpliu.com/it/os/macOS/software/CocoaPods/pod-cache shell 杂记 1. shell 语句中的while 循环语句 while test 条件 do # 循环体代码 done while test $count -gt 0; do echo &quot;&quot; done while [ $count -gt 0 ]; do echo &quot;&quot; done 2. shell 语法中的shift语句 ​ 用于移动参数的位置，它将命令行参数往左移动一个位置，即第二个参数移动到第一个位置，以此类推 ​ 语法为 shift [n], 可选的参数n指定移动参数的数量。如果未指定n，则默认为1，即只移动一个参数。 3. shell 中方法的定义与调用 # 定义 function_name() { # method body } # 调用 function_name parameter1 parameter2 4. shell 特殊变量 在shell编程中，$0和$1是特殊变量，用于引用脚本名称和脚本的第一个参数。它们是内置的变量，可以在shell脚本中直接使用。 $0：代表当前脚本的名称，即执行脚本时输入的文件名或路径。例如，如果脚本名为myscript.sh，则$0将为myscript.sh。 $1：代表脚本的第一个参数，即在执行脚本时传递给它的第一个参数。例如，如果执行myscript.sh时传递了一个参数hello，则$1将为hello 5. dirname shell命令 dirname 是一个常用的 Unix/Linux shell 命令，用于获取文件或目录路径的父目录。dirname 命令接受一个文件或目录路径作为参数，并返回该路径的父目录 . 获取符号链接的真实地址 在 shell 脚本中，您可以使用以下方法获取当前执行符号链接（link）脚本的真实路径 bashCopy code #!/bin/bash # 获取当前执行符号链接脚本的真实路径 real_script_path=&quot;$( cd &quot;$( dirname &quot;$(readlink -f &quot;${BASH_SOURCE[0]}&quot;)&quot; )&quot; &amp;amp;&amp;gt; /dev/null &amp;amp;&amp;amp; pwd )&quot; echo &quot;当前执行符号链接脚本的真实路径: $real_script_path&quot; 这段代码首先使用 ${BASH_SOURCE[0]} 获取脚本的相对路径，然后使用 readlink -f 获取符号链接脚本的真实路径。接下来，使用 dirname 获取脚本所在的目录。最后，使用 cd 命令进入该目录，并使用 pwd 命令获取脚本所在目录的绝对路径。将结果赋值给 real_script_path 变量。 7. 判断数组是否为空 在 shell 脚本中，可以使用 -z 测试运算符来检查数组是否为空。以下是一个示例，演示如何检查数组是否为空： #!/bin/bash # 创建一个空数组 empty_array=() # 创建一个非空数组 non_empty_array=(&quot;元素1&quot; &quot;元素2&quot; &quot;元素3&quot;) # 检查 empty_array 是否为空 if [ -z &quot;${empty_array[*]}&quot; ]; then echo &quot;empty_array 是空的&quot; else echo &quot;empty_array 不是空的&quot; fi # 检查 non_empty_array 是否为空 if [ -z &quot;${non_empty_array[*]}&quot; ]; then echo &quot;non_empty_array 是空的&quot; else echo &quot;non_empty_array 不是空的&quot; fi 8. 获取cpu架构 在 shell 脚本中，可以使用 uname 命令来判断 CPU 的架构。uname 命令用于输出系统信息，其中包括硬件架构。要获取硬件架构，可以使用 uname -m 命令。 9. 读取管道传进来文本 在 shell 脚本中，可以使用 read 命令从管道中读取传入的文本。以下是一个示例，演示如何在 shell 脚本中读取从管道传入的文本： bashCopy code #!/bin/bash # 从管道中读取传入的文本 while IFS= read -r input_line; do # 输出传入的文本 echo &quot;您传入的文本是：$input_line&quot; done 在这个示例中，我们使用 while 循环和 read 命令从管道中读取传入的文本。IFS= 用于保留空白字符，-r 选项用于防止反斜杠转义。对于从管道中读取的每一行文本，我们都会输出相应的内容。 10. 文字颜色、背景颜色 在 shell 中，可以使用 ANSI 转义序列来更改文本颜色和背景颜色。ANSI 转义序列是一种特殊的字符序列，用于控制终端的显示属性，如颜色、粗体、下划线等。 以下是一些常见的 ANSI 转义序列，用于更改文本颜色和背景颜色： 文本颜色： 黑色：\033[30m 红色：\033[31m 绿色：\033[32m 黄色：\033[33m 蓝色：\033[34m 洋红色：\033[35m 青色：\033[36m 白色：\033[37m 背景颜色： 黑色：\033[40m 红色：\033[41m 绿色：\033[42m 黄色：\033[43m 蓝色：\033[44m 洋红色：\033[45m 青色：\033[46m 白色：\033[47m 要在 shell 脚本中使用这些 ANSI 转义序列，请将它们与要显示的文本一起输出。例如，要输出红色文本，可以使用以下命令： bashCopy code echo -e &quot;\033[31mThis is red text\033[0m&quot; 在这个示例中，我们使用 -e 选项告诉 echo 命令解释转义序列。\033[31m 将文本颜色更改为红色，\033[0m 将颜色重置为默认值。 要同时更改文本颜色和背景颜色，可以将相应的转义序列组合在一起。例如，要输出白色文本和蓝色背景，可以使用以下命令： bashCopy code echo -e &quot;\033[37;44mWhite text on a blue background\033[0m&quot; 在这个示例中，我们将文本颜色的转义序列（\033[37m）和背景颜色的转义序列（\033[44m）组合在一起。请注意，这些转义序列之间用分号（;）分隔 11. shell 中给命令传入一个数组作为多参数 如果一个命令比如test [paths] test 命令可以传入至少一个path作为参数, 我们需要如下给test传入： array=(&quot;path1&quot;, &quot;path2&quot;, &quot;path3&quot;) test $(printf &quot;%s &quot; &quot;${array[@]}&quot;) 12. 如何判断脚本是否在Bash shell中运行 -z &quot;${BASH_VERSION:-}&quot; 是一个 Bash 条件表达式，用于检查当前 shell 是否为 Bash。这个表达式的含义如下： -z：这是一个测试运算符，用于检查字符串的长度是否为零。如果字符串长度为零，则返回真（true）；否则返回假（false）。 &quot;${BASH_VERSION:-}&quot;：这是一个参数扩展表达式，用于获取 BASH_VERSION 变量的值。如果 BASH_VERSION 变量未设置或为空，则使用空字符串替换。BASH_VERSION 变量在 Bash shell 中自动设置，包含当前 Bash 版本的信息。 因此，-z &quot;${BASH_VERSION:-}&quot; 表达式的含义是：如果 BASH_VERSION 变量为空（即字符串长度为零），则返回真（true）；否则返回假（false）。换句话说，如果当前 shell 不是 Bash（即 BASH_VERSION 未设置），则此表达式为真（true）。</summary></entry><entry><title type="html">基于homebrew 的code lint 集成</title><link href="http://localhost:4000/2023/03/20/%E5%9F%BA%E4%BA%8EHomebrew%E7%9A%84CodeLint%E9%9B%86%E6%88%90-%E6%80%BB.html" rel="alternate" type="text/html" title="基于homebrew 的code lint 集成" /><published>2023-03-20T00:00:00+08:00</published><updated>2023-03-20T00:00:00+08:00</updated><id>http://localhost:4000/2023/03/20/%E5%9F%BA%E4%BA%8EHomebrew%E7%9A%84CodeLint%E9%9B%86%E6%88%90(%E6%80%BB)</id><content type="html" xml:base="http://localhost:4000/2023/03/20/%E5%9F%BA%E4%BA%8EHomebrew%E7%9A%84CodeLint%E9%9B%86%E6%88%90-%E6%80%BB.html">&lt;h3 id=&quot;基于homebrew-的code-lint-集成总&quot;&gt;基于homebrew 的code lint 集成(总)&lt;/h3&gt;

&lt;h4 id=&quot;前情&quot;&gt;前情&lt;/h4&gt;

&lt;p&gt;之前文章中我们已经讲到了采用pre-commit 集成工具去集成code lint 工具（&lt;a href=&quot;https://haoxiansen.github.io/2022/09/14/Objective_CLint.html&quot;&gt;Objective-CLint&lt;/a&gt;、swiftlint），&lt;a href=&quot;https://haoxiansen.github.io/2022/08/29/%E5%85%B3%E4%BA%8EiOS-%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%8A%8A%E6%8E%A7%E7%A0%94%E7%A9%B6.html&quot;&gt;文章地址&lt;/a&gt;，这种方式当然很方便，但是也很难扩展。比如swiftLint 我们就没有很好的办法让其以html或者其他的方式打开，只能显示到控制台，再比如我们后续想要整合oc和swift lint的结果。也没有好的办法实现。那么我们就要另辟西路。&lt;/p&gt;

&lt;p&gt;当然我们还是采用pre-commit 的时期，只是我们不在采用pre-commit工具集成，我们自己写pre-commit脚本、自己做工具的安装等等时期。&lt;/p&gt;

&lt;p&gt;这样我们的可扩展行很强，我们想干什么都可以，只要我们能想的到的…&lt;/p&gt;

&lt;h4 id=&quot;开发架构&quot;&gt;开发/架构&lt;/h4&gt;

&lt;h5 id=&quot;开发前景&quot;&gt;开发前景&lt;/h5&gt;

&lt;p&gt;首先我们需要开发一个类似于pre-commit工具的安装CLI。作为我们自己的pre-commit工具，它主要包含三个功能:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;pre-commit 脚本文件的移动；&lt;/li&gt;
  &lt;li&gt;Objective-CLint 、swiftLint 配置文件的下载+移动；&lt;/li&gt;
  &lt;li&gt;Objective-CLint、swiftLint 的安装。&lt;/li&gt;
&lt;/ol&gt;

&lt;h6 id=&quot;疑问为什么我们不用现成的pre-commit工具&quot;&gt;疑问？为什么我们不用现成的&lt;a href=&quot;https://pre-commit.com/&quot;&gt;pre-commit&lt;/a&gt;工具&lt;/h6&gt;

&lt;p&gt;为什么我们不用现成的pre-commit工具，直接配置.pre-commit-config.yaml yaml文件直接使用呢？&lt;/p&gt;

&lt;p&gt;不得不承认，pre-commit确实很好的支持了hooks，并且做到了整合所有hooks的工具。但是pre-commit仍然无法满足我们的一些需求。比如我们想要oclint之后能打开一个错误写法与正确写法相比较的html，swiftlint 能够打开一个lint之后错误、警告的html。这个时候如果原本的hooks并没有支持，他只是支持输出html，那么pre-commit将会限制我们的可定制化。也就是说，pre-commit确实好用，但是如果要实现一些可定制化的要求，它必须是hooks库本身就支持的，否则将无法完成可定制化或者需要一些非常规手段实现。&lt;/p&gt;

&lt;h5 id=&quot;整体架构&quot;&gt;整体架构&lt;/h5&gt;

&lt;h6 id=&quot;整体架构图&quot;&gt;整体架构图：&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230327114421image-20230327114420359.png&quot; alt=&quot;image-20230327114420359&quot; /&gt;&lt;/p&gt;

&lt;p&gt;整体我们采用homebrew 作为基础。在homebrew 的基础上我们创建自己的三方tap，作为存储自研库GZLintMaker、Objective-CLint 存储空间，也方便后续的使用、安装。swiftLint 已经支持homebrew的安装，所以我们不需要管。如果不知道homebrew 如何创建三方tap，请参考我前边的文章&lt;a href=&quot;https://haoxiansen.github.io/2023/02/03/%E5%88%9B%E5%BB%BA%E4%B8%89%E6%96%B9homeBrew.html&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;gzlintmaker-自制cli傻瓜式安装使用&quot;&gt;GZLintMaker 自制CLI（傻瓜式安装、使用）&lt;/h6&gt;

&lt;p&gt;​	想要学习怎么用swift写CLI工具的，请参考&lt;a href=&quot;https://haoxiansen.github.io/2023/01/05/01_Swift-%E6%9E%84%E5%BB%BACLI.html&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;​	GZLintMaker 功能结构&lt;/p&gt;

&lt;p&gt;​	&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230526110210image-20230526110209988.png&quot; alt=&quot;image-20230526110209988&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;GZLintMaker 是基于swift 写的一个CLI（Command-line interface， 命令行工具）。作为一个iOSer， 能够使用swift 去写CLI 工具其实也是一键很幸福的事情（题外话）。&lt;/p&gt;

&lt;h6 id=&quot;gzlintmaker-功能命令介绍&quot;&gt;GZLintMaker 功能命令介绍&lt;/h6&gt;

&lt;p&gt;GZLintMaker 主要包含紫色三部分功能， –install –clean –uninstall，我们先分别介绍一下这几个功能：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;–install&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;作为install 的flag命令。主要内容就是安装codeLint的所有内容。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;移动配置文件、hook 脚本文件&lt;/p&gt;

        &lt;p&gt;首先它会去默认的存放配置文件、执行脚本的git仓库，去clone 仓库内容。clone 完成			之后，我们把仓库里的.clang-formate . swiftlint移动到工程目录下（根目录）；将.pre-commit 脚本文件移动到.git/hooks/目录下，当然我们要确保这是一个基于git的仓库。最后我们删除远程存放这些文件的目录。&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230526111628image-20230526111628810.png&quot; alt=&quot;image-20230526111628810&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;lint 工具检查&lt;/p&gt;

        &lt;p&gt;检查项有：&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;homebrew，没有则安装&lt;/li&gt;
          &lt;li&gt;homebrew tap （https://github.com/haoxiansen/homebrew-private）安装/更新&lt;/li&gt;
          &lt;li&gt;Objective-CLint 安装/更新&lt;/li&gt;
          &lt;li&gt;swiftLint 安装/更新&lt;/li&gt;
          &lt;li&gt;coreutils 安装(用来脚本时长统计)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;–clean&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;清理当前工作空间&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;清理配置文件.clang-formate .swiftlint&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;清理脚本文件 pre-commit
    &lt;ul&gt;
      &lt;li&gt;清理配置文件存放的git 仓库目录（如果有的话）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;–uninstall&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;卸载Lint工具&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;ObjectiveC-lint&lt;/li&gt;
      &lt;li&gt;swiftLint&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;–project-path&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;安装工作目录， 如果未指定默认为当前目录为工作目录&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;可以和所有一级命令配合使用，作为指定工作目录&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;–configure-git-path&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;配置文件、脚本的git仓库&lt;/li&gt;
      &lt;li&gt;需要指定自己的git 仓库作为自适应配置。仓库必须包括.clang-format .swiftlint 配置文件以及pre-commit脚本文件&lt;/li&gt;
      &lt;li&gt;如果没有指定，默认使用我们的git仓库的配置作为配置&lt;/li&gt;
      &lt;li&gt;为什么要采用单独的一个库作为配置文件、脚本文件的存储呢？主要是在于更新快，如果我们的pre-commit脚本、或者配置文件有更新，只要执行lintMaker –install 就可以更新&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;pre-commit-脚本介绍&quot;&gt;pre-commit 脚本介绍&lt;/h6&gt;

&lt;p&gt;pre-commit 主要做了以下几件事情：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;lint 工具的执行
    &lt;ul&gt;
      &lt;li&gt;使用git diff –cached –named-only 删选出.h .hh .m .mm作为OC 文件，然后判断是否需要lint或者执行ObjectiveC-Lint的命令 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;format-objc-hook --reporter &quot;open_html&quot; --output &quot;${objc_lint_html_dir}&quot; --quiet&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;同样使用git diff –cached –named-only 删选出.swift 文件作为swift 文件，然后判断是否需要lint或者执行swiftlint 命令&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;swiftlint lint --quiet --reporter html --output &quot;${swift_lint_html_dir}&quot; &quot;${lint_swift_files[*]}&quot;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;lint 工具执行时间的统计
    &lt;ul&gt;
      &lt;li&gt;因为MacOs 自带date 命令行工具只能支持秒级别的时间，无法满足我们更精细的时间统计要求，所以我们也是在Lint工具安装的时候特意带着coreutils库。这个库支持了更精细的gdate命令&lt;/li&gt;
      &lt;li&gt;使用gdate分别在脚本开始和结束统计纳秒时间，然后进行相减 &amp;amp; 转化为秒数展示&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;lint 工具输出的可视化（打开html）
    &lt;ul&gt;
      &lt;li&gt;ObjectiveC-Lint 因为是自己的库，什么命令都好支持，所以支持了指定输出文件&lt;/li&gt;
      &lt;li&gt;swiftlint 本身支持了多种输出方式，并且可指定输出文件&lt;/li&gt;
      &lt;li&gt;这样我们在判断执行结果后，判断是否需要提示 &amp;amp; 打开html&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面是pre-commit的整体脚本文件：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# File generated by harry&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;HERE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dirname&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;37&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;31&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GRAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;90&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;RED_BACKGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;41m&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GREEN_BACKGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;42m&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SYAN_BACKGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;46m&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CACHE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HERE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.cache/&quot;&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;swift_files_to_format&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;git diff &lt;span class=&quot;nt&quot;&gt;--cached&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name-only&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\.swift$'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$files&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Pods/'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Carthage/'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&amp;amp;1
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;objc_files_to_format&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;git diff &lt;span class=&quot;nt&quot;&gt;--cached&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name-only&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\.h$'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\.hh$'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\.m$'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\.mm$'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$files&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Pods/'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Carthage/'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&amp;amp;1
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# params prefix, string, color, background_color, suffix&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;log_color&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status_color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status_background_color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$4&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;is_r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$5&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status_background_color&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$is_r&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 1 &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
            &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[%sm%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status_color&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else 
            &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[%sm%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status_color&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;fi
        
    else
        if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$is_r&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 1 &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
            &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[%s;%s%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status_color&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status_background_color&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else 
            &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[%s;%s%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status_color&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status_background_color&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;fi
    fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# log lint tool [prefix]......[sufix][color][backgroundColor][status][is_r]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;log_color_dot&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;terminal_width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;tput cols&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;suffix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status_color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$4&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status_background_color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$5&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;is_r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$6&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;prefix_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;suffix_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;suffix&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;status_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;dot_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$terminal_width&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; - &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix_length&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; - &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$suffix_length&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; - &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$status_length&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; - 10&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;dot_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;i&amp;lt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dot_length&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;i++&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dot_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dot_string&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;.&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;done

    &lt;/span&gt;log_color &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dot_string&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;suffix&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$status&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$status_color&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$status_background_color&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$is_r&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;print_exec_time&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;end_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# use bc command&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;elapsed_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;end_time&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; - &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | bc&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# convert um to s&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;seconds_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;scale=2; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;elapsed_time&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; / 1000000000.0&quot;&lt;/span&gt; | bc&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$seconds_time&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# objc files lint&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;lint_objc&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;return_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
    &lt;span class=&quot;nv&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;gdate +%s%N&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;external_log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; format-objc-hook&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[format-objc]&quot;&lt;/span&gt;
        log_color_dot &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Linting&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GREEN_BACKGROUND&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;lint_objc_files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;objc_files_to_format&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lint_objc_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
            &lt;/span&gt;log_color_dot &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;(no files to check)&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Skiped&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$WHITE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SYAN_BACKGROUND&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else
            &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;objc_lint_html_dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CACHE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;objclint.html
            format-objc-hook &lt;span class=&quot;nt&quot;&gt;--reporter&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;open_html&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;objc_lint_html_dir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--quiet&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;lint_result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$lint_result&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
                &lt;/span&gt;log_color_dot &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Success&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GREEN_BACKGROUND&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else 
                &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;return_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
                log_color_dot &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Failed&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RED_BACKGROUND&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;external_log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;❌ 已自动打开html，请修复html中的lint问题，之后再次commit...😭😭😭&quot;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;fi
        fi
    else 
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;return_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
    &lt;span class=&quot;k&quot;&gt;fi
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;end_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;gdate +%s%N&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;nv&quot;&gt;duration_seconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;print_exec_time &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$start_time&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$end_time&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;format_seconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%.2f&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$duration_seconds&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[%dm- duration: %ss&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GRAY&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;format_seconds&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;external_log&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;log_color &lt;span class=&quot;s2&quot;&gt;&quot;❌ 已自动打开html，请修复html中lint问题，之后再次commit...😭😭😭&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi
    return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;return_code&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# swift files lint&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;swift_lint&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;return_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
    &lt;span class=&quot;nv&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;gdate +%s%N&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;external_log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; swiftlint&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[swiftlint]&quot;&lt;/span&gt;
        log_color_dot &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Linting&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GREEN_BACKGROUND&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;lint_swift_files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;swift_files_to_format&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lint_swift_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
            &lt;/span&gt;log_color_dot &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;(no files to check)&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Skiped&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$WHITE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GREEN_BACKGROUND&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else
            &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;swift_lint_html_dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CACHE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;swiftlint.html
            swiftlint lint &lt;span class=&quot;nt&quot;&gt;--quiet&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--reporter&lt;/span&gt; html &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;swift_lint_html_dir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lint_swift_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;lint_result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$lint_result&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
                &lt;/span&gt;log_color_dot &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Success&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GREEN_BACKGROUND&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else 
                &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;return_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
                open &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;swift_lint_html_dir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
                log_color_dot &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Failed&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RED_BACKGROUND&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;external_log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;❌ 已自动打开html，请修复html中的lint问题，之后再次commit...😭😭😭&quot;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;fi
        fi
    else 
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;return_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
    &lt;span class=&quot;k&quot;&gt;fi
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;end_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;gdate +%s%N&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;nv&quot;&gt;duration_seconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;print_exec_time &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$start_time&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$end_time&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;format_seconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%.2f&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$duration_seconds&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[%dm- duration: %ss&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GRAY&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;format_seconds&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;external_log&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;log_color &lt;span class=&quot;s2&quot;&gt;&quot;❌ 已自动打开html，请修复html中lint问题，之后再次commit...😭😭😭&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi
    return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;return_code&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CACHE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CACHE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;lint_objc
&lt;span class=&quot;nv&quot;&gt;objc_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; swift_lint
&lt;span class=&quot;nv&quot;&gt;swift_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$objc_code&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$swift_code&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;span class=&quot;k&quot;&gt;else 
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;objectivec-lint&quot;&gt;ObjectiveC-Lint&lt;/h6&gt;

&lt;p&gt;ObjectiveC-Lint 有专刊介绍，感兴趣的话可以去&lt;a href=&quot;https://haoxiansen.github.io/2022/09/14/Objective_CLint.html&quot;&gt;瞅瞅!&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;swiftlint&quot;&gt;SwiftLint&lt;/h6&gt;

&lt;p&gt;SwiftLint 就没有什么可说的了，强大&amp;amp;实用&amp;amp;支持各种方式接入~，感兴趣的可以去&lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;github&lt;/a&gt;!&lt;/p&gt;

&lt;h4 id=&quot;使用&quot;&gt;使用&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;直接采用Unix可执行文件&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;table&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td&gt;去&lt;a href=&quot;https://github.com/HaoXianSen/LintMaker/releases&quot;&gt;github&lt;/a&gt; 下载可执行文件，直接使用&lt;/td&gt;
              &lt;td&gt;放入urs/local/bin下&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HomeBrew方式&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew tap haoxiansen/private
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew update 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;lintmaker &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; brew upgrade lintmaker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;``` shell
lintmaker –install&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;效果展示&quot;&gt;效果展示&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;无可检查文件
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230606162944image-20230606162944764.png&quot; alt=&quot;image-20230606162944764&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;存在问题&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230606163222image-20230606163221890.png&quot; alt=&quot;image-20230606163221890&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;oc-lint 成功， swiftlint 跳过&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230606163204image-20230606163204367.png&quot; alt=&quot;image-20230606163204367&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230606163259image-20230606163258916.png&quot; alt=&quot;image-20230606163258916&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230606163316image-20230606163316722.png&quot; alt=&quot;image-20230606163316722&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;总结&quot;&gt;总结&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;整个code lint tool的集成断断续续花费了半年多的时间，整体上还是比较满意的&lt;/li&gt;
  &lt;li&gt;code lint 的接入，能够使得我们的代码更加的规范化，减少人工review的成本；&lt;/li&gt;
  &lt;li&gt;code lint的接入从某种程度上会降低我们的开发效率，因为要lint时间 + 改正时间，但是带来的好处远远大于一点点的效率降低，等到规则规范都提升之后，我们的效率自然会再次提起来&lt;/li&gt;
  &lt;li&gt;目前我们对ObjectiveC-Lint 做了进一步优化，支持了更多的&lt;/li&gt;
&lt;/ul&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="swift" /><category term="CLI" /><category term="objective-c" /><category term="homebrew" /><summary type="html">基于homebrew 的code lint 集成(总) 前情 之前文章中我们已经讲到了采用pre-commit 集成工具去集成code lint 工具（Objective-CLint、swiftlint），文章地址，这种方式当然很方便，但是也很难扩展。比如swiftLint 我们就没有很好的办法让其以html或者其他的方式打开，只能显示到控制台，再比如我们后续想要整合oc和swift lint的结果。也没有好的办法实现。那么我们就要另辟西路。 当然我们还是采用pre-commit 的时期，只是我们不在采用pre-commit工具集成，我们自己写pre-commit脚本、自己做工具的安装等等时期。 这样我们的可扩展行很强，我们想干什么都可以，只要我们能想的到的… 开发/架构 开发前景 首先我们需要开发一个类似于pre-commit工具的安装CLI。作为我们自己的pre-commit工具，它主要包含三个功能: pre-commit 脚本文件的移动； Objective-CLint 、swiftLint 配置文件的下载+移动； Objective-CLint、swiftLint 的安装。 疑问？为什么我们不用现成的pre-commit工具 为什么我们不用现成的pre-commit工具，直接配置.pre-commit-config.yaml yaml文件直接使用呢？ 不得不承认，pre-commit确实很好的支持了hooks，并且做到了整合所有hooks的工具。但是pre-commit仍然无法满足我们的一些需求。比如我们想要oclint之后能打开一个错误写法与正确写法相比较的html，swiftlint 能够打开一个lint之后错误、警告的html。这个时候如果原本的hooks并没有支持，他只是支持输出html，那么pre-commit将会限制我们的可定制化。也就是说，pre-commit确实好用，但是如果要实现一些可定制化的要求，它必须是hooks库本身就支持的，否则将无法完成可定制化或者需要一些非常规手段实现。 整体架构 整体架构图： 整体我们采用homebrew 作为基础。在homebrew 的基础上我们创建自己的三方tap，作为存储自研库GZLintMaker、Objective-CLint 存储空间，也方便后续的使用、安装。swiftLint 已经支持homebrew的安装，所以我们不需要管。如果不知道homebrew 如何创建三方tap，请参考我前边的文章这里 GZLintMaker 自制CLI（傻瓜式安装、使用） ​ 想要学习怎么用swift写CLI工具的，请参考这里 ​ GZLintMaker 功能结构 ​ GZLintMaker 是基于swift 写的一个CLI（Command-line interface， 命令行工具）。作为一个iOSer， 能够使用swift 去写CLI 工具其实也是一键很幸福的事情（题外话）。 GZLintMaker 功能命令介绍 GZLintMaker 主要包含紫色三部分功能， –install –clean –uninstall，我们先分别介绍一下这几个功能： –install 作为install 的flag命令。主要内容就是安装codeLint的所有内容。 移动配置文件、hook 脚本文件 首先它会去默认的存放配置文件、执行脚本的git仓库，去clone 仓库内容。clone 完成 之后，我们把仓库里的.clang-formate . swiftlint移动到工程目录下（根目录）；将.pre-commit 脚本文件移动到.git/hooks/目录下，当然我们要确保这是一个基于git的仓库。最后我们删除远程存放这些文件的目录。 lint 工具检查 检查项有： homebrew，没有则安装 homebrew tap （https://github.com/haoxiansen/homebrew-private）安装/更新 Objective-CLint 安装/更新 swiftLint 安装/更新 coreutils 安装(用来脚本时长统计) –clean 清理当前工作空间 清理配置文件.clang-formate .swiftlint 清理脚本文件 pre-commit 清理配置文件存放的git 仓库目录（如果有的话） –uninstall 卸载Lint工具 ObjectiveC-lint swiftLint –project-path 安装工作目录， 如果未指定默认为当前目录为工作目录 可以和所有一级命令配合使用，作为指定工作目录 –configure-git-path 配置文件、脚本的git仓库 需要指定自己的git 仓库作为自适应配置。仓库必须包括.clang-format .swiftlint 配置文件以及pre-commit脚本文件 如果没有指定，默认使用我们的git仓库的配置作为配置 为什么要采用单独的一个库作为配置文件、脚本文件的存储呢？主要是在于更新快，如果我们的pre-commit脚本、或者配置文件有更新，只要执行lintMaker –install 就可以更新 pre-commit 脚本介绍 pre-commit 主要做了以下几件事情： lint 工具的执行 使用git diff –cached –named-only 删选出.h .hh .m .mm作为OC 文件，然后判断是否需要lint或者执行ObjectiveC-Lint的命令 format-objc-hook --reporter &quot;open_html&quot; --output &quot;${objc_lint_html_dir}&quot; --quiet 同样使用git diff –cached –named-only 删选出.swift 文件作为swift 文件，然后判断是否需要lint或者执行swiftlint 命令swiftlint lint --quiet --reporter html --output &quot;${swift_lint_html_dir}&quot; &quot;${lint_swift_files[*]}&quot; lint 工具执行时间的统计 因为MacOs 自带date 命令行工具只能支持秒级别的时间，无法满足我们更精细的时间统计要求，所以我们也是在Lint工具安装的时候特意带着coreutils库。这个库支持了更精细的gdate命令 使用gdate分别在脚本开始和结束统计纳秒时间，然后进行相减 &amp;amp; 转化为秒数展示 lint 工具输出的可视化（打开html） ObjectiveC-Lint 因为是自己的库，什么命令都好支持，所以支持了指定输出文件 swiftlint 本身支持了多种输出方式，并且可指定输出文件 这样我们在判断执行结果后，判断是否需要提示 &amp;amp; 打开html 下面是pre-commit的整体脚本文件： #!/usr/bin/env bash # File generated by harry HERE=&quot;$(cd &quot;$(dirname &quot;$0&quot;)&quot; &amp;amp;&amp;amp; pwd)&quot; WHITE=&quot;37&quot; RED=&quot;31&quot; GRAY=&quot;90&quot; RED_BACKGROUND=&quot;41m&quot; GREEN_BACKGROUND=&quot;42m&quot; SYAN_BACKGROUND=&quot;46m&quot; CACHE=&quot;${HERE}/.cache/&quot; function swift_files_to_format() { files=$(git diff --cached --name-only | grep -e '\.swift$') echo &quot;$files&quot; | grep -v 'Pods/' | grep -v 'Carthage/' &amp;gt;&amp;amp;1 } function objc_files_to_format() { files=$(git diff --cached --name-only | grep -e '\.h$' -e '\.hh$' -e '\.m$' -e '\.mm$') echo &quot;$files&quot; | grep -v 'Pods/' | grep -v 'Carthage/' &amp;gt;&amp;amp;1 } # params prefix, string, color, background_color, suffix function log_color() { local prefix=$1 local status=$2 local status_color=$3 local status_background_color=$4 local is_r=$5 if [[ -z &quot;${status_background_color}&quot; ]]; then if (( &quot;$is_r&quot; == 1 )); then printf &quot;%s\033[%sm%s\033[0m\r&quot; &quot;${prefix}&quot; &quot;${status_color}&quot; &quot;${status}&quot; else printf &quot;%s\033[%sm%s\033[0m\n&quot; &quot;${prefix}&quot; &quot;${status_color}&quot; &quot;${status}&quot; fi else if (( &quot;$is_r&quot; == 1 )); then printf &quot;%s\033[%s;%s%s\033[0m\r&quot; &quot;${prefix}&quot; &quot;${status_color}&quot; &quot;${status_background_color}&quot; &quot;${status}&quot; else printf &quot;%s\033[%s;%s%s\033[0m\n&quot; &quot;${prefix}&quot; &quot;${status_color}&quot; &quot;${status_background_color}&quot; &quot;${status}&quot; fi fi } # log lint tool [prefix]......[sufix][color][backgroundColor][status][is_r] function log_color_dot() { terminal_width=$(tput cols) local prefix=$1 local suffix=$2 local status=$3 local status_color=$4 local status_background_color=$5 local is_r=$6 prefix_length=${#prefix} suffix_length=${#suffix} status_length=${#status} dot_length=&quot;$terminal_width - $prefix_length - $suffix_length - $status_length - 10&quot; dot_string=&quot;&quot; for((i=0;i&amp;lt;&quot;$dot_length&quot;;i++)); do dot_string=&quot;${dot_string}&quot;&quot;.&quot; done log_color &quot;${prefix}${dot_string}${suffix}&quot; &quot;$status&quot; &quot;$status_color&quot; &quot;$status_background_color&quot; &quot;$is_r&quot; } function print_exec_time() { start_time=$1 end_time=$2 # use bc command elapsed_time=$(echo &quot;${end_time} - ${start_time}&quot; | bc) # convert um to s seconds_time=$(echo &quot;scale=2; ${elapsed_time} / 1000000000.0&quot; | bc) echo &quot;$seconds_time&quot; } # objc files lint function lint_objc() { return_code=0 start_time=$(gdate +%s%N) external_log=&quot;&quot; if [ &quot;$(command -v format-objc-hook)&quot; ]; then prefix=&quot;[format-objc]&quot; log_color_dot &quot;$prefix&quot; &quot;&quot; &quot;Linting&quot; &quot;${WHITE}&quot; &quot;${GREEN_BACKGROUND}&quot; &quot;1&quot; lint_objc_files=$(objc_files_to_format) if [ -z &quot;${lint_objc_files[*]}&quot; ]; then log_color_dot &quot;$prefix&quot; &quot;(no files to check)&quot; &quot;Skiped&quot; &quot;$WHITE&quot; &quot;$SYAN_BACKGROUND&quot; &quot;0&quot; else objc_lint_html_dir=&quot;${CACHE}&quot;objclint.html format-objc-hook --reporter &quot;open_html&quot; --output &quot;${objc_lint_html_dir}&quot; --quiet lint_result=$? if (( &quot;$lint_result&quot; == 0 )); then log_color_dot &quot;$prefix&quot; &quot;&quot; &quot;Success&quot; &quot;${WHITE}&quot; &quot;$GREEN_BACKGROUND&quot; &quot;0&quot; else return_code=1 log_color_dot &quot;$prefix&quot; &quot;&quot; &quot;Failed&quot; &quot;${WHITE}&quot; &quot;$RED_BACKGROUND&quot; &quot;0&quot; external_log=&quot;❌ 已自动打开html，请修复html中的lint问题，之后再次commit...😭😭😭&quot; fi fi else return_code=1 fi end_time=$(gdate +%s%N) duration_seconds=$(print_exec_time &quot;$start_time&quot; &quot;$end_time&quot;) format_seconds=$(printf &quot;%.2f&quot; &quot;$duration_seconds&quot;) printf &quot;\033[%dm- duration: %ss\033[0m\n&quot; &quot;${GRAY}&quot; &quot;${format_seconds}&quot; if [[ -n &quot;${external_log}&quot; ]]; then log_color &quot;❌ 已自动打开html，请修复html中lint问题，之后再次commit...😭😭😭&quot; &quot;&quot; &quot;${RED}&quot; &quot;&quot; &quot;0&quot; fi return &quot;${return_code}&quot; } # swift files lint function swift_lint() { return_code=0 start_time=$(gdate +%s%N) external_log=&quot;&quot; if [ &quot;$(command -v swiftlint)&quot; ]; then prefix=&quot;[swiftlint]&quot; log_color_dot &quot;$prefix&quot; &quot;&quot; &quot;Linting&quot; &quot;${WHITE}&quot; &quot;${GREEN_BACKGROUND}&quot; &quot;1&quot; lint_swift_files=$(swift_files_to_format) if [ -z &quot;${lint_swift_files[*]}&quot; ]; then log_color_dot &quot;$prefix&quot; &quot;(no files to check)&quot; &quot;Skiped&quot; &quot;$WHITE&quot; &quot;$GREEN_BACKGROUND&quot; &quot;0&quot; else swift_lint_html_dir=&quot;${CACHE}&quot;swiftlint.html swiftlint lint --quiet --reporter html --output &quot;${swift_lint_html_dir}&quot; &quot;${lint_swift_files[*]}&quot; lint_result=$? if (( &quot;$lint_result&quot; == 0 )); then log_color_dot &quot;$prefix&quot; &quot;&quot; &quot;Success&quot; &quot;${WHITE}&quot; &quot;$GREEN_BACKGROUND&quot; &quot;0&quot; else return_code=1 open &quot;${swift_lint_html_dir}&quot; log_color_dot &quot;$prefix&quot; &quot;&quot; &quot;Failed&quot; &quot;${WHITE}&quot; &quot;$RED_BACKGROUND&quot; &quot;0&quot; external_log=&quot;❌ 已自动打开html，请修复html中的lint问题，之后再次commit...😭😭😭&quot; fi fi else return_code=1 fi end_time=$(gdate +%s%N) duration_seconds=$(print_exec_time &quot;$start_time&quot; &quot;$end_time&quot;) format_seconds=$(printf &quot;%.2f&quot; &quot;$duration_seconds&quot;) printf &quot;\033[%dm- duration: %ss\033[0m\n&quot; &quot;${GRAY}&quot; &quot;${format_seconds}&quot; if [[ -n &quot;${external_log}&quot; ]]; then log_color &quot;❌ 已自动打开html，请修复html中lint问题，之后再次commit...😭😭😭&quot; &quot;&quot; &quot;${RED}&quot; &quot;&quot; &quot;0&quot; fi return &quot;${return_code}&quot; } if ! [ -d &quot;${CACHE}&quot; ]; then mkdir &quot;${CACHE}&quot; fi lint_objc objc_code=$? echo &quot;&quot; &amp;amp;&amp;amp; swift_lint swift_code=$? echo &quot;&quot; if (( &quot;$objc_code&quot; == 0 )) &amp;amp;&amp;amp; (( &quot;$swift_code&quot; == 0 )); then exit 0 else exit 1 fi ObjectiveC-Lint ObjectiveC-Lint 有专刊介绍，感兴趣的话可以去瞅瞅! SwiftLint SwiftLint 就没有什么可说的了，强大&amp;amp;实用&amp;amp;支持各种方式接入~，感兴趣的可以去github! 使用 直接采用Unix可执行文件 去github 下载可执行文件，直接使用 放入urs/local/bin下 HomeBrew方式 brew tap haoxiansen/private brew update brew install lintmaker &amp;amp;&amp;amp; brew upgrade lintmaker ``` shell lintmaker –install 效果展示 无可检查文件 存在问题 oc-lint 成功， swiftlint 跳过 总结 整个code lint tool的集成断断续续花费了半年多的时间，整体上还是比较满意的 code lint 的接入，能够使得我们的代码更加的规范化，减少人工review的成本； code lint的接入从某种程度上会降低我们的开发效率，因为要lint时间 + 改正时间，但是带来的好处远远大于一点点的效率降低，等到规则规范都提升之后，我们的效率自然会再次提起来 目前我们对ObjectiveC-Lint 做了进一步优化，支持了更多的</summary></entry><entry><title type="html">如何创建一个三方home brew tap</title><link href="http://localhost:4000/2023/02/03/%E5%88%9B%E5%BB%BA%E4%B8%89%E6%96%B9homeBrew.html" rel="alternate" type="text/html" title="如何创建一个三方home brew tap" /><published>2023-02-03T00:00:00+08:00</published><updated>2023-02-03T00:00:00+08:00</updated><id>http://localhost:4000/2023/02/03/%E5%88%9B%E5%BB%BA%E4%B8%89%E6%96%B9homeBrew</id><content type="html" xml:base="http://localhost:4000/2023/02/03/%E5%88%9B%E5%BB%BA%E4%B8%89%E6%96%B9homeBrew.html">&lt;h4 id=&quot;前情提要&quot;&gt;前情提要&lt;/h4&gt;

&lt;p&gt;为什么要创建三方的homeBrew呢？原因在于呀，我们想要官方的homebrew添加软件是有很多限制的，比如需要在官方的homeBrew Formula里添加ruby脚本文件，并且要增加测试脚本，诸如此，还需要像官方的brew仓库提交MR，等待官方的合并，相对来说，如果不是公开的三方库，我们这样做无非是增加了很多的工作量。那么另外一种简单，同样是brew支持的方式就是创建自己的三方brew 仓库。（当然我们是因为有需求驱动的，简单说我想要借助brew的便捷性，达到内部lint工具的快捷安装），接下来，我会把我创建以及成功使用的步骤做以下几点记录。&lt;/p&gt;

&lt;h4 id=&quot;1-创建三方tap仓库&quot;&gt;1. 创建三方Tap仓库&lt;/h4&gt;

&lt;p&gt;​	如何创建三方tap库？&lt;/p&gt;

 	1. 首先，我们需要再github上创建一个公开的仓库，并且名字以 &lt;strong&gt;homebrew-&lt;/strong&gt;   开头的。然后将建好的tap仓库git clone到本地；
 	2. 在仓库里添加Formula目录，这个目录是放我们三方软件安装脚本的，具体的脚本我会在3点里细说。

&lt;p&gt;​		如下：https://github.com/xxxx/homebrew-private&lt;/p&gt;

&lt;p&gt;​	这样我们的准备工作就完成了。ok，那怎么添加到brew呢？&lt;/p&gt;

&lt;h4 id=&quot;2-开发brew-三方库lib&quot;&gt;2. 开发brew 三方库lib&lt;/h4&gt;

&lt;p&gt;比如我们用shell 开发了一个命令行工具exampleLint， 我们把他放到了github里，地址为https://github.com/xxx/xxx/exampleLint.&lt;/p&gt;

&lt;p&gt;这样来说我们的三方lib就准备完成了…&lt;/p&gt;

&lt;p&gt;当然你可以选择任何语言去写，shell、swift、ruby、python等等&lt;/p&gt;

&lt;h4 id=&quot;3-编写formula-ruby脚本文件&quot;&gt;3. 编写Formula ruby脚本文件&lt;/h4&gt;

&lt;p&gt;来到了比较重要的环节，home brew 当然需要我们提供给它一个脚本，告诉他这个lib的一些信息啊，download地址等等，这个文件就是放在Formula目录下，是一个ruby脚本文件。&lt;/p&gt;

&lt;p&gt;1、将2步骤中的lib可执行文件，打包成tar包&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 将release文件打包成xxx.tar.gz&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-czf&lt;/span&gt; xxx.tar.gz release
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果是shell开发，我们可以直接用github生成的.tar.gz文件&lt;/p&gt;

&lt;p&gt;2、生成SHA256&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;shasum &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; 256 xxx.tar.gz | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{print $1}'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; xxx-sha256.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3、如果自己生成的tar包，则需要上传到github的release中，上传完会得到下载链接。&lt;/p&gt;

&lt;p&gt;4、生成formula安装脚本&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;brew&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xxx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exampleLint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gz&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExampleLint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Formula&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/HaoXianSen/exampleLint&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;homepage&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/HaoXianSen/exampleLint&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/HaoXianSen/exampleLint/releases/download/1.0.0/exampleLint-mac.tar.gz&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bde3c29d31576ad833d3e22c5ed2889589917a367b749977a7703e018fc99a43&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;exampleLint&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将对应的信息添加补充到上边脚本里。&lt;/p&gt;

&lt;p&gt;ExampleLint 继承于Formula类。具体文档查看https://docs.brew.sh/Formula-Cookbook&lt;/p&gt;

&lt;h4 id=&quot;4-小试牛刀&quot;&gt;4. 小试牛刀&lt;/h4&gt;

&lt;p&gt;安装我们自己的工具包：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;brew&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xxxx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;或者&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;brew&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xxxx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;homebrew&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 我们可以带前缀homebrew-也可以不带，xxxx是github中最后地址的前一段，一般是自己github名&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样我们就可以将我们三方tap加入到brew中了，可到具体位置查看：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nt&quot;&gt;--repository&lt;/span&gt; 可查看brew 安装位置，查看/Library/Taps/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来就可以安装我们自己的软件了, 如下方式：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;exampleLint
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;就可以安装我们的软件。&lt;/p&gt;

&lt;h4 id=&quot;5-更新与版本&quot;&gt;5. 更新与版本&lt;/h4&gt;

&lt;p&gt;我们难免会遇到lib版本需要更新。如何更新版本？&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew tap &amp;lt;user/repo&amp;gt; &amp;lt;URL&amp;gt;
brew tap &lt;span class=&quot;nt&quot;&gt;--force-auto-update&lt;/span&gt; &amp;lt;user/repo&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;与安装brew 三方库一样，只要我们执行这个命令，github三方仓库就会更新到最细。&lt;/p&gt;

&lt;h4 id=&quot;6-移除tap&quot;&gt;6. 移除tap&lt;/h4&gt;

&lt;p&gt;移除使用以下命令&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew untap user/repo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;参考文献&quot;&gt;参考文献&lt;/h4&gt;

&lt;p&gt;1、 &lt;a href=&quot;https://docs.brew.sh/&quot;&gt;homebrew 官网&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2、https://www.jianshu.com/p/df351f34c160&lt;/p&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="homeBrew" /><summary type="html">前情提要 为什么要创建三方的homeBrew呢？原因在于呀，我们想要官方的homebrew添加软件是有很多限制的，比如需要在官方的homeBrew Formula里添加ruby脚本文件，并且要增加测试脚本，诸如此，还需要像官方的brew仓库提交MR，等待官方的合并，相对来说，如果不是公开的三方库，我们这样做无非是增加了很多的工作量。那么另外一种简单，同样是brew支持的方式就是创建自己的三方brew 仓库。（当然我们是因为有需求驱动的，简单说我想要借助brew的便捷性，达到内部lint工具的快捷安装），接下来，我会把我创建以及成功使用的步骤做以下几点记录。 1. 创建三方Tap仓库 ​ 如何创建三方tap库？ 1. 首先，我们需要再github上创建一个公开的仓库，并且名字以 homebrew- 开头的。然后将建好的tap仓库git clone到本地； 2. 在仓库里添加Formula目录，这个目录是放我们三方软件安装脚本的，具体的脚本我会在3点里细说。 ​ 如下：https://github.com/xxxx/homebrew-private ​ 这样我们的准备工作就完成了。ok，那怎么添加到brew呢？ 2. 开发brew 三方库lib 比如我们用shell 开发了一个命令行工具exampleLint， 我们把他放到了github里，地址为https://github.com/xxx/xxx/exampleLint. 这样来说我们的三方lib就准备完成了… 当然你可以选择任何语言去写，shell、swift、ruby、python等等 3. 编写Formula ruby脚本文件 来到了比较重要的环节，home brew 当然需要我们提供给它一个脚本，告诉他这个lib的一些信息啊，download地址等等，这个文件就是放在Formula目录下，是一个ruby脚本文件。 1、将2步骤中的lib可执行文件，打包成tar包 # 将release文件打包成xxx.tar.gz tar -czf xxx.tar.gz release 如果是shell开发，我们可以直接用github生成的.tar.gz文件 2、生成SHA256 shasum -a 256 xxx.tar.gz | awk '{print $1}' &amp;gt; xxx-sha256.txt 3、如果自己生成的tar包，则需要上传到github的release中，上传完会得到下载链接。 4、生成formula安装脚本 brew create https://xxx/exampleLint.tar.gz class ExampleLint &amp;lt; Formula desc &quot;https://github.com/HaoXianSen/exampleLint&quot; homepage &quot;https://github.com/HaoXianSen/exampleLint&quot; url &quot;https://github.com/HaoXianSen/exampleLint/releases/download/1.0.0/exampleLint-mac.tar.gz&quot; sha256 &quot;bde3c29d31576ad833d3e22c5ed2889589917a367b749977a7703e018fc99a43&quot; version &quot;1.0.0&quot; def install bin.install &quot;exampleLint&quot; end end 将对应的信息添加补充到上边脚本里。 ExampleLint 继承于Formula类。具体文档查看https://docs.brew.sh/Formula-Cookbook 4. 小试牛刀 安装我们自己的工具包： brew tap xxxx/private 或者 brew tap xxxx/homebrew-private # 我们可以带前缀homebrew-也可以不带，xxxx是github中最后地址的前一段，一般是自己github名 这样我们就可以将我们三方tap加入到brew中了，可到具体位置查看： brew --repository 可查看brew 安装位置，查看/Library/Taps/ 接下来就可以安装我们自己的软件了, 如下方式： brew install exampleLint 就可以安装我们的软件。 5. 更新与版本 我们难免会遇到lib版本需要更新。如何更新版本？ brew tap &amp;lt;user/repo&amp;gt; &amp;lt;URL&amp;gt; brew tap --force-auto-update &amp;lt;user/repo&amp;gt; 与安装brew 三方库一样，只要我们执行这个命令，github三方仓库就会更新到最细。 6. 移除tap 移除使用以下命令 brew untap user/repo 参考文献 1、 homebrew 官网 2、https://www.jianshu.com/p/df351f34c160</summary></entry><entry><title type="html">swift 编写第一个CLI程序</title><link href="http://localhost:4000/2023/01/05/Swift-%E6%9E%84%E5%BB%BACLI.html" rel="alternate" type="text/html" title="swift 编写第一个CLI程序" /><published>2023-01-05T00:00:00+08:00</published><updated>2023-01-05T00:00:00+08:00</updated><id>http://localhost:4000/2023/01/05/Swift%20%E6%9E%84%E5%BB%BACLI</id><content type="html" xml:base="http://localhost:4000/2023/01/05/Swift-%E6%9E%84%E5%BB%BACLI.html">&lt;h4 id=&quot;用swift-编写第一个clicommand-line-tool程序&quot;&gt;用swift 编写第一个CLI(command line tool)程序&lt;/h4&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;起因&quot;&gt;起因&lt;/h4&gt;

&lt;p&gt;因为在研究swiftLint的时候，发现了熟悉的swift code，但却无法理解到底实现了什么？&lt;/p&gt;

&lt;p&gt;发现swiftlint 都是基于开源库&lt;a href=&quot;https://github.com/apple/swift-argument-parser&quot;&gt;swift-argument-parser&lt;/a&gt; 做的，于是乎去了解apple的开源库&lt;a href=&quot;https://github.com/apple/swift-argument-parser&quot;&gt;swift-argument-parser&lt;/a&gt; ,  然后才知道了，这里面还大有玄机嘞！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apple/swift-argument-parser&quot;&gt;swift-argument-parser&lt;/a&gt; 这个是用来解析命令行参数的苹果开源库，应用这个库能很方便的进行命令行参数解析。&lt;/p&gt;

&lt;p&gt;后来非常好奇，那么swiftLint工程里的Package.swift文件又是啥呀？&lt;/p&gt;

&lt;p&gt;一练的疑问，一头的雾水，于是乎扎入到探究的深坑中…&lt;/p&gt;

&lt;p&gt;经过一两天的研究，翻看apple的官方文档、开源库&lt;a href=&quot;https://github.com/apple/swift-argument-parser&quot;&gt;swift-argument-parser&lt;/a&gt; 的使用、别人的博客，最后进入了另一个天地。 下面我将逐个解开里边的谜题（当然我是第一次知道，因为之前没接触过…，不要笑话哦😄）&lt;/p&gt;

&lt;h4 id=&quot;依次来说&quot;&gt;依次来说&lt;/h4&gt;

&lt;h5 id=&quot;首先说一说我们看到packageswift文件&quot;&gt;首先说一说，我们看到Package.swift文件&lt;/h5&gt;

&lt;p&gt;其实这是苹果新出的一种代码管理方案，叫做Swift Package Manager， 简称为SPM， 我们之前应该对Cocoapods、Carthage（专门用于swift工程无嵌入式工程管理）都比较了解，但是其实也比较类似，SPM也是用来管理三方库的依赖的。 对应到我们Cocoapods 这个Package.swift文件就相当于.podfile。&lt;/p&gt;

&lt;p&gt;那么我们怎么创建呢？&lt;/p&gt;

&lt;p&gt;​	两种方式可以创建：&lt;/p&gt;

&lt;p&gt;​	1. 我们可以通过命令行的方式创建：swift package init [–type executable]&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;我们可以通过打开xcode创建，&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230105182358image-20230105181140374.png&quot; alt=&quot;image-20230105181140374&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这样我们就可以创建出来这样一个工程，如下图：&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230105182408image-20230105181534945.png&quot; alt=&quot;image-20230105181534945&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用xcode 打开Package.swift 即可打开工程。&lt;/p&gt;

&lt;p&gt;然后我们需要配置Package.swift :&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PackageDescription&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Counter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Dependencies declare other packages that this package depends on.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// .package(url: /* package url */, from: &quot;1.0.0&quot;),&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://github.com/apple/swift-argument-parser.git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Targets are the basic building blocks of a package. A target can define a module or a test suite.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Targets can depend on other targets in this package, and on products in packages this package depends on.&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;executableTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Counter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ArgumentParser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;swift-argument-parser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果需要了解所有的参数解释，我们可以通过看xcode Package这个结构体了解。那其实上我们简单的配置包名、包名、依赖、可执行目标已然足够。 这样我们的一个swift package 就配置完成了，当配置完成后，xcode会自动检测包名、可执行名字 和 类名是否对应，以及检测依赖并且下载安装。&lt;/p&gt;

&lt;h5 id=&quot;紧接着我们说说命令行能干什么&quot;&gt;紧接着我们说说命令行能干什么&lt;/h5&gt;

&lt;p&gt;比如我们用的git命令、pod 命令其实都是命令行程序。只是他们可能不是用swift实现的而已，比如我们熟知的cocapods就是用ruby实现。那么相必这么举例我们就知道命令行能干什么？可干的事情可太多了，当然最早说的swiftLint也是一个命令行程序。&lt;/p&gt;

&lt;h5 id=&quot;接下来我们根据swift-argument-parser-官方示例写一个小小的cli&quot;&gt;接下来我们根据swift-argument-parser 官方示例，写一个小小的CLI&lt;/h5&gt;

&lt;p&gt;写一个经典的，读取a文件的内容并统计文件中单词的数量，输出到b文件。&lt;/p&gt;

&lt;p&gt;如果不用开源库&lt;a href=&quot;https://github.com/apple/swift-argument-parser&quot;&gt;swift-argument-parser&lt;/a&gt; ，我们需要一个main.swift 作为程序的入口:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// main.swift&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;An error occurred&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;因为原生的参数解析比较麻烦，我们就写一个比较简单输出吧，&lt;/p&gt;

&lt;p&gt;这个时候我们需要写一个Counter：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Counter.swift&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foundation&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CommandLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后我们再当前跟目录下，执行命令:&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; swift build&lt;/code&gt; ,  然后我们执行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; swift run Counter&lt;/code&gt;, 就可以看见终端的输出了  &lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230105184936image-20230105184936299.png&quot; alt=&quot;image-20230105184936299&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这样我们算是一个简单的CLI就开发完了。&lt;/p&gt;

&lt;p&gt;ok，我们再使用&lt;a href=&quot;https://github.com/apple/swift-argument-parser&quot;&gt;swift-argument-parser&lt;/a&gt; 去实现，我们最初的统计&lt;/p&gt;

&lt;p&gt;使用ArgumentParser, 我们就不需要在给main.swift入口，只需要命名类或者结构体，继承ParsableCommand 或者AsyncParsableCommand，然后标识为@main即可。&lt;/p&gt;

&lt;p&gt;ArgumentParser 有三种类型标识： @Argument 标识必须的参数，带有顺序的, 不可指定名字 @Option 是无序的，可以指定名字。以及是否简写等， @Flag 通常是一个bool指，一个标识。下面分别举例这三种对应到命令行&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 1 @Argument&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@Argument&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inputFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@Argument&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;outputFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 这种情况对应到命令行我们就需要 Counter test1.txt test2.txt ，以属性的顺序给定参数。并且不需要指定&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 2. @Option&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@Option&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inputFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@Option&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;outputFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 这种情况对应到命令行我们就需要 Counter --input-file test1.txt --output-file test2.txt ，当然顺序可以随意，只要指定即可。当然我们也可以@Option(name: help:)等初始化方法指定提示语、简写等等&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 2. @Flag&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@Option&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inputFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@Option&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;outputFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@Flag&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;verbose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 这种情况对应到命令行我们就需要 Counter --verbose --input-file test1.txt --output-file test2.txt。&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;OK，大概swift-argument-parser就介绍这么多，具体的可以查看&lt;a href=&quot;https://github.com/apple/swift-argument-parser&quot;&gt;github&lt;/a&gt;, 或者&lt;a href=&quot;https://apple.github.io/swift-argument-parser/documentation/argumentparser/gettingstarted/&quot;&gt;官网&lt;/a&gt;参考用法。&lt;/p&gt;

&lt;p&gt;接下来是我们统计的命令行实现：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ArgumentParser&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foundation&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;@main&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParsableCommand&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@Option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;short&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;customLong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A file to read&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inputFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;@Option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;short&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;customLong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;output&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A file to save word counts to&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;outputFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    
    
    &lt;span class=&quot;kd&quot;&gt;@Flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shortAndLong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Print status updates while counting&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;verbose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verbose&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
                Counting words in '&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputFile&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;' &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
                and write result into '&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputFile&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'
                &quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;contentsOfFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RuntimeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Can't read &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputFile&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; contents&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;separatedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;whitespacesAndNewlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;trimmingCharacters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CharacterSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alphanumerics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inverted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lowercased&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compactMap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;grouping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mapValues&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verbose&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;found &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; words&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;joined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;separator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;toFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;atomically&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RuntimeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Can't write to &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputFile&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RuntimeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CustomStringConvertible&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在我们理解了ArgumentParser之后和了解了命令行开发之后，在看这些swift的代码就比较简单了。写起来也很简单了。&lt;/p&gt;

&lt;p&gt;我们测试一下：&lt;/p&gt;

&lt;p&gt;新建test1.txt、test2.txt, 在test1.txt里加入&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230105190718image-20230105190717915.png&quot; alt=&quot;image-20230105190717915&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后，执行 swift run Counter -i test1.txt -o test2.txt -v, 查看输出&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230105190934image-20230105190933826.png&quot; alt=&quot;image-20230105190933826&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们查看test2.txt文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230105191015image-20230105191015159.png&quot; alt=&quot;image-20230105191015159&quot; /&gt;&lt;/p&gt;

&lt;p&gt;确实也写进去了。&lt;/p&gt;

&lt;p&gt;我们的命令现在只能在当前工程目录下，并且通过swift run命令执行，如何使得命令在任何目录终端都可以执行？&lt;/p&gt;

&lt;p&gt;我们需要打一个release的可执行包，手动移到/urs/local/bin下。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# tong&lt;/span&gt;
swift build &lt;span class=&quot;nt&quot;&gt;--configuration&lt;/span&gt; release &lt;span class=&quot;nt&quot;&gt;--product&lt;/span&gt; Counter
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; .build/release/Counter
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; Counter /usr/local/bin/counter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样，不管在哪，我们都可以直接执行counter命令啦！&lt;/p&gt;

&lt;p&gt;当然如果我们需要将我们CLI进行推广使用，肯定不能像以上那样进行，这样我们可以进行以下的方式进行安装：&lt;/p&gt;

&lt;p&gt;1、写一个自动安装脚本，下载已经打好的可执行文件，然后将可执行文件移动到/usr/local/bin/目录下&lt;/p&gt;

&lt;p&gt;2、我们可以制作home brew 通过home brew 自动完成安装。感兴趣的可以参考我的另一篇文章：&lt;a href=&quot;https://haoxiansen.github.io/2023/02/03/%E5%88%9B%E5%BB%BA%E4%B8%89%E6%96%B9homeBrew.html&quot;&gt;创建三方home brew&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;结束语鸡汤来一碗&quot;&gt;结束语（鸡汤来一碗~）&lt;/h4&gt;

&lt;p&gt;往往有些事情超出了我们了解的范围之后，我们内心是有些陌生、一头雾水、抗拒的，但是只要你沉下心来，去以一颗学习的心，去了解，去学习，那么就打开一个新世界。&lt;/p&gt;

&lt;p&gt;弄清楚以上这些之后，回头在看swiftLint代码，也变得容易多了。好了，接着学习swiftlint实现去了~&lt;/p&gt;

&lt;h4 id=&quot;参考&quot;&gt;参考&lt;/h4&gt;

&lt;p&gt;https://blog.csdn.net/Desgard_Duan/article/details/111878243&lt;/p&gt;

&lt;p&gt;https://www.avanderlee.com/swift/command-line-tool-package-manager/&lt;/p&gt;

&lt;p&gt;https://developer.apple.com/documentation/packagedescription&lt;/p&gt;

&lt;p&gt;https://github.com/apple/swift-argument-parser&lt;/p&gt;

&lt;p&gt;https://apple.github.io/swift-argument-parser/documentation/argumentparser/gettingstarted/&lt;/p&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="swift" /><category term="CLI" /><summary type="html">用swift 编写第一个CLI(command line tool)程序 起因 因为在研究swiftLint的时候，发现了熟悉的swift code，但却无法理解到底实现了什么？ 发现swiftlint 都是基于开源库swift-argument-parser 做的，于是乎去了解apple的开源库swift-argument-parser , 然后才知道了，这里面还大有玄机嘞！ swift-argument-parser 这个是用来解析命令行参数的苹果开源库，应用这个库能很方便的进行命令行参数解析。 后来非常好奇，那么swiftLint工程里的Package.swift文件又是啥呀？ 一练的疑问，一头的雾水，于是乎扎入到探究的深坑中… 经过一两天的研究，翻看apple的官方文档、开源库swift-argument-parser 的使用、别人的博客，最后进入了另一个天地。 下面我将逐个解开里边的谜题（当然我是第一次知道，因为之前没接触过…，不要笑话哦😄） 依次来说 首先说一说，我们看到Package.swift文件 其实这是苹果新出的一种代码管理方案，叫做Swift Package Manager， 简称为SPM， 我们之前应该对Cocoapods、Carthage（专门用于swift工程无嵌入式工程管理）都比较了解，但是其实也比较类似，SPM也是用来管理三方库的依赖的。 对应到我们Cocoapods 这个Package.swift文件就相当于.podfile。 那么我们怎么创建呢？ ​ 两种方式可以创建： ​ 1. 我们可以通过命令行的方式创建：swift package init [–type executable] 我们可以通过打开xcode创建， 这样我们就可以创建出来这样一个工程，如下图： 用xcode 打开Package.swift 即可打开工程。 然后我们需要配置Package.swift : import PackageDescription let package = Package( name: &quot;Counter&quot;, dependencies: [ // Dependencies declare other packages that this package depends on. // .package(url: /* package url */, from: &quot;1.0.0&quot;), .package(url: &quot;https://github.com/apple/swift-argument-parser.git&quot;, from: &quot;1.0.0&quot;) ], targets: [ // Targets are the basic building blocks of a package. A target can define a module or a test suite. // Targets can depend on other targets in this package, and on products in packages this package depends on. .executableTarget( name: &quot;Counter&quot;, dependencies: [.product(name: &quot;ArgumentParser&quot;, package: &quot;swift-argument-parser&quot;)]), ] ) 如果需要了解所有的参数解释，我们可以通过看xcode Package这个结构体了解。那其实上我们简单的配置包名、包名、依赖、可执行目标已然足够。 这样我们的一个swift package 就配置完成了，当配置完成后，xcode会自动检测包名、可执行名字 和 类名是否对应，以及检测依赖并且下载安装。 紧接着我们说说命令行能干什么 比如我们用的git命令、pod 命令其实都是命令行程序。只是他们可能不是用swift实现的而已，比如我们熟知的cocapods就是用ruby实现。那么相必这么举例我们就知道命令行能干什么？可干的事情可太多了，当然最早说的swiftLint也是一个命令行程序。 接下来我们根据swift-argument-parser 官方示例，写一个小小的CLI 写一个经典的，读取a文件的内容并统计文件中单词的数量，输出到b文件。 如果不用开源库swift-argument-parser ，我们需要一个main.swift 作为程序的入口: // main.swift let counter = Counter() do { try counter.run() } catch { print(&quot;An error occurred&quot;) } 因为原生的参数解析比较麻烦，我们就写一个比较简单输出吧， 这个时候我们需要写一个Counter： // Counter.swift import Foundation public struct Counter { private var arguments: [String] init(arguments: [String] = CommandLine.arguments) { self.arguments = arguments } public func run() throws { print(&quot;test&quot;) } } 然后我们再当前跟目录下，执行命令: swift build , 然后我们执行 swift run Counter, 就可以看见终端的输出了 这样我们算是一个简单的CLI就开发完了。 ok，我们再使用swift-argument-parser 去实现，我们最初的统计 使用ArgumentParser, 我们就不需要在给main.swift入口，只需要命名类或者结构体，继承ParsableCommand 或者AsyncParsableCommand，然后标识为@main即可。 ArgumentParser 有三种类型标识： @Argument 标识必须的参数，带有顺序的, 不可指定名字 @Option 是无序的，可以指定名字。以及是否简写等， @Flag 通常是一个bool指，一个标识。下面分别举例这三种对应到命令行 // 1 @Argument @Argument var inputFile: String @Argument var outputFile: String // 这种情况对应到命令行我们就需要 Counter test1.txt test2.txt ，以属性的顺序给定参数。并且不需要指定 // 2. @Option @Option var inputFile: String @Option var outputFile: String // 这种情况对应到命令行我们就需要 Counter --input-file test1.txt --output-file test2.txt ，当然顺序可以随意，只要指定即可。当然我们也可以@Option(name: help:)等初始化方法指定提示语、简写等等 // 2. @Flag @Option var inputFile: String @Option var outputFile: String @Flag var verbose: Bool = false // 这种情况对应到命令行我们就需要 Counter --verbose --input-file test1.txt --output-file test2.txt。 OK，大概swift-argument-parser就介绍这么多，具体的可以查看github, 或者官网参考用法。 接下来是我们统计的命令行实现： import ArgumentParser import Foundation @main struct Counter: ParsableCommand { @Option(name: [.short, .customLong(&quot;input&quot;)], help: &quot;A file to read&quot;) var inputFile: String @Option(name: [.short, .customLong(&quot;output&quot;)], help: &quot;A file to save word counts to&quot;) var outputFile:String @Flag(name: .shortAndLong, help: &quot;Print status updates while counting&quot;) var verbose: Bool = false mutating func run() throws { if verbose { print(&quot;&quot;&quot; Counting words in '\(inputFile)' \ and write result into '\(outputFile)' &quot;&quot;&quot;) } guard let input = try? String(contentsOfFile: inputFile) else { throw RuntimeError(&quot;Can't read \(inputFile) contents&quot;) } let words = input.components(separatedBy: .whitespacesAndNewlines) .map { word in word.trimmingCharacters(in: CharacterSet.alphanumerics.inverted).lowercased() } .compactMap { word in word.isEmpty ? nil : word } let counts = Dictionary(grouping: words, by: { $0 }) .mapValues { $0.count } .sorted(by: { $0.value &amp;gt; $1.value }) if verbose { print(&quot;found \(counts.count) words&quot;) } let output: String = counts.map { word, count in &quot;\(word): \(count)&quot; }.joined(separator: &quot;\n&quot;) guard let _ = try? output.write(toFile: outputFile, atomically: true, encoding: .utf8) else { throw RuntimeError(&quot;Can't write to \(outputFile)&quot;) } } } struct RuntimeError: Error, CustomStringConvertible { var description: String init(_ description: String) { self.description = description } } 在我们理解了ArgumentParser之后和了解了命令行开发之后，在看这些swift的代码就比较简单了。写起来也很简单了。 我们测试一下： 新建test1.txt、test2.txt, 在test1.txt里加入 然后，执行 swift run Counter -i test1.txt -o test2.txt -v, 查看输出 我们查看test2.txt文件 确实也写进去了。 我们的命令现在只能在当前工程目录下，并且通过swift run命令执行，如何使得命令在任何目录终端都可以执行？ 我们需要打一个release的可执行包，手动移到/urs/local/bin下。 # tong swift build --configuration release --product Counter cd .build/release/Counter cp -f Counter /usr/local/bin/counter 这样，不管在哪，我们都可以直接执行counter命令啦！ 当然如果我们需要将我们CLI进行推广使用，肯定不能像以上那样进行，这样我们可以进行以下的方式进行安装： 1、写一个自动安装脚本，下载已经打好的可执行文件，然后将可执行文件移动到/usr/local/bin/目录下 2、我们可以制作home brew 通过home brew 自动完成安装。感兴趣的可以参考我的另一篇文章：创建三方home brew 结束语（鸡汤来一碗~） 往往有些事情超出了我们了解的范围之后，我们内心是有些陌生、一头雾水、抗拒的，但是只要你沉下心来，去以一颗学习的心，去了解，去学习，那么就打开一个新世界。 弄清楚以上这些之后，回头在看swiftLint代码，也变得容易多了。好了，接着学习swiftlint实现去了~ 参考 https://blog.csdn.net/Desgard_Duan/article/details/111878243 https://www.avanderlee.com/swift/command-line-tool-package-manager/ https://developer.apple.com/documentation/packagedescription https://github.com/apple/swift-argument-parser https://apple.github.io/swift-argument-parser/documentation/argumentparser/gettingstarted/</summary></entry><entry><title type="html">iOS自旋锁与互斥锁</title><link href="http://localhost:4000/2023/01/04/iOS%E4%B8%AD%E8%87%AA%E6%97%8B%E9%94%81%E5%92%8C%E4%BA%92%E6%96%A5%E9%94%81.html" rel="alternate" type="text/html" title="iOS自旋锁与互斥锁" /><published>2023-01-04T00:00:00+08:00</published><updated>2023-01-04T00:00:00+08:00</updated><id>http://localhost:4000/2023/01/04/iOS%E4%B8%AD%E8%87%AA%E6%97%8B%E9%94%81%E5%92%8C%E4%BA%92%E6%96%A5%E9%94%81</id><content type="html" xml:base="http://localhost:4000/2023/01/04/iOS%E4%B8%AD%E8%87%AA%E6%97%8B%E9%94%81%E5%92%8C%E4%BA%92%E6%96%A5%E9%94%81.html">&lt;h4 id=&quot;ios中自旋锁和互斥锁&quot;&gt;iOS中自旋锁和互斥锁&lt;/h4&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;起因&quot;&gt;起因&lt;/h5&gt;

&lt;p&gt;属性修饰符atomic，是否是绝对线程安全的？&lt;/p&gt;

&lt;p&gt;当然乍一看，这两个问题好像没有必然的联系，但是了解atomic的内部实现，就能明白为什么我能跨度到自旋锁和互斥锁。（因为atomic其实内部是对于setter和getter加锁实现的）&lt;/p&gt;

&lt;p&gt;后边我们再看atomic到底是否安全的问题&lt;/p&gt;

&lt;h5 id=&quot;定义&quot;&gt;定义&lt;/h5&gt;

&lt;p&gt;锁：在&lt;a href=&quot;https://zh.wikipedia.org/wiki/计算机科学&quot;&gt;计算机科学&lt;/a&gt;中，&lt;strong&gt;锁&lt;/strong&gt;是在执行&lt;a href=&quot;https://zh.wikipedia.org/wiki/多线程&quot;&gt;多线程&lt;/a&gt;时用于强行限制资源访问的&lt;a href=&quot;https://zh.wikipedia.org/wiki/同步&quot;&gt;同步&lt;/a&gt;机制，即用于在&lt;a href=&quot;https://zh.wikipedia.org/wiki/并发控制&quot;&gt;并发控制&lt;/a&gt;中保证对&lt;a href=&quot;https://zh.wikipedia.org/wiki/互斥&quot;&gt;互斥&lt;/a&gt;要求的满足。(维基百科中的定义)&lt;/p&gt;

&lt;p&gt;自旋锁： 自旋锁其实就是线程再未获得锁的时候处于忙等的状态，一直消耗cpu，而不会进入内核态。&lt;/p&gt;

&lt;p&gt;互斥锁：互斥锁则是当未获得锁时，线程进入内核态，释放cpu的消耗，直到锁资源被释放，重新唤起休眠的线程。&lt;/p&gt;

&lt;p&gt;其实从定义中我们也能很明确的看到了他们的优缺点：自旋锁一直处于忙等的状态，会持续消耗cpu，而互斥锁则不会，但是互斥锁会频繁的切换线程的状态，比较效率上会比自旋锁低很多。&lt;/p&gt;

&lt;h5 id=&quot;ios-中的锁&quot;&gt;iOS 中的锁&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;NSLock 非递归互斥锁。是对于pthread_mutex_t的封装。遵循了NSLocking协议。-lock与unlock必须在同一线程调用，否则会产生问题。&lt;/li&gt;
  &lt;li&gt;NSCondition， 与NSLock类似都是对于pthread_mutex_t的封装，区别在于，他还对于pthread_cond_t的封装，所以NSLock只能等待锁资源释放，然后唤起等待的线程，而NSCondition则可以由我们主动唤起线程&lt;/li&gt;
  &lt;li&gt;NSConditionLock, 条件互斥锁，也就是说，除了正常的锁资源释放我们获得锁之外，我们还需要满足设置的另外一个条件，才能获得锁。释放锁也是如此。&lt;/li&gt;
  &lt;li&gt;NSRecursiveLock, 递归锁，也是一个互斥锁。与其他锁不同的是，递归锁可以其他锁如果同一个线程获得锁并且没有释放，这个线程再次获取锁就会造成死锁，互斥锁则可以运行同一个线程获得了锁之后依然可以再次获得锁。&lt;/li&gt;
  &lt;li&gt;@synchronize，对象锁，也是一个递归互斥锁。&lt;/li&gt;
  &lt;li&gt;Dispatch_semaphore,  信号量，更高级的互斥锁，初始值可以控制并发访问的最大量&lt;/li&gt;
  &lt;li&gt;OSSpinLock, iOS 10 废弃的自旋锁，原因是10之后增加了许多的线程默认优先级，自旋锁可能会造成线程优先级反转，导致死锁&lt;/li&gt;
  &lt;li&gt;os_unfair_lock, 用来取代OSSpinLock的互斥锁&lt;/li&gt;
  &lt;li&gt;pthread_mutex, 底层pthread互斥锁&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;性能&quot;&gt;性能&lt;/h5&gt;

&lt;p&gt;从&lt;a href=&quot;https://blog.ibireme.com/author/ibireme/&quot;&gt;ibireme&lt;/a&gt;的博客中图来看性能对比大概是这样的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blog.ibireme.com/wp-content/uploads/2016/01/lock_benchmark.png&quot; alt=&quot;lock_benchmark&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然作者只是单线程的一个时间消耗数据。不能反应多线程的实际性能，只能作为一个定性分析。&lt;/p&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="iOS" /><summary type="html">iOS中自旋锁和互斥锁 起因 属性修饰符atomic，是否是绝对线程安全的？ 当然乍一看，这两个问题好像没有必然的联系，但是了解atomic的内部实现，就能明白为什么我能跨度到自旋锁和互斥锁。（因为atomic其实内部是对于setter和getter加锁实现的） 后边我们再看atomic到底是否安全的问题 定义 锁：在计算机科学中，锁是在执行多线程时用于强行限制资源访问的同步机制，即用于在并发控制中保证对互斥要求的满足。(维基百科中的定义) 自旋锁： 自旋锁其实就是线程再未获得锁的时候处于忙等的状态，一直消耗cpu，而不会进入内核态。 互斥锁：互斥锁则是当未获得锁时，线程进入内核态，释放cpu的消耗，直到锁资源被释放，重新唤起休眠的线程。 其实从定义中我们也能很明确的看到了他们的优缺点：自旋锁一直处于忙等的状态，会持续消耗cpu，而互斥锁则不会，但是互斥锁会频繁的切换线程的状态，比较效率上会比自旋锁低很多。 iOS 中的锁 NSLock 非递归互斥锁。是对于pthread_mutex_t的封装。遵循了NSLocking协议。-lock与unlock必须在同一线程调用，否则会产生问题。 NSCondition， 与NSLock类似都是对于pthread_mutex_t的封装，区别在于，他还对于pthread_cond_t的封装，所以NSLock只能等待锁资源释放，然后唤起等待的线程，而NSCondition则可以由我们主动唤起线程 NSConditionLock, 条件互斥锁，也就是说，除了正常的锁资源释放我们获得锁之外，我们还需要满足设置的另外一个条件，才能获得锁。释放锁也是如此。 NSRecursiveLock, 递归锁，也是一个互斥锁。与其他锁不同的是，递归锁可以其他锁如果同一个线程获得锁并且没有释放，这个线程再次获取锁就会造成死锁，互斥锁则可以运行同一个线程获得了锁之后依然可以再次获得锁。 @synchronize，对象锁，也是一个递归互斥锁。 Dispatch_semaphore, 信号量，更高级的互斥锁，初始值可以控制并发访问的最大量 OSSpinLock, iOS 10 废弃的自旋锁，原因是10之后增加了许多的线程默认优先级，自旋锁可能会造成线程优先级反转，导致死锁 os_unfair_lock, 用来取代OSSpinLock的互斥锁 pthread_mutex, 底层pthread互斥锁 性能 从ibireme的博客中图来看性能对比大概是这样的： 当然作者只是单线程的一个时间消耗数据。不能反应多线程的实际性能，只能作为一个定性分析。</summary></entry><entry><title type="html">Objective-CLint（创建一个轻量级的、支持pre-commit的Objective-C 的静态检查）</title><link href="http://localhost:4000/2022/09/14/Objective_CLint.html" rel="alternate" type="text/html" title="Objective-CLint（创建一个轻量级的、支持pre-commit的Objective-C 的静态检查）" /><published>2022-09-14T00:00:00+08:00</published><updated>2022-09-14T00:00:00+08:00</updated><id>http://localhost:4000/2022/09/14/Objective_CLint</id><content type="html" xml:base="http://localhost:4000/2022/09/14/Objective_CLint.html">&lt;h1 id=&quot;objective-clint&quot;&gt;Objective-CLint&lt;/h1&gt;
&lt;p&gt;创建一个轻量级的、支持pre-commit的Objective-C 的静态检查&lt;/p&gt;

&lt;h3 id=&quot;感谢&quot;&gt;感谢&lt;/h3&gt;
&lt;p&gt;感谢 &lt;a href=&quot;https://github.com/square/spacecommander&quot;&gt;spacecommander&lt;/a&gt;作者提供的Objective-C lint的思路以及open source
本文大部分是基于 &lt;a href=&quot;https://github.com/square/spacecommander&quot;&gt;spacecommander&lt;/a&gt;累加的一些新功能。再次感谢开源作者，非常棒👍🏻&lt;/p&gt;

&lt;h3 id=&quot;架构构思&quot;&gt;架构/构思&lt;/h3&gt;
&lt;h4 id=&quot;1前因&quot;&gt;1.前因&lt;/h4&gt;
&lt;p&gt;因为OC-Lint的重量型检查，导致如果使用OCLint 那么首先我们需要安装OCLint 以及 还需要编译工程，如果我们使用&lt;a href=&quot;https://pre-commit.com/&quot;&gt;pre-commit&lt;/a&gt;那么
就会导致我们每次 git commit 时间会增加很多，每次 commit可能对于我们来说都是一种煎熬。ok那么就需要我们使用另外的方式解决。&lt;/p&gt;

&lt;p&gt;OK，解决方法之一就是我们之间使用Clang-format，我们知道其实OCLint也是基于Clang-format做的，那么在寻找的过程中发现了有伟大的 spacecommander 作者已经帮助我们集成了Clang-format
作者除此之外还解决了可能会引起Clang-format有歧义的代码修改、以及Clang-format 扫不到的一些规则修改。&lt;/p&gt;

&lt;p&gt;那么有了伟大的 spacecommander 作为基础，我们就可以利用他做一个pre-commit hook，用来OClint&lt;/p&gt;

&lt;h4 id=&quot;2相关实现改动&quot;&gt;2.相关实现、改动&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;在spacecommander 的基础上，实现了支持pre-commit，更方便集成&lt;/li&gt;
  &lt;li&gt;spacecommander 只是对比了format之后行数，以用来比较是否有不否和规则的代码出现，不够明显，我们采用diff的方式对比了
 format之前和之后的代码，使得开发者能更清楚，自己哪些地方代码不规范&lt;/li&gt;
  &lt;li&gt;spacecommander 提供了api 一键format代码，我们不提供此功能，因为我总觉得只有多次的认识到不规范的代码，才能保证下次写出规范的代码&lt;/li&gt;
  &lt;li&gt;提供了diff之后可视化输出，打开html，一眼即可看到不规范的代码&lt;/li&gt;
  &lt;li&gt;修改了部分自定义规则代码，以适应灵活的代码不规范&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/HaoXianSen/Objective-CLint/blob/main/.clang-format&quot;&gt;.clang-format&lt;/a&gt; 配置了更多的clang 规则&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;使用&quot;&gt;使用&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装 pre-commit , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install pre-commit&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在工程根目录添加(即.git同级目录)添加 &lt;a href=&quot;https://github.com/HaoXianSen/Objective-CLint/blob/main/.pre-commit-config.yaml&quot;&gt;.pre-commit-config.yaml&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;并配置为：&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fail_fast: false
repos:
  - repo: https://github.com/HaoXianSen/Objective-CLint.git
    rev: v0.0.2
    hooks:
      - id: objc-lint
        name: objc-format
        entry: format-objc-hook
        language: script
        require_serial: true
        verbose: true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;strong&gt;高阶使用&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;fork 工程，可修改、增加自定义规则，以及.clang 规则&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;相关截图&quot;&gt;相关截图&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20220914145908image-20220914145906934.png&quot; alt=&quot;image-20220914145906934&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20220914145930image-20220914145930603.png&quot; alt=&quot;image-20220914145930603&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20220914150033image-20220914150033308.png&quot; alt=&quot;image-20220914150033308&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;github&quot;&gt;github&lt;/h3&gt;

&lt;p&gt;https://github.com/HaoXianSen/Objective-CLint&lt;/p&gt;

&lt;h4 id=&quot;联系方式&quot;&gt;联系方式&lt;/h4&gt;

&lt;p&gt;harry_c2016@163.com&lt;/p&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="iOS" /><category term="pre-commit" /><category term="hooks" /><summary type="html">Objective-CLint 创建一个轻量级的、支持pre-commit的Objective-C 的静态检查 感谢 感谢 spacecommander作者提供的Objective-C lint的思路以及open source 本文大部分是基于 spacecommander累加的一些新功能。再次感谢开源作者，非常棒👍🏻 架构/构思 1.前因 因为OC-Lint的重量型检查，导致如果使用OCLint 那么首先我们需要安装OCLint 以及 还需要编译工程，如果我们使用pre-commit那么 就会导致我们每次 git commit 时间会增加很多，每次 commit可能对于我们来说都是一种煎熬。ok那么就需要我们使用另外的方式解决。 OK，解决方法之一就是我们之间使用Clang-format，我们知道其实OCLint也是基于Clang-format做的，那么在寻找的过程中发现了有伟大的 spacecommander 作者已经帮助我们集成了Clang-format 作者除此之外还解决了可能会引起Clang-format有歧义的代码修改、以及Clang-format 扫不到的一些规则修改。 那么有了伟大的 spacecommander 作为基础，我们就可以利用他做一个pre-commit hook，用来OClint 2.相关实现、改动 在spacecommander 的基础上，实现了支持pre-commit，更方便集成 spacecommander 只是对比了format之后行数，以用来比较是否有不否和规则的代码出现，不够明显，我们采用diff的方式对比了 format之前和之后的代码，使得开发者能更清楚，自己哪些地方代码不规范 spacecommander 提供了api 一键format代码，我们不提供此功能，因为我总觉得只有多次的认识到不规范的代码，才能保证下次写出规范的代码 提供了diff之后可视化输出，打开html，一眼即可看到不规范的代码 修改了部分自定义规则代码，以适应灵活的代码不规范 .clang-format 配置了更多的clang 规则 使用 安装 pre-commit , brew install pre-commit 在工程根目录添加(即.git同级目录)添加 .pre-commit-config.yaml 并配置为： fail_fast: false repos: - repo: https://github.com/HaoXianSen/Objective-CLint.git rev: v0.0.2 hooks: - id: objc-lint name: objc-format entry: format-objc-hook language: script require_serial: true verbose: true 高阶使用 fork 工程，可修改、增加自定义规则，以及.clang 规则 相关截图 github https://github.com/HaoXianSen/Objective-CLint 联系方式 harry_c2016@163.com</summary></entry><entry><title type="html">关于iOS 代码质量把控研究</title><link href="http://localhost:4000/2022/08/29/%E5%85%B3%E4%BA%8EiOS-%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%8A%8A%E6%8E%A7%E7%A0%94%E7%A9%B6.html" rel="alternate" type="text/html" title="关于iOS 代码质量把控研究" /><published>2022-08-29T00:00:00+08:00</published><updated>2022-08-29T00:00:00+08:00</updated><id>http://localhost:4000/2022/08/29/%E5%85%B3%E4%BA%8EiOS%20%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%8A%8A%E6%8E%A7%E7%A0%94%E7%A9%B6</id><content type="html" xml:base="http://localhost:4000/2022/08/29/%E5%85%B3%E4%BA%8EiOS-%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%8A%8A%E6%8E%A7%E7%A0%94%E7%A9%B6.html">&lt;h3 id=&quot;前提&quot;&gt;前提&lt;/h3&gt;

&lt;p&gt;code review 是我们工作中可以说必不可少的一环，一方面能够提早的发现代码中不合理的部分、或者不稳定、架构不合理的部分，提高代码的质量；另外一方面能，更够让团队的知识共享，互相熟悉业务需求，以及团队写的好的部分。OK，作为code review最早最基础的一环，可以说是代码规范。如果人工进行代码规范的维护，难免会遗漏，而且会花费时间在这部分。&lt;/p&gt;

&lt;p&gt;所以，针对这种情况，我们可以做的是，做一个lint帮助我们检测不规范的代码，OK，下面就lint，开始研究！&lt;/p&gt;

&lt;h3 id=&quot;lint-时机&quot;&gt;Lint 时机&lt;/h3&gt;

&lt;p&gt;我们熟知的Objective-C lint，有&lt;a href=&quot;https://docs.oclint.org/en/stable/index.html#usage&quot;&gt;OClint&lt;/a&gt;、&lt;a href=&quot;https://fbinfer.com/&quot;&gt;Infer&lt;/a&gt;; swift 有&lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;swiftLint&lt;/a&gt;，首先我们先不考虑这个几个lint的问题，我们先考虑一个重要的问题，lint应该放到什么阶段？&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;放到build时期？&lt;/p&gt;

    &lt;p&gt;这种方案被我们pass掉了，首先放到build时期会增加我们的build时间，第二事实上我们需要嵌入脚本到项目里，可能会影响到打包。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;放到git push 之后gitlab pipeline时期？&lt;/p&gt;

    &lt;p&gt;这种方案不出意外也被pass了，首先如果知道pipeline job的人都知道，我们需要配置runner, 本身来说配置加集成，可能就不是一个容易的事情，而且对于我来说我觉得这个事情，太晚了，lint 有问题，还等再次push….&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;放到pre commit时期？&lt;/p&gt;

    &lt;p&gt;Ok, 对于比较合适的事情，我觉得就是在precommit时期，因为基于git 管理，我们代码每次改动之后都需要commit，那么commit事情去做lint这件事情，是非常合适的，如果存在问题，那么就修改之后，再次commit。时间上，时机上我觉得都很合适&lt;/p&gt;

    &lt;p&gt;ok， 对于 lint 放到哪个时机的问题，我们已经确定–pre commit时期&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;pre-commit&quot;&gt;&lt;a href=&quot;https://pre-commit.com/#install&quot;&gt;pre-commit&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;git 其实为我们提供了很多种的hook方式，随便打开一个.git文件夹就可以看到一堆的hooks example文件，如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20220915152238image-20220915152237340.png&quot; alt=&quot;image-20220915152237340&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OK，所以其实我们想要hook，就变得非常容易，只要我们修改pre-commit为可执行文件，并在里边按照example嵌入执行代码即可。&lt;/p&gt;

&lt;p&gt;这一步，早就有人帮我们做了，那就是&lt;a href=&quot;https://pre-commit.com/#install&quot;&gt;pre-commit&lt;/a&gt; 他不仅简单了我们的操作，并且起到了脚本lint代码分离的效果，他通过.pre-commit-config.yaml 文件中的配置，在执行git commit时候执行&lt;a href=&quot;https://pre-commit.com/#install&quot;&gt;pre-commit&lt;/a&gt; 脚本，再而执行到安装的pre-commit代码里，进行clone .pre-commit-config.yaml里配置的repo，以及分析，执行对应的hook代码。&lt;/p&gt;

&lt;p&gt;接下来简单的介绍一下&lt;a href=&quot;https://pre-commit.com/#install&quot;&gt;pre-commit&lt;/a&gt; 相关的东西：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装&lt;/p&gt;

    &lt;p&gt;Mac 推荐使用：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install pre-commit&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;其他安装：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip install pre-commit&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda install -c conda-forge pre-commit&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;配置&lt;/p&gt;

    &lt;p&gt;安装完pre-commit之后，在.git 同级目录，添加.pre-commit-config.yaml 文件，则可支持pre-commit&lt;/p&gt;

    &lt;p&gt;.pre-commit-config.yaml的相关配置：&lt;/p&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;repos&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;   &lt;span class=&quot;na&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://github.com/pre-commit/pre-commit-hooks&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;rev&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v2.3.0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;   &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;check-yaml&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;   &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;end-of-file-fixer&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;   &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;trailing-whitespace&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;   &lt;span class=&quot;na&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://github.com/psf/black&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;rev&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;21.12b0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;   &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;black&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;注意点：rev: 不再支持commit hash id， 只支持tag&lt;/p&gt;

    &lt;p&gt;具体参考：https://pre-commit.com/#plugins&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建一个自己的hook&lt;/p&gt;

    &lt;p&gt;一个hook必须要包含a .pre-commit-hooks.yaml 文件，这个文件是告诉pre-commit，这个hook库里包含的hook id等信息…&lt;/p&gt;

    &lt;p&gt;大概张这个样子…&lt;/p&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;   &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;trailing-whitespace&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Trim Trailing Whitespace&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;This hook trims trailing whitespace.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;trailing-whitespace-fixer&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;python&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;​		hooks 仓库，支持很多种语言，每种语言包含的文件也不太一样，比如script （shell脚本）必须entry参		数给一个相对路径的shell脚本；比如python，必须要执行pip install .（及包括setup.py或者		pyproject.toml）以及entry一般在setup.py 里的console_scripts或者scripts配置的。&lt;/p&gt;

&lt;p&gt;​	&lt;a href=&quot;https://pre-commit.com/#script&quot;&gt;了解更多&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;objective-c-lint&quot;&gt;Objective-C Lint&lt;/h3&gt;

&lt;p&gt;上面提到现存在两种lint，&lt;a href=&quot;https://oclint.org/&quot;&gt;oc-lint&lt;/a&gt;/ infer。&lt;/p&gt;

&lt;h4 id=&quot;oc-lint&quot;&gt;&lt;a href=&quot;https://oclint.org/&quot;&gt;oc-lint&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;安装： &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew tap oclint/formulae&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;​			&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;	 brew install oclint&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;​			&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*// 安装xcpretty* gem install xcpretty&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;先简单介绍一下OC lint：OC lint 是通过编译之后的产物 compile_commands.json 去分析的，所以必要的是我们执行oc-lint必须要build。然后在完成之后会以自动打开一个html分析结果。&lt;/p&gt;

&lt;p&gt;我们先说说他的缺点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;必须要编译，首先这是一个漫长的过程，而且对于我们一个不支持模拟器的app（害！因为内部直播的framework没把x86打进去）这是比较致命的可以说&lt;/li&gt;
  &lt;li&gt;他不支持增量查，这样会带出来很多历史遗留问题，对于集成来说，又成了一个比较窘困的问题（你想想，以前多少可能有问题的代码，这集成都得改，不得改个三天三夜的😁）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;接下来我们说说他的优点：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. oc-lint 不仅查了不规范的代码，而且查了可能会导致问题的坏味道代码
1. oc-lint 对于代码严重程度做了等级分化，并且以html的方式打开，更加的直观
1. oc-lint支持自定义规则，和修改规则
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当然，对于1.2的缺点，已经有了一些方案解决，&lt;a href=&quot;https://github.com/shulong-apple/fast-oclint&quot;&gt;了解更多&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;后面会尝试集成到pre-commit hook, 敬请期待…&lt;/p&gt;

&lt;h4 id=&quot;infer&quot;&gt;&lt;a href=&quot;https://infer.liaohuqiu.net/docs/getting-started.html&quot;&gt;infer&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;安装: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install infer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;​			可以选择下载安装包安装，&lt;a href=&quot;https://infer.liaohuqiu.net/docs/getting-started.html&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Infer 是facebook提供的一个lint 库&lt;/p&gt;

&lt;p&gt;缺点：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	1. 貌似infer 也需要编译工程
	1. 不支持自定义规则
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;优点：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 支持多种检测，包括空指针、内存泄漏等等的检测
1. 支持增量检测
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;具体我也没有太多研究，需要深入研究的，&lt;a href=&quot;https://fbinfer.com/docs/analyzing-apps-or-projects&quot;&gt;请参考&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;objective-clint-自制hook-&quot;&gt;&lt;a href=&quot;https://github.com/HaoXianSen/Objective-CLint&quot;&gt;Objective-CLint 自制hook &lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;这个库是我基于SpaceCommand三方库，做的pre-commit hook，简单的介绍一下：&lt;/p&gt;

&lt;p&gt;SpaceCommand是基于clang-format 制作的代码规范工具，而且写了一些自定义规则，用来检测clang-format忽略或者有歧义的部分。它支持了检测不规范代码，并给出终端提示；而且提供了一键格式化所有有问题的代码。&lt;/p&gt;

&lt;p&gt;那么Objective-CLint 在它的基础上，1. 我显示了将它配置成一个可以pre-commit集成的hook，2. 增加了可视化diff 到html，自动打开 3. 去掉了一键格式化 5. 修改自定义规则，使得适用更加广泛。&lt;/p&gt;

&lt;p&gt;具体内容介绍，请移步到&lt;a href=&quot;https://haoxiansen.github.io/2022/09/14/Objective_CLint.html&quot;&gt;个人博客Objective-CLint&lt;/a&gt; 或者移步到&lt;a href=&quot;https://github.com/HaoXianSen/Objective-CLint&quot;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;到此，我们对于OC代码已经有了好几种方案，我选择了容易集成且轻量级的自制hook。&lt;/p&gt;

&lt;h3 id=&quot;swift-lint&quot;&gt;Swift Lint&lt;/h3&gt;

&lt;h4 id=&quot;swiftlint&quot;&gt;&lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;swiftLint&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;​	Swift 代码毫无疑问，我们就可以使用SwiftLint去集成。swiftLint 已经为我们提供了pre-commit hook，我	们可以直接使用，当然也可以fork，修改规则使用&lt;/p&gt;

&lt;p&gt;​	具体请查看github：https://github.com/realm/SwiftLint&lt;/p&gt;

&lt;h3 id=&quot;集成&quot;&gt;集成&lt;/h3&gt;

&lt;p&gt;到此为止，我们所有的lint 工具 以及hook 工具已经齐全，即 pre-commit + Objective-CLint + SwiftLint!&lt;/p&gt;

&lt;p&gt;Ok, 当然我们还有一些工作量需要做，为了团队更好的集成，我们添加检测安装脚本位于pod pre_install, 目的在于自动检测是否安装了pre-commit，以及自动安装pre-commit。&lt;/p&gt;

&lt;p&gt;下面是检测脚本：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;正在检查安装必要工具...&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 检测是否安装了homebrew&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; brew &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;✅homebrew 已经安装&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else 
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;正在安装brew...&quot;&lt;/span&gt;
    /bin/bash &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'✅安装完成homebrew 🍺🍺🍺 /n'&lt;/span&gt;
   
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 检测是否安装了pre-commit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; pre-commit&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;✅pre-commit 已经安装&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;正在安装pre-commit...&quot;&lt;/span&gt;
    brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pre-commit
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'✅安装完成pre-commit 🍺🍺🍺/n'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi


if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.pre-commit-config.yaml&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[31m❎文件 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.pre-commit-config.yaml&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; 不存在， 请添加.pre-commit-config.yaml&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;pre-commit &lt;span class=&quot;nb&quot;&gt;install
echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[36m ...................所有工具都安装成功😁😁😁 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ok, 我们把它集成到pod中，当然没有使用pod管理的，直接执行这个脚本即可。把下面的脚本嵌入到podfile中&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pre_install&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;installer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;sb&quot;&gt;`sh check_tools.sh`&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Pod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;UI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;添加.pre-commit-config.yaml&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;fail_fast&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;repos&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://github.com/HaoXianSen/Objective-CLint.git&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;rev&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v0.0.4&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;objc-lint&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;objc-format&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;format-objc-hook&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;script&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;require_serial&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;verbose&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://github.com/realm/SwiftLint&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;rev&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.49.1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;swiftlint&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;OK，这样我们整个集成就完成了。&lt;/p&gt;

&lt;p&gt;当然swiftLint的配置不一定是适用于我们的，比如我们想report为html、或者添加一些自定义的规则等等，就需要我们fork一份swiftLint，做一些自己的适配。上面的swiftLint就使用自己的repo以及自己tag就好了。&lt;/p&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

&lt;p&gt;到此为止，我们可以说整iOS 混合发开的代码规范lint就集成完事了。&lt;/p&gt;

&lt;p&gt;当然我们还有优化的部分，首先自己的lint 只是规范检测，不想OCLint 那样面积大，并且输出也不是很哇塞。后续我们可以继续使用fast-oclint的方案，既能使用OCLint的强大，又能不用编译还支持增量编译。&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="iOS" /><summary type="html">前提 code review 是我们工作中可以说必不可少的一环，一方面能够提早的发现代码中不合理的部分、或者不稳定、架构不合理的部分，提高代码的质量；另外一方面能，更够让团队的知识共享，互相熟悉业务需求，以及团队写的好的部分。OK，作为code review最早最基础的一环，可以说是代码规范。如果人工进行代码规范的维护，难免会遗漏，而且会花费时间在这部分。 所以，针对这种情况，我们可以做的是，做一个lint帮助我们检测不规范的代码，OK，下面就lint，开始研究！ Lint 时机 我们熟知的Objective-C lint，有OClint、Infer; swift 有swiftLint，首先我们先不考虑这个几个lint的问题，我们先考虑一个重要的问题，lint应该放到什么阶段？ 放到build时期？ 这种方案被我们pass掉了，首先放到build时期会增加我们的build时间，第二事实上我们需要嵌入脚本到项目里，可能会影响到打包。 放到git push 之后gitlab pipeline时期？ 这种方案不出意外也被pass了，首先如果知道pipeline job的人都知道，我们需要配置runner, 本身来说配置加集成，可能就不是一个容易的事情，而且对于我来说我觉得这个事情，太晚了，lint 有问题，还等再次push…. 放到pre commit时期？ Ok, 对于比较合适的事情，我觉得就是在precommit时期，因为基于git 管理，我们代码每次改动之后都需要commit，那么commit事情去做lint这件事情，是非常合适的，如果存在问题，那么就修改之后，再次commit。时间上，时机上我觉得都很合适 ok， 对于 lint 放到哪个时机的问题，我们已经确定–pre commit时期 pre-commit git 其实为我们提供了很多种的hook方式，随便打开一个.git文件夹就可以看到一堆的hooks example文件，如下： OK，所以其实我们想要hook，就变得非常容易，只要我们修改pre-commit为可执行文件，并在里边按照example嵌入执行代码即可。 这一步，早就有人帮我们做了，那就是pre-commit 他不仅简单了我们的操作，并且起到了脚本lint代码分离的效果，他通过.pre-commit-config.yaml 文件中的配置，在执行git commit时候执行pre-commit 脚本，再而执行到安装的pre-commit代码里，进行clone .pre-commit-config.yaml里配置的repo，以及分析，执行对应的hook代码。 接下来简单的介绍一下pre-commit 相关的东西： 安装 Mac 推荐使用：brew install pre-commit 其他安装：pip install pre-commit conda install -c conda-forge pre-commit 配置 安装完pre-commit之后，在.git 同级目录，添加.pre-commit-config.yaml 文件，则可支持pre-commit .pre-commit-config.yaml的相关配置： repos: - repo: https://github.com/pre-commit/pre-commit-hooks rev: v2.3.0 hooks: - id: check-yaml - id: end-of-file-fixer - id: trailing-whitespace - repo: https://github.com/psf/black rev: 21.12b0 hooks: - id: black 注意点：rev: 不再支持commit hash id， 只支持tag 具体参考：https://pre-commit.com/#plugins 创建一个自己的hook 一个hook必须要包含a .pre-commit-hooks.yaml 文件，这个文件是告诉pre-commit，这个hook库里包含的hook id等信息… 大概张这个样子… - id: trailing-whitespace name: Trim Trailing Whitespace description: This hook trims trailing whitespace. entry: trailing-whitespace-fixer language: python types: [text] ​ hooks 仓库，支持很多种语言，每种语言包含的文件也不太一样，比如script （shell脚本）必须entry参 数给一个相对路径的shell脚本；比如python，必须要执行pip install .（及包括setup.py或者 pyproject.toml）以及entry一般在setup.py 里的console_scripts或者scripts配置的。 ​ 了解更多 Objective-C Lint 上面提到现存在两种lint，oc-lint/ infer。 oc-lint 安装： brew tap oclint/formulae ​ brew install oclint ​ *// 安装xcpretty* gem install xcpretty 先简单介绍一下OC lint：OC lint 是通过编译之后的产物 compile_commands.json 去分析的，所以必要的是我们执行oc-lint必须要build。然后在完成之后会以自动打开一个html分析结果。 我们先说说他的缺点： 必须要编译，首先这是一个漫长的过程，而且对于我们一个不支持模拟器的app（害！因为内部直播的framework没把x86打进去）这是比较致命的可以说 他不支持增量查，这样会带出来很多历史遗留问题，对于集成来说，又成了一个比较窘困的问题（你想想，以前多少可能有问题的代码，这集成都得改，不得改个三天三夜的😁） 接下来我们说说他的优点： 1. oc-lint 不仅查了不规范的代码，而且查了可能会导致问题的坏味道代码 1. oc-lint 对于代码严重程度做了等级分化，并且以html的方式打开，更加的直观 1. oc-lint支持自定义规则，和修改规则 当然，对于1.2的缺点，已经有了一些方案解决，了解更多 后面会尝试集成到pre-commit hook, 敬请期待… infer 安装: brew install infer ​ 可以选择下载安装包安装，下载地址 Infer 是facebook提供的一个lint 库 缺点： 1. 貌似infer 也需要编译工程 1. 不支持自定义规则 优点： 1. 支持多种检测，包括空指针、内存泄漏等等的检测 1. 支持增量检测 具体我也没有太多研究，需要深入研究的，请参考 Objective-CLint 自制hook 这个库是我基于SpaceCommand三方库，做的pre-commit hook，简单的介绍一下： SpaceCommand是基于clang-format 制作的代码规范工具，而且写了一些自定义规则，用来检测clang-format忽略或者有歧义的部分。它支持了检测不规范代码，并给出终端提示；而且提供了一键格式化所有有问题的代码。 那么Objective-CLint 在它的基础上，1. 我显示了将它配置成一个可以pre-commit集成的hook，2. 增加了可视化diff 到html，自动打开 3. 去掉了一键格式化 5. 修改自定义规则，使得适用更加广泛。 具体内容介绍，请移步到个人博客Objective-CLint 或者移步到github 到此，我们对于OC代码已经有了好几种方案，我选择了容易集成且轻量级的自制hook。 Swift Lint swiftLint ​ Swift 代码毫无疑问，我们就可以使用SwiftLint去集成。swiftLint 已经为我们提供了pre-commit hook，我 们可以直接使用，当然也可以fork，修改规则使用 ​ 具体请查看github：https://github.com/realm/SwiftLint 集成 到此为止，我们所有的lint 工具 以及hook 工具已经齐全，即 pre-commit + Objective-CLint + SwiftLint! Ok, 当然我们还有一些工作量需要做，为了团队更好的集成，我们添加检测安装脚本位于pod pre_install, 目的在于自动检测是否安装了pre-commit，以及自动安装pre-commit。 下面是检测脚本： #!/bin/bash echo &quot;正在检查安装必要工具...&quot; # 检测是否安装了homebrew if [ &quot;$(command -v brew -v)&quot; ]; then echo &quot;✅homebrew 已经安装&quot; else echo &quot;正在安装brew...&quot; /bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot; echo '✅安装完成homebrew 🍺🍺🍺 /n' fi # 检测是否安装了pre-commit if [ &quot;$(command -v pre-commit)&quot; ]; then echo &quot;✅pre-commit 已经安装&quot; else echo &quot;正在安装pre-commit...&quot; brew install pre-commit echo '✅安装完成pre-commit 🍺🍺🍺/n' fi if [ ! -f &quot;.pre-commit-config.yaml&quot; ]; then echo &quot;\033[31m❎文件 \&quot;.pre-commit-config.yaml\&quot; 不存在， 请添加.pre-commit-config.yaml\033[0m&quot; exit 1 fi pre-commit install echo &quot;\033[36m ...................所有工具都安装成功😁😁😁 \033[0m&quot; Ok, 我们把它集成到pod中，当然没有使用pod管理的，直接执行这个脚本即可。把下面的脚本嵌入到podfile中 pre_install do |installer| flag = `sh check_tools.sh` Pod::UI.puts flag end 添加.pre-commit-config.yaml fail_fast: false repos: - repo: https://github.com/HaoXianSen/Objective-CLint.git rev: v0.0.4 hooks: - id: objc-lint name: objc-format entry: format-objc-hook language: script require_serial: true verbose: true - repo: https://github.com/realm/SwiftLint rev: 0.49.1 hooks: - id: swiftlint OK，这样我们整个集成就完成了。 当然swiftLint的配置不一定是适用于我们的，比如我们想report为html、或者添加一些自定义的规则等等，就需要我们fork一份swiftLint，做一些自己的适配。上面的swiftLint就使用自己的repo以及自己tag就好了。 总结 到此为止，我们可以说整iOS 混合发开的代码规范lint就集成完事了。 当然我们还有优化的部分，首先自己的lint 只是规范检测，不想OCLint 那样面积大，并且输出也不是很哇塞。后续我们可以继续使用fast-oclint的方案，既能使用OCLint的强大，又能不用编译还支持增量编译。 ​</summary></entry><entry><title type="html">我想搞个mac app 插件，仅仅为了Typroa插入几行预置文字</title><link href="http://localhost:4000/2022/08/26/%E6%88%91%E6%83%B3%E6%90%9E%E4%B8%AATyproa%E7%9A%84%E6%8F%92%E4%BB%B6-%E4%BB%85%E4%BB%85%E4%B8%BA%E4%BA%86%E6%8F%92%E5%85%A5%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81.html" rel="alternate" type="text/html" title="我想搞个mac app 插件，仅仅为了Typroa插入几行预置文字" /><published>2022-08-26T00:00:00+08:00</published><updated>2022-08-26T00:00:00+08:00</updated><id>http://localhost:4000/2022/08/26/%E6%88%91%E6%83%B3%E6%90%9E%E4%B8%AATyproa%E7%9A%84%E6%8F%92%E4%BB%B6,%E4%BB%85%E4%BB%85%E4%B8%BA%E4%BA%86%E6%8F%92%E5%85%A5%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81</id><content type="html" xml:base="http://localhost:4000/2022/08/26/%E6%88%91%E6%83%B3%E6%90%9E%E4%B8%AATyproa%E7%9A%84%E6%8F%92%E4%BB%B6-%E4%BB%85%E4%BB%85%E4%B8%BA%E4%BA%86%E6%8F%92%E5%85%A5%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81.html">&lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;

&lt;p&gt;为了更好的维持我的博客系统，想着之后的博客都发布于github.io， 那么如果你有搭建过github.io 那么相比都知道YAML, 通过MARK down 中插入YAML FORMAT 语言，我们可以控制博客的标题、评论等等。。那么简单来说就是我不想用Typora每次建立一个新blog，都需要繁琐的插入那一堆YAML，比如&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;title: position、anchorPoint、frame理解

tags: iOS

key: 107

# article_header:

# type: cover

# image:

# src: https://user-images.githubusercontent.com/8369671/80915045-153ff780-8d82-11ea-9acf-6ccbf2b05d9d.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;OK，所以首先呢我把Typora的所有文档看了一遍，没有入口可配置。那咋办？&lt;/p&gt;

&lt;p&gt;想法也就从这诞生了，我能不能写个插件，在Typora 新建文件的时候，手动插入预置文字，接下来记录插件开发过程，成功不成功最后见分晓！&lt;/p&gt;

&lt;h2 id=&quot;着手干查资料&quot;&gt;着手干（查资料）&lt;/h2&gt;

&lt;p&gt;通过查看资料，我们需要两个东西辅助，1.&lt;a href=&quot;https://www.jianshu.com/p/1e3fe0a8c048&quot;&gt;class-dump)&lt;/a&gt; 2. &lt;a href=&quot;https://github.com/Tyilo/insert_dylib&quot;&gt;insert_dylib&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; 基本原理就是：&lt;/p&gt;

&lt;p&gt;Mach-O 二进制文件Load Commands中的 LC_LOAD_DYLIB 标头告诉 macOS在执行期间要加载哪些动态库 (dylib)。所以我们只需要在二进制文件中添加一条LC_LOAD_DYLIB就可以。而&lt;a href=&quot;https://github.com/Tyilo/insert_dylib&quot;&gt;insert_dylib&lt;/a&gt;工具已经为我们实现了添加的功能&lt;/p&gt;

&lt;p&gt;接下来一个一个解释：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;class-dump&lt;/p&gt;

    &lt;p&gt;通过名字我们大概能猜到这是一个什么工具，类似一个解释类的工具，确实他也是干这个的，正确安装之后，我们可以通过class-dump [option] Mach-o文件，输出mac app的暴露类的相关属性，OK，我们用的就是class-dump -H Mach-o文件 输出头文件，我们通过头文件查看mac app源头文件，然后找到需要hook的类进行hook（具体的安装可以点击超链接查看）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;insert_dylib&lt;/p&gt;

    &lt;p&gt;这个工具，可以帮助我们插入一个dylib 到Mach-o二进制文件中，所以也就是说我们需要做一个framework然后通过这个库，嵌入到app的Mach-o二进制文件里&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ok，工具都全乎了，接下来的时间，就是需要我们做一个framework，这个framework是用专门hook的动态库。&lt;/p&gt;

&lt;p&gt;当然hook，Objective-C里就是runtime里的Swizzing Method搞定，这个iOS 开发应该都用过不少（常规技术）&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;具体实践&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;new project - framework&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/:Users:haoyh02:Library:Application%20Support:typora-user-images:image-20220829140442928.png&quot; alt=&quot;image-20220829140442928&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;我们新建一个framework，用来做动态库&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;查看class-dump的类，hook 找到的类做功能&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/:Users:haoyh02:Library:Application%20Support:typora-user-images:image-20220829140836995.png&quot; alt=&quot;image-20220829140836995&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;cd 到 /Applications/Typora.app/Contents/MacOS/&lt;/p&gt;

        &lt;p&gt;使用class-dump -H /Applications/Typora.app/Contents/MacOS/Typora -o /Users/haoyh02/Desktop/typora.h 输出头文件解析到桌面目标目录，如下&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/:Users:haoyh02:Library:Application%20Support:typora-user-images:image-20220829141211348.png&quot; alt=&quot;image-20220829141211348&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;ok，接下来我就需要分析头文件，找出自己需要hook的类，以及方法，当然这个过程才是最漫长的，而且是不断的尝试出来的。具体的分析我就不赘述了，就是看代码呗。&lt;/p&gt;

        &lt;p&gt;最终我们找到了LibraryCommands 类，他大概就是一些文件命令处理，比如新建文件，当然我们hook的是这个类，但是具体文件处理则是Document这个类，集成于NSDocument。&lt;/p&gt;

        &lt;p&gt;具体看代码&lt;/p&gt;

        &lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  TyporaAutoRejectHook.m&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  TyporaAutoReject&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  Created by 郝玉鸿 on 2022/8/26.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
      
&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;
#import &amp;lt;AppKit/AppKit.h&amp;gt;
#import &quot;TyporaAutoReject.h&quot;
#import &amp;lt;objc/runtime.h&amp;gt;
&lt;/span&gt;      
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ty_hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swizzClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swizzSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class_getInstanceMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;originClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swizzledMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class_getInstanceMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;swizzClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swizzSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;originalMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swizzledMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;method_exchangeImplementations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;originalMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swizzledMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSDocument&lt;/span&gt;
      
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
      
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LibraryCommands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSObject&lt;/span&gt;
      
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
      
&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Typora&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      
&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hookThunder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ty_hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objc_getClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LibraryCommands&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hook_newDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hook_newDocument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hook_newDocument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
          
    &lt;span class=&quot;n&quot;&gt;dispatch_after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatch_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DISPATCH_TIME_NOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;LibraryCommands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LibraryCommands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;injectString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;---&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;title: &amp;lt;xxxx&amp;gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;tags: [iOS] [MAC] [Plugin]&amp;gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;key: xxx &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# article_header:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# type: cover &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# image:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; # src: https://user-images.githubusercontent.com/8369671/80915045-153ff780-8d82-11ea-9acf-6ccbf2b05d9d.png &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;---&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;injectString&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forKeyPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
              
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;writeToURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileURL&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ofType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;performSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSSelectorFromString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;syncToClient&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;performSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSSelectorFromString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;syncToSelf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
      
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__attribute__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSObject&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hookThunder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;很简单，思路就是hook到新建文件的方法，然后2s之后，文件内插入一段预置文字。然后同步界面。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;copy framework的产出（编译，products/xxx.framework）到mac app 下的contents/MacOS&lt;/p&gt;

        &lt;p&gt;OK，接下来我们需要build工程，得到products/xxx.framework 产物。xcode13 隐藏了products，我们只需要打开pbxproj文件, 修改mainGroup 和 productRefGroup 一样（本身也是一样的，我们只需要copy再次保存就好了），保存就可以出现，也可以到DerivedData里去找&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/:Users:haoyh02:Library:Application%20Support:typora-user-images:image-20220829141839812.png&quot; alt=&quot;image-20220829141839812&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/:Users:haoyh02:Library:Application%20Support:typora-user-images:image-20220829141945528.png&quot; alt=&quot;image-20220829141945528&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;然后copy framework，到/Applications/Typora.app/Contents/ 下即可。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;执行insert_dylib 命令&lt;/p&gt;

        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ./insert_dylib &lt;span class=&quot;nt&quot;&gt;--all-yes&lt;/span&gt; /Applications/Typora.app/Contents/MacOS/TyporaAutoReject.framework/TyporaAutoReject Typora_backup Typora 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;执行这个命令后，即可嵌入framework&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;重新打开应用&lt;/p&gt;

        &lt;p&gt;一定要重新打开应用，否则不生效（这个其实不用想也是这样，毕竟我们是编译型程序）&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;ok，当然这个步骤很麻烦，为了我们能更好的重复验证，我写了脚本执行，这些命令&lt;/p&gt;

        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      
&lt;span class=&quot;nb&quot;&gt;sudo rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; /Applications/Typora.app/Contents/MacOS/TyporaAutoReject.framework
&lt;span class=&quot;nb&quot;&gt;sudo mv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; /Users/haoyh02/Library/Developer/Xcode/DerivedData/TyporaAutoReject-duhvxgpyrtuykugkepbmpmhciiyh/Build/Products/Debug/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /Applications/Typora.app/Contents/MacOS/
./insert_dylib &lt;span class=&quot;nt&quot;&gt;--all-yes&lt;/span&gt; /Applications/Typora.app/Contents/MacOS/TyporaAutoReject.framework/TyporaAutoReject Typora_backup Typora
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;​	至此，我们为Typora做的小插件，完全生效了。我们来看一下效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/:Users:haoyh02:Desktop:result.png&quot; alt=&quot;result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/1e3fe0a8c048&quot;&gt;安装class-dump&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lemonlie.com/develop-plug-in-for-mac-app/&quot;&gt;如何为macOS应用开发插件&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Tyilo/insert_dylib&quot;&gt;insert_dylib&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nygard/class-dump&quot;&gt;class-dump&lt;/a&gt;&lt;/p&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="iOS" /><category term="MAC" /><category term="Plugin" /><summary type="html">前提 为了更好的维持我的博客系统，想着之后的博客都发布于github.io， 那么如果你有搭建过github.io 那么相比都知道YAML, 通过MARK down 中插入YAML FORMAT 语言，我们可以控制博客的标题、评论等等。。那么简单来说就是我不想用Typora每次建立一个新blog，都需要繁琐的插入那一堆YAML，比如 title: position、anchorPoint、frame理解 tags: iOS key: 107 # article_header: # type: cover # image: # src: https://user-images.githubusercontent.com/8369671/80915045-153ff780-8d82-11ea-9acf-6ccbf2b05d9d.png OK，所以首先呢我把Typora的所有文档看了一遍，没有入口可配置。那咋办？ 想法也就从这诞生了，我能不能写个插件，在Typora 新建文件的时候，手动插入预置文字，接下来记录插件开发过程，成功不成功最后见分晓！ 着手干（查资料） 通过查看资料，我们需要两个东西辅助，1.class-dump) 2. insert_dylib  基本原理就是： Mach-O 二进制文件Load Commands中的 LC_LOAD_DYLIB 标头告诉 macOS在执行期间要加载哪些动态库 (dylib)。所以我们只需要在二进制文件中添加一条LC_LOAD_DYLIB就可以。而insert_dylib工具已经为我们实现了添加的功能 接下来一个一个解释： class-dump 通过名字我们大概能猜到这是一个什么工具，类似一个解释类的工具，确实他也是干这个的，正确安装之后，我们可以通过class-dump [option] Mach-o文件，输出mac app的暴露类的相关属性，OK，我们用的就是class-dump -H Mach-o文件 输出头文件，我们通过头文件查看mac app源头文件，然后找到需要hook的类进行hook（具体的安装可以点击超链接查看） insert_dylib 这个工具，可以帮助我们插入一个dylib 到Mach-o二进制文件中，所以也就是说我们需要做一个framework然后通过这个库，嵌入到app的Mach-o二进制文件里 ok，工具都全乎了，接下来的时间，就是需要我们做一个framework，这个framework是用专门hook的动态库。 当然hook，Objective-C里就是runtime里的Swizzing Method搞定，这个iOS 开发应该都用过不少（常规技术） 具体实践 new project - framework 我们新建一个framework，用来做动态库 查看class-dump的类，hook 找到的类做功能 cd 到 /Applications/Typora.app/Contents/MacOS/ 使用class-dump -H /Applications/Typora.app/Contents/MacOS/Typora -o /Users/haoyh02/Desktop/typora.h 输出头文件解析到桌面目标目录，如下 ok，接下来我就需要分析头文件，找出自己需要hook的类，以及方法，当然这个过程才是最漫长的，而且是不断的尝试出来的。具体的分析我就不赘述了，就是看代码呗。 最终我们找到了LibraryCommands 类，他大概就是一些文件命令处理，比如新建文件，当然我们hook的是这个类，但是具体文件处理则是Document这个类，集成于NSDocument。 具体看代码 // // TyporaAutoRejectHook.m // TyporaAutoReject // // Created by 郝玉鸿 on 2022/8/26. // #import &amp;lt;Foundation/Foundation.h&amp;gt; #import &amp;lt;AppKit/AppKit.h&amp;gt; #import &quot;TyporaAutoReject.h&quot; #import &amp;lt;objc/runtime.h&amp;gt; void ty_hook(Class originClass, SEL originSelector, Class swizzClass, SEL swizzSelector) { Method originalMethod = class_getInstanceMethod(originClass, originSelector); Method swizzledMethod = class_getInstanceMethod(swizzClass, swizzSelector); if(originalMethod &amp;amp;&amp;amp; swizzledMethod) { method_exchangeImplementations(originalMethod, swizzledMethod); } } @interface Document : NSDocument @end @interface LibraryCommands: NSObject @property(retain) Document *document; @end @implementation NSObject (Typora) + (void)hookThunder{ ty_hook(objc_getClass(&quot;LibraryCommands&quot;), @selector(createFile:), [self class], @selector(hook_newDocument:)); } - (void)hook_newDocument:(id)args { [self hook_newDocument:args]; dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{ LibraryCommands *commans = (LibraryCommands *)self; Document *document = commans.document; NSString *injectString = @&quot;---\ntitle: &amp;lt;xxxx&amp;gt; \ntags: [iOS] [MAC] [Plugin]&amp;gt; \nkey: xxx \n# article_header:\n# type: cover \n# image:\n # src: https://user-images.githubusercontent.com/8369671/80915045-153ff780-8d82-11ea-9acf-6ccbf2b05d9d.png \n---&quot;; [document setValue:injectString forKeyPath:@&quot;content&quot;]; [document writeToURL:document.fileURL ofType:document.fileType error:nil]; [document performSelector:NSSelectorFromString(@&quot;syncToClient&quot;)]; [document performSelector:NSSelectorFromString(@&quot;syncToSelf&quot;)]; }); } @end static void __attribute__((constructor)) initialize(void) { [NSObject hookThunder]; } 很简单，思路就是hook到新建文件的方法，然后2s之后，文件内插入一段预置文字。然后同步界面。 copy framework的产出（编译，products/xxx.framework）到mac app 下的contents/MacOS OK，接下来我们需要build工程，得到products/xxx.framework 产物。xcode13 隐藏了products，我们只需要打开pbxproj文件, 修改mainGroup 和 productRefGroup 一样（本身也是一样的，我们只需要copy再次保存就好了），保存就可以出现，也可以到DerivedData里去找 然后copy framework，到/Applications/Typora.app/Contents/ 下即可。 执行insert_dylib 命令 ./insert_dylib --all-yes /Applications/Typora.app/Contents/MacOS/TyporaAutoReject.framework/TyporaAutoReject Typora_backup Typora 执行这个命令后，即可嵌入framework 重新打开应用 一定要重新打开应用，否则不生效（这个其实不用想也是这样，毕竟我们是编译型程序） ok，当然这个步骤很麻烦，为了我们能更好的重复验证，我写了脚本执行，这些命令 sudo rm -d -r /Applications/Typora.app/Contents/MacOS/TyporaAutoReject.framework sudo mv -f /Users/haoyh02/Library/Developer/Xcode/DerivedData/TyporaAutoReject-duhvxgpyrtuykugkepbmpmhciiyh/Build/Products/Debug/* /Applications/Typora.app/Contents/MacOS/ ./insert_dylib --all-yes /Applications/Typora.app/Contents/MacOS/TyporaAutoReject.framework/TyporaAutoReject Typora_backup Typora ​ ​ 至此，我们为Typora做的小插件，完全生效了。我们来看一下效果： ​ 参考 安装class-dump 如何为macOS应用开发插件 insert_dylib class-dump</summary></entry><entry><title type="html">position、anchorPoint、frame理解</title><link href="http://localhost:4000/2022/05/01/00_position_anchorPoint_frame.html" rel="alternate" type="text/html" title="position、anchorPoint、frame理解" /><published>2022-05-01T00:00:00+08:00</published><updated>2022-05-01T00:00:00+08:00</updated><id>http://localhost:4000/2022/05/01/00_position_anchorPoint_frame</id><content type="html" xml:base="http://localhost:4000/2022/05/01/00_position_anchorPoint_frame.html">&lt;h4 id=&quot;前情提要&quot;&gt;前情提要&lt;/h4&gt;

&lt;p&gt;​	     最近在学2d游戏框架SpriteKit，其中使用大量的AnchorPoint/position 来确定Node的位置，那本身来说对于anchorPoint、position的概念、以及他们之间互相起到什么作用，对于view又会造成什么影响，都是比较模糊的，所以再定位Node布局来说，就是一顿迷糊，正好工作这么多年了，还是对于这些基础的还是模糊，是有点说不过去了，所以我决定认真分析一下Frame、bounds、position、anchorPoint之间的关系，以及他们对显示的影响。&lt;/p&gt;

&lt;h4 id=&quot;进入正文&quot;&gt;进入正文&lt;/h4&gt;

&lt;p&gt;frame： 表示了一个view 在其superView坐标系具体位置，那么他的参照物是其父view&lt;/p&gt;

&lt;p&gt;bounds：表示了一个view的本地坐标系下，参照物是自身，他的修改不会改变frame，但是会改变其的子view的位置，为什么呢？稍后我会画图解释&lt;/p&gt;

&lt;p&gt;position：这是CALayer的属性，我的理解是他的物理中心点，他和anchorPoint有着密切的关系&lt;/p&gt;

&lt;p&gt;anchorPoint：也是CALayer的属性，翻译过来叫做锚点，也就是固定的点，他的坐标系是以unit 坐标系定义，左上角为(0,0)， 右上角(1, 0), 左下角(0,1), 右下角(1,1)&lt;/p&gt;

&lt;p&gt;好！概念都说完了，但是这个概念只能让我们理解一部分，并不能真实的理解到他们的具体作用，下面我们用图的概念去一点点理解&lt;/p&gt;

&lt;h4 id=&quot;深入&quot;&gt;深入&lt;/h4&gt;

&lt;p&gt;frame 没什么可说的，我们以前frame布局，用的再熟练不过了，他就是view在其父view中位置&lt;/p&gt;

&lt;p&gt;如果我们修改了frame，那么就会直接影响到他的位置和大小。&lt;/p&gt;

&lt;p&gt;对于bounds 来说，他是自身的坐标系，如果我们修改了他的origin，那么他的子view就会以这个点为为原点来计算位置，比如：一个红色的view，我们设置了他的bounds.origin为（-20， 20），那么他就会改变自己的本地坐标系的原点为-20，-20，那么当我们设置一个蓝色的子viewframe的origin为（0，0），那么这个子view就会向右下偏移20，因为当前左上角的原点为-20，-20，（0，0）点的位置在右下角偏移20的位置，所以最后看到蓝色view并不是靠着左上角。文字描述有点。。。费劲，还是想办法画图吧。。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/image-20210929181748669.png&quot; alt=&quot;image-20210929181748669&quot; /&gt;&lt;/p&gt;

&lt;p&gt;大概就是这样的一个过程，所以bounds.origin的修改会导致子view的位置改变，那么修改bounds的size呢？ 改变自己bounds的size会使自身的大小发生变化，从而影响frame，不会影响父view&lt;/p&gt;

&lt;p&gt;那么对于position 和anchorPoint，我受一片他人的文章影响，有一个很恰当的比喻：&lt;/p&gt;

&lt;p&gt;一幅画，anchorPoint就相当于在这个画的四个角或者中间沾一块胶（或者你有高档的什么固定的都行。。），而position就相当于这块胶要沾在哪个位置，这么来说的话他应该是和anchor重合的，比如说position为墙壁的某个点，anchorPoint为画的中间（0.5，0.5），那么画就会沾到position的位置，我们view默认的position就是view的中心点相对于父view的点，所以如果我们改变anchor的话就类比刚才图片的问题，是那个角或者中点固定到这个position点而已。&lt;/p&gt;

&lt;p&gt;也画个图吧。。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/image-20210929183736725.png&quot; alt=&quot;image-20210929183736725&quot; /&gt;&lt;/p&gt;

&lt;p&gt;基本上通过上边的介绍，我想你和我都掌握这几个属性的真正含义。&lt;/p&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="iOS" /><summary type="html">前情提要 ​ 最近在学2d游戏框架SpriteKit，其中使用大量的AnchorPoint/position 来确定Node的位置，那本身来说对于anchorPoint、position的概念、以及他们之间互相起到什么作用，对于view又会造成什么影响，都是比较模糊的，所以再定位Node布局来说，就是一顿迷糊，正好工作这么多年了，还是对于这些基础的还是模糊，是有点说不过去了，所以我决定认真分析一下Frame、bounds、position、anchorPoint之间的关系，以及他们对显示的影响。 进入正文 frame： 表示了一个view 在其superView坐标系具体位置，那么他的参照物是其父view bounds：表示了一个view的本地坐标系下，参照物是自身，他的修改不会改变frame，但是会改变其的子view的位置，为什么呢？稍后我会画图解释 position：这是CALayer的属性，我的理解是他的物理中心点，他和anchorPoint有着密切的关系 anchorPoint：也是CALayer的属性，翻译过来叫做锚点，也就是固定的点，他的坐标系是以unit 坐标系定义，左上角为(0,0)， 右上角(1, 0), 左下角(0,1), 右下角(1,1) 好！概念都说完了，但是这个概念只能让我们理解一部分，并不能真实的理解到他们的具体作用，下面我们用图的概念去一点点理解 深入 frame 没什么可说的，我们以前frame布局，用的再熟练不过了，他就是view在其父view中位置 如果我们修改了frame，那么就会直接影响到他的位置和大小。 对于bounds 来说，他是自身的坐标系，如果我们修改了他的origin，那么他的子view就会以这个点为为原点来计算位置，比如：一个红色的view，我们设置了他的bounds.origin为（-20， 20），那么他就会改变自己的本地坐标系的原点为-20，-20，那么当我们设置一个蓝色的子viewframe的origin为（0，0），那么这个子view就会向右下偏移20，因为当前左上角的原点为-20，-20，（0，0）点的位置在右下角偏移20的位置，所以最后看到蓝色view并不是靠着左上角。文字描述有点。。。费劲，还是想办法画图吧。。。 大概就是这样的一个过程，所以bounds.origin的修改会导致子view的位置改变，那么修改bounds的size呢？ 改变自己bounds的size会使自身的大小发生变化，从而影响frame，不会影响父view 那么对于position 和anchorPoint，我受一片他人的文章影响，有一个很恰当的比喻： 一幅画，anchorPoint就相当于在这个画的四个角或者中间沾一块胶（或者你有高档的什么固定的都行。。），而position就相当于这块胶要沾在哪个位置，这么来说的话他应该是和anchor重合的，比如说position为墙壁的某个点，anchorPoint为画的中间（0.5，0.5），那么画就会沾到position的位置，我们view默认的position就是view的中心点相对于父view的点，所以如果我们改变anchor的话就类比刚才图片的问题，是那个角或者中点固定到这个position点而已。 也画个图吧。。。 基本上通过上边的介绍，我想你和我都掌握这几个属性的真正含义。</summary></entry></feed>