<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2020-08-07T20:50:02+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">harry’s blog</title><subtitle>harry's technology blog 
</subtitle><author><name>harry</name><email>harry_c2016@163.com</email></author><entry><title type="html">scylladb关注点</title><link href="http://localhost:4000/2020/07/27/00_scylladb.html" rel="alternate" type="text/html" title="scylladb关注点" /><published>2020-07-27T00:00:00+08:00</published><updated>2020-07-27T00:00:00+08:00</updated><id>http://localhost:4000/2020/07/27/00_scylladb</id><content type="html" xml:base="http://localhost:4000/2020/07/27/00_scylladb.html">&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
&lt;p&gt;最近看到scylladb的与其他db的比较文档比较全面, 其中与cassandra对比更是超出一截, 所以过来看看,&lt;/p&gt;

&lt;p&gt;其是基于C++ seastar&lt;sup&gt;9,10&lt;/sup&gt;重写的column-base nosql, 实现了CAP中的AP,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;masterless, hash ring是P&lt;/li&gt;
  &lt;li&gt;replication_factor和WAL commit log是A, 因此at least one, 所以不能做到C&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/88890629-79386600-d274-11ea-8143-0daf1c770a49.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;CAP theorem&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;version&quot;&gt;Version&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;scylladb, 4.1.2&lt;/li&gt;
  &lt;li&gt;scylla-monitoring, 3.4.2&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;architect&quot;&gt;Architect&lt;/h1&gt;
&lt;h2 id=&quot;read-and-write-flow&quot;&gt;read and write flow&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/88525458-32a4fa80-d02d-11ea-966f-dce5263bcb5c.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;read and write flow, credit: intel&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;虚线表示read op在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key cache&lt;/code&gt;没有命中, 此时会搜索partition summary来确定partition index, index通过compression offset map定位data在sstable的位置&lt;sup&gt;15&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;partitioning&quot;&gt;partitioning&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/88526954-2de14600-d02f-11ea-92a1-e0d2ef2d096b.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;a hash ring to find necessary nodes&lt;sup&gt;5&lt;/sup&gt;
当扩缩容node时, 整个拓扑结构会发生变化, 此时会触发自动rebalance&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;数据的倾斜与否, 取决于hash(key)的均匀度&lt;/p&gt;

&lt;p&gt;PRIMARY KEY有2个作用,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;partition keys of the table lets you group rows on the same replica set, determines where data is stored on a given node in the cluster, 指定节点&lt;/li&gt;
  &lt;li&gt;clustering columns control how those &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rows&lt;/code&gt; are stored on the replica/node, 在step1的指定节点上的数据存储&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;PRIMARY KEY ((a, b), c, d) : a and b compose the partition key, and c is the clustering column.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;mapping&quot;&gt;mapping&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;scylladb&lt;/th&gt;
      &lt;th&gt;mysql&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;cluster&lt;/td&gt;
      &lt;td&gt;instance&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;keyspace&lt;/td&gt;
      &lt;td&gt;database&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;table&lt;/td&gt;
      &lt;td&gt;table&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;type&lt;/td&gt;
      &lt;td&gt;自定义数据类型&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;addon&quot;&gt;AddOn&lt;/h2&gt;
&lt;p&gt;Scylla Manager &amp;amp; Scylla Monitoring Stack
监控各个节点, 查看集群&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/88510862-73454980-d016-11ea-92e7-2dccb912ff29.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;overview, credit: scylladb&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/88789201-07efa900-d1c9-11ea-9560-ef3ab4d40d69.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;overview2, port usage, credit: scylladb&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/88511383-480f2a00-d017-11ea-82ff-09f58eddb44f.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;ingest from batch and streaming&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;install&quot;&gt;Install&lt;/h1&gt;
&lt;h2 id=&quot;scylladb&quot;&gt;scylladb&lt;/h2&gt;
&lt;p&gt;下面根据相关步骤, 来setup一个简单的cluster,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;准备, create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; with following content,
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; version: &lt;span class=&quot;s1&quot;&gt;'3'&lt;/span&gt;
    
 services:
   some-scylla:
     image: scylladb/scylla
     container_name: some-scylla
    
   some-scylla2:
     image: scylladb/scylla
     container_name: some-scylla2
     &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;: &lt;span class=&quot;nt&quot;&gt;--seeds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;some-scylla
    
   some-scylla3:
     image: scylladb/scylla
     container_name: some-scylla3
     &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;: &lt;span class=&quot;nt&quot;&gt;--seeds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;some-scylla
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;啊, 😤, 如果用compose的话, scylla在prometheus是up不起来的, 所以还是老老实实回归best practice的步骤&lt;sup&gt;5&lt;/sup&gt;
 &lt;img src=&quot;https://user-images.githubusercontent.com/8369671/88785802-3d45c800-d1c4-11ea-97d7-f12efc42f95a.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
    &lt;blockquote&gt;
      &lt;p&gt;failed with cmopose&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;即,&lt;/p&gt;
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; some-scylla scylladb/scylla
 docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; some-scylla2 scylladb/scylla &lt;span class=&quot;nt&quot;&gt;--seeds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;docker inspect &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt; some-scylla&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
 docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; some-scylla3 scylladb/scylla &lt;span class=&quot;nt&quot;&gt;--seeds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;docker inspect &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt; some-scylla&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/88787205-18525480-d1c6-11ea-86bd-7bf5f87e072c.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
    &lt;blockquote&gt;
      &lt;p&gt;passed with single-command&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;启动
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;检查
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker exec -it some-scylla scylla --version&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker logs some-scylla | tail&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;nodetool
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker exec -it some-scylla nodetool status&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker exec -it some-scylla nodetool describecluster&lt;/code&gt;, 查看集群信息&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker exec -it some-scylla nodetool help&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;cqlsh
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker exec -it some-scylla cqlsh&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe tables;&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select * from system_schema.scylla_tables limit 13;&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;查看/修改集群配置&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker exec -it some-scylla grep --color 'cluster' /etc/scylla/scylla.yaml&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker exec -it some-scylla /bin/bash&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker exec -it some-scylla cqlsh UPDATE system.local SET cluster_name = 'my_cluster' where key='local';&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;monitoring&quot;&gt;monitoring&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;download
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; wget https://github.com/scylladb/scylla-monitoring/archive/scylla-monitoring-3.4.2.tar.gz
 &lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xvf&lt;/span&gt; scylla-monitoring-3.4.2.tar.gz
 &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;scylla-monitoring-scylla-monitoring-3.4.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;准备, create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scylla-monitoring-scylla-monitoring-3.4.2/prometheus/scylla_servers.yml&lt;/code&gt;
 ```shell
    &lt;ul&gt;
      &lt;li&gt;targets:
      - 172.17.0.2:9180
      - 172.17.0.3:9180
      - 172.17.0.4:9180
labels:
     cluster: ‘Test Cluster’
     dc: datacenter1
 ```
 配置value要对号入座, Use the nodetool to validate them&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;启动
    &lt;ul&gt;
      &lt;li&gt;当在&lt;a href=&quot;https://github.com/scylladb/scylla-monitoring/issues/313#issuecomment-380192083&quot;&gt;mac&lt;/a&gt;启动时, 会找不到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readlink&lt;/code&gt;, 所以将下面的command加到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;start-all.sh&lt;/code&gt;的头
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alias readlink=greadlink&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sh start-all.sh&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;检查
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:3000/&lt;/code&gt;
 &lt;img src=&quot;https://user-images.githubusercontent.com/8369671/88889353-8c4a3680-d272-11ea-9501-9a66b09a9f57.png&quot; alt=&quot;image&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;数据访问
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; some-scylla cqlsh
 CREATE KEYSPACE my_keyspace WITH replication &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'class'&lt;/span&gt;:&lt;span class=&quot;s1&quot;&gt;'SimpleStrategy'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'replication_factor'&lt;/span&gt; : 3&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 USE my_keyspace&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 CREATE TABLE students &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id &lt;/span&gt;int PRIMARY KEY, name text, courses map&amp;lt;text, double&amp;gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
 DESCRIBE KEYSPACE my_keyspace&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 DESCRIBE TABLE students&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
 INSERT INTO students &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;, name, courses&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; VALUES &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1, &lt;span class=&quot;s1&quot;&gt;'张三'&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'语文'&lt;/span&gt;: 71.1, &lt;span class=&quot;s1&quot;&gt;'数学'&lt;/span&gt;: 82, &lt;span class=&quot;s1&quot;&gt;'英语'&lt;/span&gt;: 93.3&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 INSERT INTO students &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;, name, courses&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; VALUES &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2, &lt;span class=&quot;s1&quot;&gt;'李四'&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'语文'&lt;/span&gt;: 91.1, &lt;span class=&quot;s1&quot;&gt;'数学'&lt;/span&gt;: 82, &lt;span class=&quot;s1&quot;&gt;'英语'&lt;/span&gt;: 73.3&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; from students&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/88889119-2fe71700-d272-11ea-93a5-064e0a626e4a.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;manager&quot;&gt;manager&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;安装
    &lt;ul&gt;
      &lt;li&gt;可以通过docker来&lt;a href=&quot;https://hub.docker.com/r/scylladb/scylla-manager&quot;&gt;安装&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;功能
    &lt;ul&gt;
      &lt;li&gt;一个集群管理系统, 通过她可以使用CLI来handle一系列task&lt;sup&gt;8&lt;/sup&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;benchmark&quot;&gt;benchmark&lt;/h2&gt;
&lt;h3 id=&quot;cassandra-stress13&quot;&gt;cassandra-stress&lt;sup&gt;13&lt;/sup&gt;&lt;/h3&gt;
&lt;p&gt;在前面setup了一个3节点的cluster, 为了使用这个bm tool, 另起一个新的cluster为了与之隔离,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;new bm cluster
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker run --name some-scylla-bm-only -d scylladb/scylla&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;enter bm cluster
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker exec -it some-scylla-bm-only /bin/bash&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;run bm cmd
    &lt;ul&gt;
      &lt;li&gt;写
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cassandra-stress write n=1000000 -rate threads=64 -node 172.17.0.2 -graph file=graph.html title=awesome revision=bm-write&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cassandra-stress write no-warmup n=1000000 -rate threads=64 -node 172.17.0.2 -graph file=graph.html title=awesome revision=bm-no_warmup_write&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;读
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cassandra-stress read n=1000000 -rate threads=64 -node 172.17.0.2 -graph file=graph.html title=awesome revision=bm-read&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cassandra-stress read no-warmup n=1000000 -rate threads=64 -node 172.17.0.2 -graph file=graph.html title=awesome revision=bm-no_warmup_read&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;混合
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cassandra-stress mixed ratio\(write=1,read=1\) n=1000000 -rate threads=64 -node 172.17.0.2 -graph file=graph.html title=awesome revision=bm-mixed&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cassandra-stress mixed ratio\(write=1,read=1\) no-warmup n=1000000 -rate threads=64 -node 172.17.0.2 -graph file=graph.html title=awesome revision=bm-no_warmup_mixed&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/88947113-a90e5a80-d2c2-11ea-9b60-a35017c25533.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;write&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/88947164-bcb9c100-d2c2-11ea-9a9e-d0f20fbb2594.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;read&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/88947193-c7745600-d2c2-11ea-999d-c28b6ec87d70.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;mixed&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;scylla-bench14&quot;&gt;scylla-bench&lt;sup&gt;14&lt;/sup&gt;&lt;/h3&gt;
&lt;p&gt;go client级别的benchmark工具,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;install
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go get github.com/scylladb/scylla-bench&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;run bm cmd
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scylla-bench -workload sequential -mode write -nodes 127.0.0.1:9042&lt;/code&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  mode write
  Results
  Time &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;avg&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:	 4m33.860611808s
  Total ops:	 1000000
  Total rows:	 1000000
  Operations/s:	 3746.9349633592005
  Rows/s:		 3746.9349633592005
  Latency:
    max:		 1.160773631s
    99.9th:	 21.037055ms
    99th:		 10.813439ms
    95th:		 6.750207ms
    90th:		 5.439487ms
    median:	 2.949119ms
    mean:		 3.464229ms        
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scylla-bench -workload sequential -mode read -nodes 127.0.0.1:9042&lt;/code&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  mode &lt;span class=&quot;nb&quot;&gt;read
  &lt;/span&gt;Results
  Time &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;avg&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:	 4m11.740969357s
  Total ops:	 1000000
  Total rows:	 1000000
  Operations/s:	 3972.3625839390193
  Rows/s:		 3972.3625839390193
  Latency:
    max:		 1.015545855s
    99.9th:	 21.626879ms
    99th:		 12.124159ms
    95th:		 7.766015ms
    90th:		 6.324223ms
    median:	 3.473407ms
    mean:		 4.024346ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;因为这个bm cmd我是运行在host, 所以docker run some-scylla时, 我加上了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-p 9042:9042&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;connector&quot;&gt;connector&lt;/h2&gt;
&lt;h3 id=&quot;spark-batch-writerreader16&quot;&gt;spark batch writer/reader&lt;sup&gt;16&lt;/sup&gt;&lt;/h3&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.apache.spark&quot;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;spark-sql&quot;&lt;/span&gt;                 &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;3.0.0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;com.datastax.spark&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;spark-cassandra-connector&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2.5.1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;joda-time&quot;&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;joda-time&quot;&lt;/span&gt;                  &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2.10.6&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.github.chenfh5.scylladb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.datastax.spark.connector._&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.spark.SparkConf&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.spark.sql.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SaveMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SparkSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SparkExample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keyspaceName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;my_keyspace&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;students&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scylladbHostIP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ss&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;conf&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SparkConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spark.app.name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;scylladb_writer_test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spark.master&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;local[1]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spark.cassandra.connection.host&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scylladbHostIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;SparkSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;getOrCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ss.implicits._&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rdd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;sparkContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;cassandraTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyspaceName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tableName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;rdd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;sparkContext&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;我的名字是%d&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;语文&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;数学&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;spark&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))))&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;toDF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;courses&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;write&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.apache.spark.sql.cassandra&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;keyspace&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyspaceName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;table&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tableName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SaveMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;read&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.apache.spark.sql.cassandra&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;keyspace&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyspaceName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;table&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tableName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;load&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id &amp;gt; 2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;courses&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;truncate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;begin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;flink-streaming-writer17&quot;&gt;flink streaming writer&lt;sup&gt;17&lt;/sup&gt;&lt;/h3&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.apache.flink&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;flink-streaming-scala&quot;&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.11.1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;org.apache.flink&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;flink-clients&quot;&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.11.1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;org.apache.flink&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;flink-connector-cassandra&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.11.1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.github.chenfh5.scylladb&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.flink.streaming.api.TimeCharacteristic&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.flink.streaming.api.scala.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;StreamExecutionEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.flink.streaming.connectors.cassandra.CassandraSink&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.collection.JavaConverters._&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FlinkExample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keyspaceName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;my_keyspace&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;students&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scylladbHostIP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;StreamExecutionEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;getExecutionEnvironment&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;setStreamTimeCharacteristic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TimeCharacteristic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;EventTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;setParallelism&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;fromCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;我的名字是%d&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;语文&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;数学&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;flink&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;asJava&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// need convert scala to java pojo&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;keyBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;CassandraSink&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;addSink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;setQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;INSERT INTO %s.%s(id, name, courses) values (?, ?, ?);&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyspaceName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tableName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;setHost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scylladbHostIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;setParallelism&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;begin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;golang-reader18&quot;&gt;golang reader&lt;sup&gt;18&lt;/sup&gt;&lt;/h3&gt;
&lt;p&gt;类似于scylla-bench&lt;sup&gt;14&lt;/sup&gt;的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DoReadsFromTable()&lt;/code&gt;或者&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DoScanTable()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

    &lt;span class=&quot;s&quot;&gt;&quot;github.com/gocql/gocql&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;keyspaceName&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;my_keyspace&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tableName&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;students&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scylladbHostIP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// connect to the cluster&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cluster&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gocql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewCluster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scylladbHostIP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Keyspace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyspaceName&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// define schema&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;courses&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;// list records&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SELECT id, name, courses FROM %s where token(id) &amp;lt;= ? LIMIT 10&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tableName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;12&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;courses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;student:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;courses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.scylladb.com/&quot;&gt;scylladb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.dynamicyield.com/article/turning-messy-data-into-a-gold-mine/&quot;&gt;Turning messy data into a gold mine using Spark, Flink, and ScyllaDB&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://software.intel.com/content/www/us/en/develop/articles/making-nosql-databases-persistent-memory-aware-the-apache-cassandra-example.html&quot;&gt;Making NoSQL Databases Persistent-Memory-Aware: The Apache Cassandra* Example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.scylladb.com/download/?platform=docker&quot;&gt;Scylla Download Center&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.scylladb.com/operating-scylla/procedures/tips/best_practices_scylla_on_docker/#id15&quot;&gt;Best Practices for Running Scylla on Docker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/scylladb/scylla&quot;&gt;docker hub scylladb doc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.scylladb.com/operating-scylla/monitoring/3.4/monitoring_stack/#install-scylla-monitoring&quot;&gt;install monitoring&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.scylladb.com/operating-scylla/manager/2.1/sctool/#cluster-add&quot;&gt;manager CLI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/30738569&quot;&gt;异步编程框架Seastar介绍&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/news/270650#:~:text=Seastar%E6%98%AF%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8E%E5%88%86,%E5%92%8C%E4%BD%8E%E5%BB%B6%E8%BF%9F%E7%9A%84%E7%9B%AE%E6%A0%87%E3%80%82&quot;&gt;现代硬件上的高性能C＋异步框架-SeaStar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/mytobaby00/article/details/80375196&quot;&gt;ScyllaDB调研分析&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.infoq.cn/article/8rleTIWSBo2Y7MpfsMlW&quot;&gt;通用高效的数据修复方法：Row level repair&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.datastax.com/en/dse/6.0/dse-admin/datastax_enterprise/tools/toolsCStress.html&quot;&gt;cassandra-stress&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scylladb/scylla-bench&quot;&gt;scylla-bench&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.datastax.com/en/archived/cassandra/3.0/cassandra/dml/dmlAboutReads.html&quot;&gt;How Cassandra reads and writes data&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/datastax/spark-cassandra-connector#documentation&quot;&gt;spark-cassandra-connector&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/connectors/cassandra.html&quot;&gt;Flink Cassandra Connector&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scylladb/gocql&quot;&gt;Scylla Go Driver&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="scylladb" /><summary type="html">Overview 最近看到scylladb的与其他db的比较文档比较全面, 其中与cassandra对比更是超出一截, 所以过来看看, 其是基于C++ seastar9,10重写的column-base nosql, 实现了CAP中的AP, masterless, hash ring是P replication_factor和WAL commit log是A, 因此at least one, 所以不能做到C CAP theorem Version scylladb, 4.1.2 scylla-monitoring, 3.4.2 Architect read and write flow read and write flow, credit: intel 虚线表示read op在key cache没有命中, 此时会搜索partition summary来确定partition index, index通过compression offset map定位data在sstable的位置15 partitioning a hash ring to find necessary nodes5 当扩缩容node时, 整个拓扑结构会发生变化, 此时会触发自动rebalance 数据的倾斜与否, 取决于hash(key)的均匀度 PRIMARY KEY有2个作用, partition keys of the table lets you group rows on the same replica set, determines where data is stored on a given node in the cluster, 指定节点 clustering columns control how those rows are stored on the replica/node, 在step1的指定节点上的数据存储 PRIMARY KEY ((a, b), c, d) : a and b compose the partition key, and c is the clustering column. mapping scylladb mysql cluster instance keyspace database table table type 自定义数据类型 AddOn Scylla Manager &amp;amp; Scylla Monitoring Stack 监控各个节点, 查看集群 overview, credit: scylladb overview2, port usage, credit: scylladb ingest from batch and streaming2 Install scylladb 下面根据相关步骤, 来setup一个简单的cluster, 准备, create docker-compose.yml with following content, version: '3' services: some-scylla: image: scylladb/scylla container_name: some-scylla some-scylla2: image: scylladb/scylla container_name: some-scylla2 command: --seeds=some-scylla some-scylla3: image: scylladb/scylla container_name: some-scylla3 command: --seeds=some-scylla 啊, 😤, 如果用compose的话, scylla在prometheus是up不起来的, 所以还是老老实实回归best practice的步骤5 failed with cmopose 即, docker run --name some-scylla scylladb/scylla docker run --name some-scylla2 scylladb/scylla --seeds=&quot;$(docker inspect --format='' some-scylla)&quot; docker run --name some-scylla3 scylladb/scylla --seeds=&quot;$(docker inspect --format='' some-scylla)&quot; passed with single-command 启动 docker-compose up -d 检查 docker exec -it some-scylla scylla --version docker logs some-scylla | tail nodetool docker exec -it some-scylla nodetool status docker exec -it some-scylla nodetool describecluster, 查看集群信息 docker exec -it some-scylla nodetool help cqlsh docker exec -it some-scylla cqlsh describe tables; select * from system_schema.scylla_tables limit 13; 查看/修改集群配置 docker exec -it some-scylla grep --color 'cluster' /etc/scylla/scylla.yaml docker exec -it some-scylla /bin/bash docker exec -it some-scylla cqlsh UPDATE system.local SET cluster_name = 'my_cluster' where key='local'; monitoring download wget https://github.com/scylladb/scylla-monitoring/archive/scylla-monitoring-3.4.2.tar.gz tar -xvf scylla-monitoring-3.4.2.tar.gz cd scylla-monitoring-scylla-monitoring-3.4.2 准备, create scylla-monitoring-scylla-monitoring-3.4.2/prometheus/scylla_servers.yml ```shell targets: - 172.17.0.2:9180 - 172.17.0.3:9180 - 172.17.0.4:9180 labels: cluster: ‘Test Cluster’ dc: datacenter1 ``` 配置value要对号入座, Use the nodetool to validate them 启动 当在mac启动时, 会找不到readlink, 所以将下面的command加到start-all.sh的头 alias readlink=greadlink sh start-all.sh 检查 http://localhost:3000/ 数据访问 docker exec -it some-scylla cqlsh CREATE KEYSPACE my_keyspace WITH replication = {'class':'SimpleStrategy', 'replication_factor' : 3}; USE my_keyspace; CREATE TABLE students (id int PRIMARY KEY, name text, courses map&amp;lt;text, double&amp;gt;); DESCRIBE KEYSPACE my_keyspace; DESCRIBE TABLE students; INSERT INTO students (id, name, courses) VALUES (1, '张三', {'语文': 71.1, '数学': 82, '英语': 93.3}); INSERT INTO students (id, name, courses) VALUES (2, '李四', {'语文': 91.1, '数学': 82, '英语': 73.3}); select * from students; manager 安装 可以通过docker来安装 功能 一个集群管理系统, 通过她可以使用CLI来handle一系列task8 benchmark cassandra-stress13 在前面setup了一个3节点的cluster, 为了使用这个bm tool, 另起一个新的cluster为了与之隔离, new bm cluster docker run --name some-scylla-bm-only -d scylladb/scylla enter bm cluster docker exec -it some-scylla-bm-only /bin/bash run bm cmd 写 cassandra-stress write n=1000000 -rate threads=64 -node 172.17.0.2 -graph file=graph.html title=awesome revision=bm-write cassandra-stress write no-warmup n=1000000 -rate threads=64 -node 172.17.0.2 -graph file=graph.html title=awesome revision=bm-no_warmup_write 读 cassandra-stress read n=1000000 -rate threads=64 -node 172.17.0.2 -graph file=graph.html title=awesome revision=bm-read cassandra-stress read no-warmup n=1000000 -rate threads=64 -node 172.17.0.2 -graph file=graph.html title=awesome revision=bm-no_warmup_read 混合 cassandra-stress mixed ratio\(write=1,read=1\) n=1000000 -rate threads=64 -node 172.17.0.2 -graph file=graph.html title=awesome revision=bm-mixed cassandra-stress mixed ratio\(write=1,read=1\) no-warmup n=1000000 -rate threads=64 -node 172.17.0.2 -graph file=graph.html title=awesome revision=bm-no_warmup_mixed write read mixed scylla-bench14 go client级别的benchmark工具, install go get github.com/scylladb/scylla-bench run bm cmd scylla-bench -workload sequential -mode write -nodes 127.0.0.1:9042 mode write Results Time (avg): 4m33.860611808s Total ops: 1000000 Total rows: 1000000 Operations/s: 3746.9349633592005 Rows/s: 3746.9349633592005 Latency: max: 1.160773631s 99.9th: 21.037055ms 99th: 10.813439ms 95th: 6.750207ms 90th: 5.439487ms median: 2.949119ms mean: 3.464229ms scylla-bench -workload sequential -mode read -nodes 127.0.0.1:9042 mode read Results Time (avg): 4m11.740969357s Total ops: 1000000 Total rows: 1000000 Operations/s: 3972.3625839390193 Rows/s: 3972.3625839390193 Latency: max: 1.015545855s 99.9th: 21.626879ms 99th: 12.124159ms 95th: 7.766015ms 90th: 6.324223ms median: 3.473407ms mean: 4.024346ms 因为这个bm cmd我是运行在host, 所以docker run some-scylla时, 我加上了 -p 9042:9042 connector spark batch writer/reader16 &quot;org.apache.spark&quot; %% &quot;spark-sql&quot; % &quot;3.0.0&quot;, &quot;com.datastax.spark&quot; %% &quot;spark-cassandra-connector&quot; % &quot;2.5.1&quot;, &quot;joda-time&quot; % &quot;joda-time&quot; % &quot;2.10.6&quot;, package io.github.chenfh5.scylladb import com.datastax.spark.connector._ import org.apache.spark.SparkConf import org.apache.spark.sql.{SaveMode, SparkSession} object SparkExample { private val keyspaceName = &quot;my_keyspace&quot; private val tableName = &quot;students&quot; private val scylladbHostIP = &quot;127.0.0.1&quot; private val ss = { val conf = new SparkConf() conf.set(&quot;spark.app.name&quot;, &quot;scylladb_writer_test&quot;) conf.set(&quot;spark.master&quot;, &quot;local[1]&quot;) conf.set(&quot;spark.cassandra.connection.host&quot;, scylladbHostIP) SparkSession.builder().config(conf).getOrCreate() } import ss.implicits._ def scan(): Unit = { val rdd = ss.sparkContext.cassandraTable(keyspaceName, tableName) rdd.take(11).foreach(println) } def writer(): Unit = { val df = ss.sparkContext .parallelize((10 to 13).map(i =&amp;gt; (i, &quot;我的名字是%d&quot;.format(i), Map(&quot;语文&quot; -&amp;gt; (i + 0.1), &quot;数学&quot; -&amp;gt; (i + 0.2), &quot;spark&quot; -&amp;gt; (i + 0.3))))) .toDF(&quot;id&quot;, &quot;name&quot;, &quot;courses&quot;) df.show() df.write .format(&quot;org.apache.spark.sql.cassandra&quot;) .option(&quot;keyspace&quot;, keyspaceName) .option(&quot;table&quot;, tableName) .mode(SaveMode.Append) .save() } def read(): Unit = { val df = ss.read .format(&quot;org.apache.spark.sql.cassandra&quot;) .option(&quot;keyspace&quot;, keyspaceName) .option(&quot;table&quot;, tableName) .load .filter(&quot;id &amp;gt; 2&quot;) .select(&quot;id&quot;, &quot;name&quot;, &quot;courses&quot;) df.show(11, truncate = false) } def main(args: Array[String]): Unit = { println(&quot;begin&quot;) scan() writer() read() println(&quot;end&quot;) } } flink streaming writer17 &quot;org.apache.flink&quot; %% &quot;flink-streaming-scala&quot; % &quot;1.11.1&quot;, &quot;org.apache.flink&quot; %% &quot;flink-clients&quot; % &quot;1.11.1&quot;, &quot;org.apache.flink&quot; %% &quot;flink-connector-cassandra&quot; % &quot;1.11.1&quot;, package io.github.chenfh5.scylladb import org.apache.flink.streaming.api.TimeCharacteristic import org.apache.flink.streaming.api.scala.{StreamExecutionEnvironment, _} import org.apache.flink.streaming.connectors.cassandra.CassandraSink import scala.collection.JavaConverters._ object FlinkExample { private val keyspaceName = &quot;my_keyspace&quot; private val tableName = &quot;students&quot; private val scylladbHostIP = &quot;127.0.0.1&quot; def writer(): Unit = { val env = StreamExecutionEnvironment.getExecutionEnvironment env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime) env.setParallelism(1) val source = env.fromCollection((20 to 25).map(i =&amp;gt; (i, &quot;我的名字是%d&quot;.format(i), Map(&quot;语文&quot; -&amp;gt; (i + 0.1), &quot;数学&quot; -&amp;gt; (i + 0.2), &quot;flink&quot; -&amp;gt; (i + 0.3)).asJava))) // need convert scala to java pojo val result = source.filter(e =&amp;gt; e._1 &amp;lt; 24).keyBy(_._1) CassandraSink .addSink(result) .setQuery(&quot;INSERT INTO %s.%s(id, name, courses) values (?, ?, ?);&quot;.format(keyspaceName, tableName)) .setHost(scylladbHostIP) .build() result.print().setParallelism(1) env.execute() } def main(args: Array[String]): Unit = { println(&quot;begin&quot;) writer() println(&quot;end&quot;) } } golang reader18 类似于scylla-bench14的DoReadsFromTable()或者DoScanTable() package main import ( &quot;fmt&quot; &quot;github.com/gocql/gocql&quot; ) const ( keyspaceName = &quot;my_keyspace&quot; tableName = &quot;students&quot; scylladbHostIP = &quot;127.0.0.1&quot; ) func main() { // connect to the cluster cluster := gocql.NewCluster(scylladbHostIP) cluster.Keyspace = keyspaceName session, _ := cluster.CreateSession() defer session.Close() // define schema var id int var name string var courses map[string]float64 // list records iter := session.Query(fmt.Sprintf(&quot;SELECT id, name, courses FROM %s where token(id) &amp;lt;= ? LIMIT 10&quot;, tableName), &quot;12&quot;).Iter() for iter.Scan(&amp;amp;id, &amp;amp;name, &amp;amp;courses) { fmt.Println(&quot;student:&quot;, id, name, courses) } if err := iter.Close(); err != nil { fmt.Println(err) } } Reference scylladb Turning messy data into a gold mine using Spark, Flink, and ScyllaDB Making NoSQL Databases Persistent-Memory-Aware: The Apache Cassandra* Example Scylla Download Center Best Practices for Running Scylla on Docker docker hub scylladb doc install monitoring manager CLI 异步编程框架Seastar介绍 现代硬件上的高性能C＋异步框架-SeaStar ScyllaDB调研分析 通用高效的数据修复方法：Row level repair cassandra-stress scylla-bench How Cassandra reads and writes data spark-cassandra-connector Flink Cassandra Connector Scylla Go Driver</summary></entry><entry><title type="html">stock buy and sell point</title><link href="http://localhost:4000/2020/07/20/00_stock_buy_sell_point.html" rel="alternate" type="text/html" title="stock buy and sell point" /><published>2020-07-20T00:00:00+08:00</published><updated>2020-07-20T00:00:00+08:00</updated><id>http://localhost:4000/2020/07/20/00_stock_buy_sell_point</id><content type="html" xml:base="http://localhost:4000/2020/07/20/00_stock_buy_sell_point.html">&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
&lt;p&gt;将cmoney&lt;sup&gt;1&lt;/sup&gt;里面的技术指标内容整理一下, 使之适合自己观看习惯,&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;短线用小时线粒度, 长线用日线粒度&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;线&quot;&gt;线&lt;/h1&gt;
&lt;p&gt;注意用线是小时线还是日线,&lt;/p&gt;

&lt;h2 id=&quot;ma&quot;&gt;MA&lt;/h2&gt;
&lt;p&gt;短线投资人可用5MA + 20MA 看多空走势,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;收盘价 &amp;gt; 5MA &amp;gt; 20MA: 多头市场
    &lt;ul&gt;
      &lt;li&gt;通常表示短线呈现上涨趋势的多头市场&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;收盘价 &amp;lt; 5MA &amp;lt; 20MA: 空头市场
    &lt;ul&gt;
      &lt;li&gt;通常表示短线呈现下跌趋势的空头市场&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;5MA &amp;lt; 收盘价 &amp;lt; 20MA: 盘整市场
    &lt;ul&gt;
      &lt;li&gt;通常表示短线呈现横向趋势的盘整市场&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;用5MA, 20MA 操作的经验法则,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;当股价&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;跌破5MA&lt;/code&gt;表示短线转弱可以减码卖出&lt;/li&gt;
  &lt;li&gt;一旦&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;跌破20MA&lt;/code&gt;要全部卖出, 退出场外观望&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用均线看多空走势&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;短天期均线在长天期均线之上, 是多头走势&lt;/li&gt;
  &lt;li&gt;长天期均线在短天期均线之上, 是空头走势&lt;/li&gt;
  &lt;li&gt;当股价站上所有均线, 是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;均线多头&lt;/code&gt;排列&lt;/li&gt;
  &lt;li&gt;当股价跌破所有均线, 是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;均线空头&lt;/code&gt;排列&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;kdj&quot;&gt;KDJ&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;当KD指标的K(快线)值由下往上突破D值(金叉), 建议买进做多&lt;/li&gt;
  &lt;li&gt;当KD指标的K值由上往下跌破D值时, 建议卖出做空&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;KD大于80时, 为高档超买讯号, 市场过热, 股价要开始跌了&lt;/li&gt;
  &lt;li&gt;KD小于20时, 为低档超卖讯号, 市场过冷, 股价要开始涨了&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;高档&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;钝化&lt;/code&gt;: KD的K值在80以上连续3天, 未来再涨的机率高&lt;/li&gt;
  &lt;li&gt;低档钝化: KD的K值在20以下连续3天, 未来继续跌的机率高&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;macd&quot;&gt;MACD&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;DIF(快线)开始向下弯, 开始下跌&lt;/li&gt;
  &lt;li&gt;DIF(快线)开始向上掰, 开始上升&lt;/li&gt;
  &lt;li&gt;当然也有钝化现象&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;boll&quot;&gt;BOLL&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;做多时, 股价碰到上轨道, 出场讯号
    &lt;blockquote&gt;

      &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  当你买进股票或做多
  股价碰到上轨道, 要再涨的机会就很小
  这样我们可以选择出场
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;做空时, 股价碰到下轨道, 进场讯号
    &lt;blockquote&gt;

      &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  当股价碰到下轨道
  要再跌的机会就不是那么大
  那就给我们进场的理由
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;多头讯号有三个:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;价格由下向上, 穿越&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;下轨线&lt;/code&gt;时是买进讯号&lt;/li&gt;
  &lt;li&gt;价格由下向上, 穿越&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;中间线&lt;/code&gt;时, 股价可能加速向上, 是加码买进讯号&lt;/li&gt;
  &lt;li&gt;价格在中间线与&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;上轨线&lt;/code&gt;之间, 波动为多头市场, 可做多&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;空头讯号有两个:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;价格在中间线与上轨线间, 由上往下跌破中间线, 为卖出讯号&lt;/li&gt;
  &lt;li&gt;价格在中间线与下轨线之间, 向下波动时为空头市场, 可做空&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;形态学&quot;&gt;形态学&lt;/h1&gt;
&lt;p&gt;注意用线是小时线还是日线,&lt;/p&gt;

&lt;h2 id=&quot;mw形&quot;&gt;M/W形&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/87465394-22f9df00-c647-11ea-8f6f-0c693232f858.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;会跌, M头, credit: cmoney&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/87465409-2a20ed00-c647-11ea-954d-82da25276d3b.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;会升, W底, credit: cmoney&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;头肩&quot;&gt;头肩&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/87464020-00ff5d00-c645-11ea-8596-467ac143988f.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/87464043-09f02e80-c645-11ea-96a0-866addea691c.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;头肩顶, 会跌, credit: cmoney&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/87464098-212f1c00-c645-11ea-8aa3-4ef29570f924.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/87464104-24c2a300-c645-11ea-891c-bb5a70f5cc68.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;头肩底(倒), 会升, credit: cmoney&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;缺口&quot;&gt;缺口&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/87468932-095b9600-c64d-11ea-895d-d4dc758e5b4e.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;会跌, 头部的岛状反转, credit: cmoney&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/87468956-15dfee80-c64d-11ea-94da-7829e9e5200b.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;会升, 底部的岛状反转, credit: cmoney&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;三角旗旗形&quot;&gt;三角旗/旗形&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/87469416-d5cd3b80-c64d-11ea-9b8a-c94bf2703277.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;旗倾斜方向与价格趋势相反, credit: cmoney&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;支撑和压力&quot;&gt;支撑和压力&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/87467796-17a8b280-c64b-11ea-8565-4231c6f5a6cb.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;会跌, 连接至少2个最低点, 真突破支撑就会形成跌势, credit: cmoney&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/87467821-1d05fd00-c64b-11ea-8614-b383ffd4b5c3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;会升, 连接至少2个最高点, 真突破压力就会形成升势, credit: cmoney&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/87467672-ea5c0480-c64a-11ea-80d9-e9d243574fa1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;真突破: &amp;gt;3%价, &amp;gt;30%量, credit: cmoney&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;其他&quot;&gt;其他&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/87570540-631a9980-c6fb-11ea-8124-208fa7d3a2f7.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;会跌, 三只乌鸦(在上升趋势中出现一根大阳线, 接下来连续出现三根阴K线, 日线级别), credit: zhihu晓晓&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/87869957-892f8a80-c9d6-11ea-96c8-f531440b06ed.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;箱型整理, credit: moneynet&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/88033494-06433700-cb72-11ea-9eed-c6ff6e739a11.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;上升楔形, support/下线坡度更大&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/88033520-0fcc9f00-cb72-11ea-8adb-2657d530fb3b.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;下降楔形, resistance/上线坡度更大&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;整理形态: 机构通过洗盘&lt;sup&gt;5&lt;/sup&gt;,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;一边撵走了意志不坚定的投资人, 重新在高位引进了另一批看好后市的投资人(清理出获利筹码, 引进高成本韭菜)&lt;/li&gt;
  &lt;li&gt;一边教育了继续持股的投资人, 不要轻易买卖股票, 长抱不懈才能挣大钱&lt;/li&gt;
  &lt;li&gt;一边摊低了自己的持仓成本(高卖低吸)&lt;/li&gt;
  &lt;li&gt;一石三鸟. 这样机构才能够在高位从容出逃&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;注意&quot;&gt;注意&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;技术分析能判断股价方向, 不能反映真实价值&lt;/li&gt;
  &lt;li&gt;技术分析能提高胜率, 但不是100%会成功&lt;/li&gt;
  &lt;li&gt;市场恐慌时, 技术分析会失去判断方向的能力&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;成交量&quot;&gt;成交量&lt;/h1&gt;
&lt;p&gt;在一个交易日当中, 若一只个股的成交量为150000股, 则表示买方在当日共买进了150000股, 同时卖方也卖出了150000股&lt;sup&gt;3&lt;/sup&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;成交量是多空双方交锋力度的体现. 成交量大, 说明多空双方交锋较为激烈, 这主要发生在价格走势较为激进的时候, 例如快速的上涨、快速的下跌等&lt;/li&gt;
  &lt;li&gt;成交量小, 说明多空双方交锋缓和, 这主要发生在价格走势较为平缓、多空双方分歧不大的时候, 例如横盘的窄幅震荡走势&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;成交量可以有效地揭示主力的市场行为并预示价格走势, 这就是所谓的量在价先. 量在价先是指：在价格走势未见明显变化的情况下, 成交量往往会提前变化, 如果我们可以理解量能这种变化的市场含义, 就可以走在市场的前面, 从而成功地展开低买高卖的操作&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/87882361-1f44ce80-ca32-11ea-81e6-85b3e28592a3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;量价关系, credit: 熊市猎手&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;总之, 上升要量, 下跌未必要量&lt;/p&gt;

&lt;h1 id=&quot;波浪理论&quot;&gt;波浪理论&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/87866160-ced95c80-c9b0-11ea-8350-736c254e4664.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;股价有一个『五波上升、三波下降』的基本规律, credit: cmoney&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;1,3,5升&lt;/li&gt;
  &lt;li&gt;2,4,b回调&lt;/li&gt;
  &lt;li&gt;a,c跌&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cmoney.tw/learn/course/technicals/topic/486&quot;&gt;股票技术面分析&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.moneynet.com.tw/article/4875&quot;&gt;中繼型態圖形1箱型整理&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/29473752&quot;&gt;成交量信号&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/1WY7zr7c3xSEbOJuTcg01g&quot;&gt;成交量信号2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.mbalib.com/wiki/%E6%95%B4%E7%90%86%E5%BD%A2%E6%80%81&quot;&gt;整理形态&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="stock" /><summary type="html">Overview 将cmoney1里面的技术指标内容整理一下, 使之适合自己观看习惯, 短线用小时线粒度, 长线用日线粒度 线 注意用线是小时线还是日线, MA 短线投资人可用5MA + 20MA 看多空走势, 收盘价 &amp;gt; 5MA &amp;gt; 20MA: 多头市场 通常表示短线呈现上涨趋势的多头市场 收盘价 &amp;lt; 5MA &amp;lt; 20MA: 空头市场 通常表示短线呈现下跌趋势的空头市场 5MA &amp;lt; 收盘价 &amp;lt; 20MA: 盘整市场 通常表示短线呈现横向趋势的盘整市场 用5MA, 20MA 操作的经验法则, 当股价跌破5MA表示短线转弱可以减码卖出 一旦跌破20MA要全部卖出, 退出场外观望 用均线看多空走势 短天期均线在长天期均线之上, 是多头走势 长天期均线在短天期均线之上, 是空头走势 当股价站上所有均线, 是均线多头排列 当股价跌破所有均线, 是均线空头排列 KDJ 当KD指标的K(快线)值由下往上突破D值(金叉), 建议买进做多 当KD指标的K值由上往下跌破D值时, 建议卖出做空 KD大于80时, 为高档超买讯号, 市场过热, 股价要开始跌了 KD小于20时, 为低档超卖讯号, 市场过冷, 股价要开始涨了 高档钝化: KD的K值在80以上连续3天, 未来再涨的机率高 低档钝化: KD的K值在20以下连续3天, 未来继续跌的机率高 MACD DIF(快线)开始向下弯, 开始下跌 DIF(快线)开始向上掰, 开始上升 当然也有钝化现象 BOLL 做多时, 股价碰到上轨道, 出场讯号 当你买进股票或做多 股价碰到上轨道, 要再涨的机会就很小 这样我们可以选择出场 做空时, 股价碰到下轨道, 进场讯号 当股价碰到下轨道 要再跌的机会就不是那么大 那就给我们进场的理由 多头讯号有三个: 价格由下向上, 穿越下轨线时是买进讯号 价格由下向上, 穿越中间线时, 股价可能加速向上, 是加码买进讯号 价格在中间线与上轨线之间, 波动为多头市场, 可做多 空头讯号有两个: 价格在中间线与上轨线间, 由上往下跌破中间线, 为卖出讯号 价格在中间线与下轨线之间, 向下波动时为空头市场, 可做空 形态学 注意用线是小时线还是日线, M/W形 会跌, M头, credit: cmoney 会升, W底, credit: cmoney 头肩 头肩顶, 会跌, credit: cmoney 头肩底(倒), 会升, credit: cmoney 缺口 会跌, 头部的岛状反转, credit: cmoney 会升, 底部的岛状反转, credit: cmoney 三角旗/旗形 旗倾斜方向与价格趋势相反, credit: cmoney 支撑和压力 会跌, 连接至少2个最低点, 真突破支撑就会形成跌势, credit: cmoney 会升, 连接至少2个最高点, 真突破压力就会形成升势, credit: cmoney 真突破: &amp;gt;3%价, &amp;gt;30%量, credit: cmoney 其他 会跌, 三只乌鸦(在上升趋势中出现一根大阳线, 接下来连续出现三根阴K线, 日线级别), credit: zhihu晓晓 箱型整理, credit: moneynet 上升楔形, support/下线坡度更大 下降楔形, resistance/上线坡度更大 整理形态: 机构通过洗盘5, 一边撵走了意志不坚定的投资人, 重新在高位引进了另一批看好后市的投资人(清理出获利筹码, 引进高成本韭菜) 一边教育了继续持股的投资人, 不要轻易买卖股票, 长抱不懈才能挣大钱 一边摊低了自己的持仓成本(高卖低吸) 一石三鸟. 这样机构才能够在高位从容出逃 注意 技术分析能判断股价方向, 不能反映真实价值 技术分析能提高胜率, 但不是100%会成功 市场恐慌时, 技术分析会失去判断方向的能力 成交量 在一个交易日当中, 若一只个股的成交量为150000股, 则表示买方在当日共买进了150000股, 同时卖方也卖出了150000股3 成交量是多空双方交锋力度的体现. 成交量大, 说明多空双方交锋较为激烈, 这主要发生在价格走势较为激进的时候, 例如快速的上涨、快速的下跌等 成交量小, 说明多空双方交锋缓和, 这主要发生在价格走势较为平缓、多空双方分歧不大的时候, 例如横盘的窄幅震荡走势 成交量可以有效地揭示主力的市场行为并预示价格走势, 这就是所谓的量在价先. 量在价先是指：在价格走势未见明显变化的情况下, 成交量往往会提前变化, 如果我们可以理解量能这种变化的市场含义, 就可以走在市场的前面, 从而成功地展开低买高卖的操作 量价关系, credit: 熊市猎手 总之, 上升要量, 下跌未必要量 波浪理论 股价有一个『五波上升、三波下降』的基本规律, credit: cmoney 1,3,5升 2,4,b回调 a,c跌 Reference 股票技术面分析 中繼型態圖形1箱型整理 成交量信号 成交量信号2 整理形态</summary></entry><entry><title type="html">stock screening</title><link href="http://localhost:4000/2020/07/06/00_stock_screening.html" rel="alternate" type="text/html" title="stock screening" /><published>2020-07-06T00:00:00+08:00</published><updated>2020-07-06T00:00:00+08:00</updated><id>http://localhost:4000/2020/07/06/00_stock_screening</id><content type="html" xml:base="http://localhost:4000/2020/07/06/00_stock_screening.html">&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
&lt;p&gt;今天总结一下最近学到的选股流程,&lt;/p&gt;

&lt;p&gt;介绍其中的指标和网站,&lt;/p&gt;

&lt;h1 id=&quot;metric&quot;&gt;Metric&lt;/h1&gt;
&lt;h2 id=&quot;overview-1&quot;&gt;overview&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/86585827-9e112480-bfb9-11ea-8569-05ed33d34ecd.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;https://www.gurufocus.com/stock/fb&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;returns-ration&quot;&gt;returns ration&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/86586101-f7795380-bfb9-11ea-8622-1f8534f79232.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;https://www.cnbc.com/quotes/?symbol=fb&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;price-forecast&quot;&gt;price forecast&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/86586342-5212af80-bfba-11ea-9f3c-c85a44720e90.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;https://money.cnn.com/quote/forecast/forecast.html?symb=FB&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;peer-comparison&quot;&gt;peer comparison&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/86622438-768a7e00-bff2-11ea-83e8-3a744f90764b.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;https://www.gurufocus.com/term/ev2ebitda/NAS:FB/EV-to-EBITDA/Facebook&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;financial-statement&quot;&gt;financial statement&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/86624720-65437080-bff6-11ea-8a6a-4249ad585f65.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;https://www.wsj.com/market-data/quotes/FB/financials&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="stock" /><summary type="html">Overview 今天总结一下最近学到的选股流程, 介绍其中的指标和网站, Metric overview https://www.gurufocus.com/stock/fb returns ration https://www.cnbc.com/quotes/?symbol=fb price forecast https://money.cnn.com/quote/forecast/forecast.html?symb=FB peer comparison https://www.gurufocus.com/term/ev2ebitda/NAS:FB/EV-to-EBITDA/Facebook financial statement https://www.wsj.com/market-data/quotes/FB/financials</summary></entry><entry><title type="html">apache kafka关注点</title><link href="http://localhost:4000/2020/06/23/00_kafka.html" rel="alternate" type="text/html" title="apache kafka关注点" /><published>2020-06-23T00:00:00+08:00</published><updated>2020-06-23T00:00:00+08:00</updated><id>http://localhost:4000/2020/06/23/00_kafka</id><content type="html" xml:base="http://localhost:4000/2020/06/23/00_kafka.html">&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
&lt;p&gt;上次的mq看了pulsar, 这次看看更多start的kafka, 因为组件相对少(bookeeper), 所以code相对更多(自处理), 另外总体感觉source code(v2.5.0)比较复杂. wrap了很多层.&lt;/p&gt;

&lt;p&gt;比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system.exit()&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addShutdownHook()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这是一个简单的draft, 也没有画图, 之后有机会再补充.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/85315953-84b6a580-b4ee-11ea-9fa5-5a8caf76b777.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;kafka消息生成流程, credit: flykinghg&lt;sup&gt;1&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;startup&quot;&gt;startup&lt;/h1&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaConfig&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;NumPartitions&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;LogDir&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/tmp/kafka-logs&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaServerStartable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;kafkaServerStartable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 线程池工厂, ScheduledThreadPoolExecutor&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kafkaScheduler&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaScheduler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kafkaScheduler&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaScheduler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;backgroundThreads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 关于record/log的周期性flush和cleanup&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logManager&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialOfflineDirs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zkClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;brokerState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kafkaScheduler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;brokerTopicStats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logDirFailureChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;LogManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadLogs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;currentLogs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topicPartition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nio&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spi&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;// &lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Handles&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responses&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;broker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;socketServer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SocketServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;socketServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 事务&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transactionCoordinator&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TransactionCoordinator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;transactionCoordinator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// admin api&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaApis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaRequestHandlerPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 动态配置监听器&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dynamicConfigManager&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DynamicConfigManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zkClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicConfigHandlers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;ZooKeeperClientWatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;partitionsInitializing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topicPartition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 更新为true(dirty了), would reload later&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;shutdown&quot;&gt;shutdown&lt;/h1&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// one thread&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;kafkaServerStartable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;shutdown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shutdownLatch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CountDownLatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;shutdownLatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;countDown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// main thread&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// will hold until kafkaServerStartable.shutdown be called(shutdownLatch equal zero)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;kafkaServerStartable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;awaitShutdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;awaitShutdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;shutdownLatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;await&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/85064830-bb36ac80-b1de-11ea-80c8-55cf88945b7a.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;client&quot;&gt;client&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/85231509-17414100-b42a-11ea-8f06-320b230eb834.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;producer&quot;&gt;producer&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/85257874-15fb2d00-b499-11ea-9948-583da0b66b75.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;ProducerConfig&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 0.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ConsoleProducer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProducerConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 0. 初始化, 关键点KEY&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaProducer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;accumulator&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RecordAccumulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 累积器&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;sender&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;accumulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// flush器&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;ioThread&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ioThreadName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 异步flush&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 0.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProducerRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 0.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;doSend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 0. get kafka cluster info/metadata&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cluster&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;waitOnMetadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;cluster&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;serializedKey&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keySerializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;serializedValue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;valueSerializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializedKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;allPartitions&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;partitionsForTopic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DefaultPartitioner&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// murmur2 % numPartitions&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;2.&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RoundRobinPartitioner&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// topicCounterMap.get(topic).incr() % numPartitions (类似random % numPartitions)&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;3.&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UniformStickyPartitioner&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// pick by topic, then random then cache, similar to DefaultPartitioner but with topic cache picker&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 0.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TopicPartition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 0. 因为是batch模式, 所以每条新产生的record都会先累积起来&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 这里是异步, 桥梁是**RecordAccumulator**, 一些线程RecordAccumulator.batches.append负责累积, 一些线程Sender.RecordAccumulator.flush负责落盘.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 累积&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;RecordAccumulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializedKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;ProducerBatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;tryAppend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;appendDefaultRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DefaultRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;writeTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appendStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offsetDelta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestampDelta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nextSequentialOffset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;lastOffset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseOffset&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;lastOffset&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lastOffset&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// flush&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sendProduceRequests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;requestBuilder&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ProduceRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;forMagic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;clientRequest&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;newClientRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodeId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clientRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;consumer&quot;&gt;consumer&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/85257801-fe23a900-b498-11ea-8e15-59533f34e4df.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;ConsumerConfig&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;// 0.
ConsoleConsumer.main()
new ConsumerConfig(args)&lt;/p&gt;

&lt;p&gt;// 0. 初始化
new KafkaConsumer()&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;this.fetcher = new Fetcher()
new ConsumerWrapper(consumer) // mainly for its recordIter&lt;/li&gt;
  &lt;li&gt;consumerInit() // binding topic partition, and offset&lt;/li&gt;
  &lt;li&gt;this.subscriptions.assignFromUser(new HashSet&amp;lt;&amp;gt;(partitions))&lt;/li&gt;
  &lt;li&gt;this.subscriptions.seekUnvalidated(partition, newPosition); // 设定offset&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;// 0. receive
msg = consumer.receive().poll()
records = pollForFetches()&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;fetcher.sendFetches(); // 发送request到cluster取数, 并存放到buffer
    &lt;ul&gt;
      &lt;li&gt;this.completedFetches.CompletedFetch.batches.currentBatch.streamingIterator()&lt;/li&gt;
      &lt;li&gt;client.send(fetchTarget, request) // 网络, async&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;fetcher.fetchedRecords()
    &lt;ul&gt;
      &lt;li&gt;records = fetchRecords(nextInLineFetch, recordsRemaining)&lt;/li&gt;
      &lt;li&gt;lastRecord = nextFetchedRecord()
        &lt;ul&gt;
          &lt;li&gt;records = currentBatch.streamingIterator(decompressionBufferSupplier)
            &lt;ul&gt;
              &lt;li&gt;DefaultRecordBatch() // 从之前的fetcher-buffer里面读bytes
                &lt;ul&gt;
                  &lt;li&gt;buffer = this.buffer.duplicate()&lt;/li&gt;
                  &lt;li&gt;new RecordIterator()&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;record = records.next()&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;transaction&quot;&gt;transaction&lt;/h1&gt;
&lt;p&gt;from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExactlyOnceMessageProcessor.java&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;initTransactions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;beginTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customizedRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;sendOffsetsToTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offsets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;groupMetadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;commitTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;abortTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;producer-client-send&quot;&gt;producer client send&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;producer.sendOffsetsToTransaction -&amp;gt;  new AddOffsetsToTxnHandler(new AddOffsetsToTxnRequest(&lt;strong&gt;ApiKeys.ADD_OFFSETS_TO_TXN&lt;/strong&gt;))&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;producer.commitTransaction  -&amp;gt; new EndTxnHandler(new EndTxnRequest(new EndTxnRequestData(id=commit, ApiKeys.END_TXN)))
    &lt;ul&gt;
      &lt;li&gt;new InitProducerIdHandler(new InitProducerIdRequest(ApiKeys.INIT_PRODUCER_ID))&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;producer.commitTransaction  -&amp;gt; new EndTxnHandler(new EndTxnRequest(new EndTxnRequestData(id=abort, ApiKeys.END_TXN)))
    &lt;ul&gt;
      &lt;li&gt;new InitProducerIdHandler(new InitProducerIdRequest(ApiKeys.INIT_PRODUCER_ID))&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pendingRequests&lt;/code&gt;来沟通.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;broker-server-receive&quot;&gt;broker server receive&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;case ApiKeys.ADD_OFFSETS_TO_TXN =&amp;gt; handleAddOffsetsToTxnRequest(request)&lt;/li&gt;
  &lt;li&gt;case ApiKeys.END_TXN =&amp;gt; handleEndTxnRequest(request)&lt;/li&gt;
  &lt;li&gt;case ApiKeys.INIT_PRODUCER_ID =&amp;gt; handleInitProducerIdRequest(request)&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;txnCoordinator.handleEndTransaction()
    &lt;ul&gt;
      &lt;li&gt;这里也是异步的, 一个sendResponseCallback()将call放到responseQueue里面, 再通过processNewResponses()来处理&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;preAppendResult
    &lt;ul&gt;
      &lt;li&gt;txnManager.getTransactionState(&lt;strong&gt;transactionalId&lt;/strong&gt;)&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
      &lt;li&gt;txnMetadata.inLock { … }
        &lt;ul&gt;
          &lt;li&gt;Left(Errors.CONCURRENT_TRANSACTIONS) // 同一个(transactionalId, partitionId)下面的transaction不能并行&lt;/li&gt;
          &lt;li&gt;Ongoing
            &lt;ul&gt;
              &lt;li&gt;PrepareCommit&lt;/li&gt;
              &lt;li&gt;PrepareAbort&lt;/li&gt;
              &lt;li&gt;txnMetadata.prepareAbortOrCommit(nextState, time.milliseconds())&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;CompleteCommit&lt;/li&gt;
      &lt;li&gt;CompleteAbort&lt;/li&gt;
      &lt;li&gt;PrepareCommit&lt;/li&gt;
      &lt;li&gt;PrepareAbort&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;txnManager.appendTransactionToLog()
    &lt;ul&gt;
      &lt;li&gt;sendTxnMarkersCallback()&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
      &lt;li&gt;PrepareCommit&lt;/li&gt;
      &lt;li&gt;PrepareAbort&lt;/li&gt;
      &lt;li&gt;txnMetadata.prepareComplete()
      - replicaManager.appendRecords()
 -updateCacheCallback()
        &lt;ul&gt;
          &lt;li&gt;metadata.completeTransitionTo(newMetadata)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;当要commit未完全提交, 就还有办法abort, 而这个abort是通过同一个transactionalId来沟通, 即之前是commit, 现在变更为abort, 而这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;txnManager.getTransactionState(transactionalId)&lt;/code&gt;所对应的状态也要随之而改变. 例如清空所有之前commit pending, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if (nextState == PrepareAbort &amp;amp;&amp;amp; txnMetadata.pendingState.contains(PrepareEpochFence)) {...}&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;what-can-i-learn-from-this-project&quot;&gt;what can i learn from this project&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;先new类, 然后调用类方法. 这样类方法里面就可以直接用new类的参数
    &lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tokenManager&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DelegationTokenManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokenCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zkClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;tokenManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;可以通过interface/abstract class来快速查看architect/component&lt;/li&gt;
  &lt;li&gt;从return往回找其产生过程/调用链&lt;/li&gt;
  &lt;li&gt;当不是很清楚source code某些逻辑时, 可以通过Google找找灵感&lt;sup&gt;3&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;referene&quot;&gt;Referene&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/flykinghg/article/details/100777641&quot;&gt;kafka生产者的蓄水池机制&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chenfh5.github.io/2020/06/14/00_pulsar.html&quot;&gt;apache pulsar关注点&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhmin.github.io/2019/05/20/kafka-transaction/&quot;&gt;Kafka 事务实现原理&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="source-code" /><category term="kafka" /><summary type="html">Overview 上次的mq看了pulsar, 这次看看更多start的kafka, 因为组件相对少(bookeeper), 所以code相对更多(自处理), 另外总体感觉source code(v2.5.0)比较复杂. wrap了很多层. 比如system.exit()和addShutdownHook() 这是一个简单的draft, 也没有画图, 之后有机会再补充. kafka消息生成流程, credit: flykinghg1 startup args new KafkaConfig - val NumPartitions = 1 - val LogDir = &quot;/tmp/kafka-logs&quot; new KafkaServerStartable() kafkaServerStartable.startup() ---- // 线程池工厂, ScheduledThreadPoolExecutor kafkaScheduler = new KafkaScheduler() kafkaScheduler = new KafkaScheduler(config.backgroundThreads) // 关于record/log的周期性flush和cleanup logManager = LogManager(config, initialOfflineDirs, zkClient, brokerState, kafkaScheduler, time, brokerTopicStats, logDirFailureChannel) LogManager -&amp;gt; loadLogs() -&amp;gt; loadLog() -&amp;gt; this.currentLogs.put(topicPartition, log) java nio file spi api package // Handles new connections, requests and responses to and from broker. socketServer = new SocketServer( socketServer.startup() // 事务 transactionCoordinator = TransactionCoordinator() transactionCoordinator.startup() // admin api new KafkaApis() new KafkaRequestHandlerPool() // 动态配置监听器 dynamicConfigManager = new DynamicConfigManager(zkClient, dynamicConfigHandlers) ZooKeeperClientWatcher() partitionsInitializing.replace(topicPartition, false, true) // 更新为true(dirty了), would reload later shutdown // one thread kafkaServerStartable.shutdown (private var shutdownLatch = new CountDownLatch(1)) def shutdown(): Unit = {} shutdownLatch.countDown() // main thread // will hold until kafkaServerStartable.shutdown be called(shutdownLatch equal zero) kafkaServerStartable.awaitShutdown() def awaitShutdown(): Unit = shutdownLatch.await() client producer ProducerConfig // 0. ConsoleProducer.main() new ProducerConfig(args) // 0. 初始化, 关键点KEY new KafkaProducer() - this.accumulator = new RecordAccumulator() // 累积器 - this.sender = new Sender(this.accumulator) // flush器 - this.ioThread = new KafkaThread(ioThreadName, this.sender).start() // 异步flush // 0. new ProducerRecord(topic, msg.getBytes) // 0. send(producer, record).doSend() // 0. get kafka cluster info/metadata cluster = waitOnMetadata().cluster serializedKey = keySerializer.serialize(record.topic(), record.headers(), record.key()) serializedValue = valueSerializer.serialize(record.topic(), record.headers(), record.value()) if (partition == null){ partition = partition(record, serializedKey, serializedValue, cluster) } else{ allPartitions = cluster.partitionsForTopic(topic) 1. DefaultPartitioner // murmur2 % numPartitions 2. RoundRobinPartitioner // topicCounterMap.get(topic).incr() % numPartitions (类似random % numPartitions) 3. UniformStickyPartitioner // pick by topic, then random then cache, similar to DefaultPartitioner but with topic cache picker } // 0. tp = new TopicPartition(record.topic(), partition) // 0. 因为是batch模式, 所以每条新产生的record都会先累积起来 // 这里是异步, 桥梁是**RecordAccumulator**, 一些线程RecordAccumulator.batches.append负责累积, 一些线程Sender.RecordAccumulator.flush负责落盘. // 累积 result = RecordAccumulator.append(tp, serializedKey, serializedValue) ProducerBatch(tp).tryAppend(key, value) appendDefaultRecord(offset, timestamp, key, value, headers) DefaultRecord.writeTo(appendStream, offsetDelta, timestampDelta, key, value, headers) offset = nextSequentialOffset(): Long{ lastOffset == null ? baseOffset : lastOffset + 1 } lastOffset = offset; // flush sendProduceRequests(batches, now) requestBuilder = ProduceRequest.Builder.forMagic() clientRequest = client.newClientRequest(nodeId, requestBuilder) client.send(clientRequest, now) consumer ConsumerConfig // 0. ConsoleConsumer.main() new ConsumerConfig(args) // 0. 初始化 new KafkaConsumer() this.fetcher = new Fetcher() new ConsumerWrapper(consumer) // mainly for its recordIter consumerInit() // binding topic partition, and offset this.subscriptions.assignFromUser(new HashSet&amp;lt;&amp;gt;(partitions)) this.subscriptions.seekUnvalidated(partition, newPosition); // 设定offset // 0. receive msg = consumer.receive().poll() records = pollForFetches() fetcher.sendFetches(); // 发送request到cluster取数, 并存放到buffer this.completedFetches.CompletedFetch.batches.currentBatch.streamingIterator() client.send(fetchTarget, request) // 网络, async fetcher.fetchedRecords() records = fetchRecords(nextInLineFetch, recordsRemaining) lastRecord = nextFetchedRecord() records = currentBatch.streamingIterator(decompressionBufferSupplier) DefaultRecordBatch() // 从之前的fetcher-buffer里面读bytes buffer = this.buffer.duplicate() new RecordIterator() record = records.next() transaction from ExactlyOnceMessageProcessor.java producer.initTransactions() try { producer.beginTransaction() for() { producer.send(customizedRecord) } producer.sendOffsetsToTransaction(offsets, consumer.groupMetadata()) producer.commitTransaction() } catch { producer.abortTransaction() } producer client send producer.sendOffsetsToTransaction -&amp;gt; new AddOffsetsToTxnHandler(new AddOffsetsToTxnRequest(ApiKeys.ADD_OFFSETS_TO_TXN)) producer.commitTransaction -&amp;gt; new EndTxnHandler(new EndTxnRequest(new EndTxnRequestData(id=commit, ApiKeys.END_TXN))) new InitProducerIdHandler(new InitProducerIdRequest(ApiKeys.INIT_PRODUCER_ID)) producer.commitTransaction -&amp;gt; new EndTxnHandler(new EndTxnRequest(new EndTxnRequestData(id=abort, ApiKeys.END_TXN))) new InitProducerIdHandler(new InitProducerIdRequest(ApiKeys.INIT_PRODUCER_ID)) 通过pendingRequests来沟通. broker server receive case ApiKeys.ADD_OFFSETS_TO_TXN =&amp;gt; handleAddOffsetsToTxnRequest(request) case ApiKeys.END_TXN =&amp;gt; handleEndTxnRequest(request) case ApiKeys.INIT_PRODUCER_ID =&amp;gt; handleInitProducerIdRequest(request) txnCoordinator.handleEndTransaction() 这里也是异步的, 一个sendResponseCallback()将call放到responseQueue里面, 再通过processNewResponses()来处理 preAppendResult txnManager.getTransactionState(transactionalId) txnMetadata.inLock { … } Left(Errors.CONCURRENT_TRANSACTIONS) // 同一个(transactionalId, partitionId)下面的transaction不能并行 Ongoing PrepareCommit PrepareAbort txnMetadata.prepareAbortOrCommit(nextState, time.milliseconds()) CompleteCommit CompleteAbort PrepareCommit PrepareAbort txnManager.appendTransactionToLog() sendTxnMarkersCallback() PrepareCommit PrepareAbort txnMetadata.prepareComplete() - replicaManager.appendRecords() -updateCacheCallback() metadata.completeTransitionTo(newMetadata) 当要commit未完全提交, 就还有办法abort, 而这个abort是通过同一个transactionalId来沟通, 即之前是commit, 现在变更为abort, 而这个txnManager.getTransactionState(transactionalId)所对应的状态也要随之而改变. 例如清空所有之前commit pending, if (nextState == PrepareAbort &amp;amp;&amp;amp; txnMetadata.pendingState.contains(PrepareEpochFence)) {...} what can i learn from this project 先new类, 然后调用类方法. 这样类方法里面就可以直接用new类的参数 tokenManager = new DelegationTokenManager(config, tokenCache, time , zkClient) tokenManager.startup() 可以通过interface/abstract class来快速查看architect/component 从return往回找其产生过程/调用链 当不是很清楚source code某些逻辑时, 可以通过Google找找灵感3 Referene kafka生产者的蓄水池机制 apache pulsar关注点 Kafka 事务实现原理</summary></entry><entry><title type="html">eaten japanese buffets in singapore</title><link href="http://localhost:4000/2020/06/21/00_sg-japanese-buffet.html" rel="alternate" type="text/html" title="eaten japanese buffets in singapore" /><published>2020-06-21T00:00:00+08:00</published><updated>2020-06-21T00:00:00+08:00</updated><id>http://localhost:4000/2020/06/21/00_sg-japanese-buffet</id><content type="html" xml:base="http://localhost:4000/2020/06/21/00_sg-japanese-buffet.html">&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
&lt;p&gt;感觉japan是一个比较clean, polite的地方, 当然其中的food也是很精致, 其中比较喜欢的是&lt;a href=&quot;https://en.wikipedia.org/wiki/Sashimi&quot;&gt;sashimi&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;虽然平时也会到japan restaurant单点ala carte, 但是还是没有到buffet吃的开, 特别是运动过后的下一餐.&lt;/p&gt;

&lt;p&gt;即便我的味蕾很差, 吃不出来细腻的味道, 但是鲜美应该还是可以taste到吧? 餐厅环境, 食物整洁也是很重要的参考.&lt;/p&gt;

&lt;h1 id=&quot;singapore-buffet&quot;&gt;singapore buffet&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;restaurant&lt;/th&gt;
      &lt;th&gt;fee(S$)&lt;/th&gt;
      &lt;th&gt;remark&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.facebook.com/kisekirestaurant/&quot;&gt;kiseki&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;22.8 ~ 39.8&lt;/td&gt;
      &lt;td&gt;5楼?&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.facebook.com/shinminori/&quot;&gt;shin minori&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;53.9&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.facebook.com/kushidining/&quot;&gt;kushi&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;38.8 ~ 69.8&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.facebook.com/eatmitsuba/&quot;&gt;mitsuba&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;41.9&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.facebook.com/ikoijapaneserestaurant/&quot;&gt;ikoi&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;38.0&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;referene&quot;&gt;Referene&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://sethlui.com/best-japanese-buffets-singapore/&quot;&gt;14 Best Japanese Buffets in Singapore For Your Sashimi Fix&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://eatbook.sg/japanese-buffet/&quot;&gt;15 Japanese Buffets In Singapore From $18.90++ For Unlimited Sashimi And Wagyu&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="food" /><summary type="html">Overview 感觉japan是一个比较clean, polite的地方, 当然其中的food也是很精致, 其中比较喜欢的是sashimi. 虽然平时也会到japan restaurant单点ala carte, 但是还是没有到buffet吃的开, 特别是运动过后的下一餐. 即便我的味蕾很差, 吃不出来细腻的味道, 但是鲜美应该还是可以taste到吧? 餐厅环境, 食物整洁也是很重要的参考. singapore buffet restaurant fee(S$) remark kiseki 22.8 ~ 39.8 5楼? shin minori 53.9 - kushi 38.8 ~ 69.8 - mitsuba 41.9 - ikoi 38.0 - Referene 14 Best Japanese Buffets in Singapore For Your Sashimi Fix 15 Japanese Buffets In Singapore From $18.90++ For Unlimited Sashimi And Wagyu</summary></entry><entry><title type="html">apache pulsar关注点</title><link href="http://localhost:4000/2020/06/14/00_pulsar.html" rel="alternate" type="text/html" title="apache pulsar关注点" /><published>2020-06-14T00:00:00+08:00</published><updated>2020-06-14T00:00:00+08:00</updated><id>http://localhost:4000/2020/06/14/00_pulsar</id><content type="html" xml:base="http://localhost:4000/2020/06/14/00_pulsar.html">&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
&lt;p&gt;最近看到mq这块, kafka很火(star 16k), 而且融入了scala. 那么市场上其alternative apache pulsar表现如何? 所以clone(v2.5.2)下来粗略看了看, 下面是个人对其的关注点&lt;/p&gt;

&lt;h1 id=&quot;architect&quot;&gt;Architect&lt;/h1&gt;
&lt;h2 id=&quot;cluster-level&quot;&gt;cluster level&lt;/h2&gt;
&lt;p&gt;一个pulsar cluster由以下组件构成, 
&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/84564993-ac906580-ad98-11ea-83c9-65081cae3de1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;pulsar cluster, credit: apache&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;broker是中间层&lt;/li&gt;
  &lt;li&gt;zk是服务发现, 选主和集中配置&lt;/li&gt;
  &lt;li&gt;bookKeeper是持久化层
    &lt;ul&gt;
      &lt;li&gt;quorum replica机制, broker通过BK client并发发送写操作到N个bookies(副本), 然后等待相关bookies返回quorum ack, 接着返回ack给producer, 并投递该msg给consumer&lt;sup&gt;2&lt;/sup&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;类似&lt;a href=&quot;https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs/Federation.html&quot;&gt;hdfs federation&lt;/a&gt;或者&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-cross-cluster-search.html&quot;&gt;elasticsearch cross-cluster&lt;/a&gt;, 通过global zk来关联2个不同cluster, 实现了数据的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;异地geo/异集群&lt;/code&gt;的&lt;strong&gt;传输/备份&lt;a href=&quot;http://pulsar.apache.org/docs/en/administration-geo/&quot;&gt;replica&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;instance-level&quot;&gt;instance level&lt;/h2&gt;
&lt;p&gt;单个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pulsar实例&lt;/code&gt;由一个或多个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pulsar集群&lt;/code&gt;组成. 实例中的集群之间可以相互复制数据
&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/82873501-2e922900-9f67-11ea-9b61-9763816dde54.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;pulsar instance, credit: tibco&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/84565596-bddb7100-ad9c-11ea-885d-144efe313121.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;pulsar instance - 通过geo replica, consumer C1和C2就可以消费到producer P3的send msg, 因为cluster ABC都是share同一个topic即T1, credit: apache&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;broker&quot;&gt;broker&lt;/h1&gt;
&lt;p&gt;broker相当于&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-node.html#coordinating-node&quot;&gt;es coordinator&lt;/a&gt;, 作为一个中间层, 起承转合&lt;/p&gt;

&lt;p&gt;broker本身是无状态的, 所以可以很好的水平扩展scaling,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;提供topic服务&lt;/li&gt;
  &lt;li&gt;处理message传输&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/82834671-601ddc80-9ef4-11ea-9586-643322d92022.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;client&quot;&gt;client&lt;/h1&gt;
&lt;p&gt;Pulsar推出了支持Java, Go, Python和C++的客户端API&lt;/p&gt;

&lt;p&gt;PuslarAPI封装了客户端到broker端的通信协议, 暴露出一套API供应用程序使用&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/82834937-213c5680-9ef5-11ea-994d-c0def45a0ba8.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;独立client只是其中一个操作pulsar instance/cluster的方式, 还有另外的&lt;a href=&quot;http://pulsar.apache.org/docs/en/admin-api-overview/&quot;&gt;2种方式&lt;/a&gt;,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;admin REST api
    &lt;ul&gt;
      &lt;li&gt;e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl http://localhost:9092/admin/v2/persistent/{tenant}/{namespace}&lt;/code&gt;, 类似es的curl&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;pulsar-admin CLI
    &lt;ul&gt;
      &lt;li&gt;e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sh bin/pulsar-admin topics list tenant/cluster/namespace&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;broker-service-discovery&quot;&gt;broker service discovery&lt;/h1&gt;
&lt;p&gt;client要与bookie进行交互(index or query)都需要经过broker&lt;/p&gt;

&lt;p&gt;这个模块就提供一个http server(jetty), 用于client发送http来round-robin zk上存着的可用brokers&lt;/p&gt;

&lt;p&gt;可用brokers与http server之间的通信桥梁是zk, 即conf配置&lt;/p&gt;

&lt;p&gt;It keeps list of active available brokers and redirects all incoming requests to one of the broker in round-robin manner&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zookeeperServers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInitParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;zookeeperServers&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/83443974-3da03c00-a47d-11ea-85ae-79c6daddce75.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;functions&quot;&gt;functions&lt;/h1&gt;
&lt;p&gt;类似一个小型flink/spark/MR框架, 可以部署到现有的broker上(实现复用)&lt;/p&gt;

&lt;p&gt;有一个dashboard, 但是UI肯定没有spark那么丰富, 可以看到lineage DAG, resource&lt;/p&gt;

&lt;p&gt;不过对于simple应用(map, flatMap)等, 就可以比较快速简单实现, 不用引入3rd party&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/84366257-27287c00-ac05-11ea-8591-b4a92d9d3be3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;io&quot;&gt;IO&lt;/h1&gt;
&lt;p&gt;外部组件作为source/sink与pulsar的连接&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/84407047-e51b2c80-ac3c-11ea-87b9-c6465d831f98.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;io connector, credit: apache&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/84417445-35e45280-ac48-11ea-9630-2149944f7cdc.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3类&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;processing guarantee&lt;/code&gt;,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;at-most-once&lt;/li&gt;
  &lt;li&gt;at-least-once&lt;/li&gt;
  &lt;li&gt;effectively-once&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/84420343-7b0a8380-ac4c-11ea-96b0-7700838783d5.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;processing guarantee&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;transaction&quot;&gt;transaction&lt;/h1&gt;
&lt;p&gt;base on &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#thenCompose-java.util.function.Function-&quot;&gt;CompletableFuture thenCompose&lt;/a&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/84506649-418c5380-acf2-11ea-8234-6b0814538465.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;sql&quot;&gt;SQL&lt;/h1&gt;
&lt;p&gt;base on &lt;a href=&quot;https://github.com/prestodb/presto&quot;&gt;presto&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;需要单独起sql-worker, 即运行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sh ${PRESTO_HOME}/bin/launcher run&lt;/code&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/84541769-95b32a00-ad2a-11ea-8459-480b27f2b6b3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;bootstrap&quot;&gt;bootstrap&lt;/h1&gt;
&lt;p&gt;使用standalone&lt;a href=&quot;https://pulsar.apache.org/docs/en/standalone/#start-pulsar-standalone&quot;&gt;模式&lt;/a&gt;来过一遍启动时会经历哪些状态,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/84541978-12460880-ad2b-11ea-961c-85717a72d795.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;create pulsarConfiguration include zk
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conf/standalone.conf&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;broker
    &lt;ul&gt;
      &lt;li&gt;zk&lt;/li&gt;
      &lt;li&gt;bookKeeper&lt;/li&gt;
      &lt;li&gt;loadManager(ResourceUnit)&lt;/li&gt;
      &lt;li&gt;webService(admin REST api)&lt;/li&gt;
      &lt;li&gt;startLeaderElectionService(zk-Watcher-notify-recursively)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;create nameSpace for tenant&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;performance-benchmark&quot;&gt;performance benchmark&lt;/h1&gt;
&lt;p&gt;一般从以下2个方面入手选择适合业务系统的messaging system/streaming platform,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;latency: 固定量(size-mb)的数据从生产到被消费确认所需的时间(time-sec)&lt;/li&gt;
  &lt;li&gt;throughput: 单位时间(time-sec)内最大的数据发送/接收量(size-mb)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;latency&quot;&gt;latency&lt;/h2&gt;
&lt;p&gt;kafkaesque&lt;sup&gt;3&lt;/sup&gt;在2019年从以下方面详细给出了关于latency的benchmark,&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;project&lt;/th&gt;
      &lt;th&gt;sub-item&lt;/th&gt;
      &lt;th&gt;remark&lt;/th&gt;
      &lt;th&gt;kafka&lt;/th&gt;
      &lt;th&gt;pulsar&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;latency&lt;/td&gt;
      &lt;td&gt;publishing latency&lt;/td&gt;
      &lt;td&gt;消息发送到被messaging system ack的时间&lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;end-to-end latency&lt;/td&gt;
      &lt;td&gt;消息发送到被consumer ack的时间&lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;durability&lt;/td&gt;
      &lt;td&gt;enable&lt;/td&gt;
      &lt;td&gt;开启写磁盘(flush)的持久化&lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;disable&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;replication&lt;/td&gt;
      &lt;td&gt;enable&lt;/td&gt;
      &lt;td&gt;多数据副本&lt;/td&gt;
      &lt;td&gt;x(leader-follower)&lt;/td&gt;
      &lt;td&gt;y(bookKeeper quorum)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;disable&lt;/td&gt;
      &lt;td&gt;零副本&lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;workloads partition&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;分区数&lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;y&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;从报告来看, 小结如下,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;end-to-end&lt;/code&gt; latency, kafka延迟更低; 但pulsar方差更小(smooth)&lt;/li&gt;
  &lt;li&gt;在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;publishing&lt;/code&gt; latency, pulsar延迟更低且更smooth&lt;/li&gt;
  &lt;li&gt;相比单分区, 在增加分区partition时, pulsar表现出延迟更低; 而kafka则相反其多分区延迟比单分区更高&lt;/li&gt;
  &lt;li&gt;在开启durability的情况下, pulsar延迟更低&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但是&lt;a href=&quot;http://disq.us/p/2452fkx&quot;&gt;评论区&lt;/a&gt;也有人指出应该使用&lt;strong&gt;多brokers&lt;/strong&gt;来做benchmark, that make sense making benchmark workloads closer to PRD env&lt;/p&gt;

&lt;h2 id=&quot;throughput&quot;&gt;throughput&lt;/h2&gt;
&lt;p&gt;在2018年给出了pulsar吞吐量更高的结论&lt;sup&gt;2,4&lt;/sup&gt;, 但是也有有不同观点&lt;sup&gt;5&lt;/sup&gt;&lt;/p&gt;

&lt;h1 id=&quot;more&quot;&gt;More&lt;/h1&gt;
&lt;p&gt;kafka - 在提高latency方面, kafka也有往&lt;a href=&quot;https://cwiki.apache.org/confluence/display/KAFKA/KIP-250+Add+Support+for+Quorum-based+Producer+Acknowledgment&quot;&gt;quorum转&lt;/a&gt;? 但是当下的基于primary-backup对容错支持更好&lt;sup&gt;6&lt;/sup&gt;. 不过kafka越来越独立&lt;a href=&quot;https://cwiki.apache.org/confluence/display/KAFKA/KIP-500%3A+Replace+ZooKeeper+with+a+Self-Managed+Metadata+Quorum&quot;&gt;自成系统&lt;/a&gt;了&lt;/p&gt;

&lt;p&gt;pulsar - 站在了bookKeeper和zk等第三方框架的肩膀上. 但是也实现了存储和服务分离, scaling很好&lt;/p&gt;

&lt;p&gt;个人比较喜欢pulsar的分离设计, 大大提高了可扩展性, 可以更好地增加partition来应对突发流量, 而不像kafka那样需要人工介入rebalance/reassign&lt;sup&gt;7&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;当然对于kafka主动脱离zk而自管理metadata也很期待&lt;/p&gt;

&lt;h1 id=&quot;referene&quot;&gt;Referene&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://pulsar.apache.org/&quot;&gt;apache pulsar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://myslide.cn/slides/10512&quot;&gt;Apache Pulsar分层分片架构&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kafkaesque.io/performance-comparison-between-apache-pulsar-and-kafka-latency/&quot;&gt;performance comparison between apache pulsar and kafka: latency&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://streamnative.io/success-stories/yahoo_japan/&quot;&gt;Apache Pulsar at Yahoo!JAPAN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.confluent.io/kafka-vs-pulsar/&quot;&gt;Kafka vs. Pulsar vs. RabbitMQ: Performance, Architecture, and Features Compared&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://colobu.com/2017/11/02/kafka-replication/&quot;&gt;Kafka的复制机制&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/piperck/p/12172752.html&quot;&gt;Kafka进行机器扩容后的副本再平衡和为已有分区增加replica实践&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://community.tibco.com/sites/default/files/wiki_files/how_to_configure_apache_pulsar_cluster_georeplication.pdf&quot;&gt;How to Configure Apache Pulsar Cluster Geo Replication between Regions on AWS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chenfh5.github.io/2020/06/23/00_kafka.html&quot;&gt;apache kafka关注点&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="source-code" /><category term="pulsar" /><summary type="html">Overview 最近看到mq这块, kafka很火(star 16k), 而且融入了scala. 那么市场上其alternative apache pulsar表现如何? 所以clone(v2.5.2)下来粗略看了看, 下面是个人对其的关注点 Architect cluster level 一个pulsar cluster由以下组件构成, pulsar cluster, credit: apache broker是中间层 zk是服务发现, 选主和集中配置 bookKeeper是持久化层 quorum replica机制, broker通过BK client并发发送写操作到N个bookies(副本), 然后等待相关bookies返回quorum ack, 接着返回ack给producer, 并投递该msg给consumer2 类似hdfs federation或者elasticsearch cross-cluster, 通过global zk来关联2个不同cluster, 实现了数据的异地geo/异集群的传输/备份replica instance level 单个Pulsar实例由一个或多个Pulsar集群组成. 实例中的集群之间可以相互复制数据 pulsar instance, credit: tibco pulsar instance - 通过geo replica, consumer C1和C2就可以消费到producer P3的send msg, 因为cluster ABC都是share同一个topic即T1, credit: apache broker broker相当于es coordinator, 作为一个中间层, 起承转合 broker本身是无状态的, 所以可以很好的水平扩展scaling, 提供topic服务 处理message传输 client Pulsar推出了支持Java, Go, Python和C++的客户端API PuslarAPI封装了客户端到broker端的通信协议, 暴露出一套API供应用程序使用 独立client只是其中一个操作pulsar instance/cluster的方式, 还有另外的2种方式, admin REST api e.g., curl http://localhost:9092/admin/v2/persistent/{tenant}/{namespace}, 类似es的curl pulsar-admin CLI e.g., sh bin/pulsar-admin topics list tenant/cluster/namespace broker service discovery client要与bookie进行交互(index or query)都需要经过broker 这个模块就提供一个http server(jetty), 用于client发送http来round-robin zk上存着的可用brokers 可用brokers与http server之间的通信桥梁是zk, 即conf配置 It keeps list of active available brokers and redirects all incoming requests to one of the broker in round-robin manner String zookeeperServers = config.getInitParameter(&quot;zookeeperServers&quot;); functions 类似一个小型flink/spark/MR框架, 可以部署到现有的broker上(实现复用) 有一个dashboard, 但是UI肯定没有spark那么丰富, 可以看到lineage DAG, resource 不过对于simple应用(map, flatMap)等, 就可以比较快速简单实现, 不用引入3rd party IO 外部组件作为source/sink与pulsar的连接 io connector, credit: apache 3类processing guarantee, at-most-once at-least-once effectively-once processing guarantee transaction base on CompletableFuture thenCompose SQL base on presto 需要单独起sql-worker, 即运行sh ${PRESTO_HOME}/bin/launcher run bootstrap 使用standalone模式来过一遍启动时会经历哪些状态, create pulsarConfiguration include zk conf/standalone.conf broker zk bookKeeper loadManager(ResourceUnit) webService(admin REST api) startLeaderElectionService(zk-Watcher-notify-recursively) create nameSpace for tenant performance benchmark 一般从以下2个方面入手选择适合业务系统的messaging system/streaming platform, latency: 固定量(size-mb)的数据从生产到被消费确认所需的时间(time-sec) throughput: 单位时间(time-sec)内最大的数据发送/接收量(size-mb) latency kafkaesque3在2019年从以下方面详细给出了关于latency的benchmark, project sub-item remark kafka pulsar latency publishing latency 消息发送到被messaging system ack的时间 x y - end-to-end latency 消息发送到被consumer ack的时间 x y durability enable 开启写磁盘(flush)的持久化 x y - disable - x y replication enable 多数据副本 x(leader-follower) y(bookKeeper quorum) - disable 零副本 x y workloads partition 1 分区数 x y - 6 - x y - 16 - x y 从报告来看, 小结如下, 在end-to-end latency, kafka延迟更低; 但pulsar方差更小(smooth) 在publishing latency, pulsar延迟更低且更smooth 相比单分区, 在增加分区partition时, pulsar表现出延迟更低; 而kafka则相反其多分区延迟比单分区更高 在开启durability的情况下, pulsar延迟更低 但是评论区也有人指出应该使用多brokers来做benchmark, that make sense making benchmark workloads closer to PRD env throughput 在2018年给出了pulsar吞吐量更高的结论2,4, 但是也有有不同观点5 More kafka - 在提高latency方面, kafka也有往quorum转? 但是当下的基于primary-backup对容错支持更好6. 不过kafka越来越独立自成系统了 pulsar - 站在了bookKeeper和zk等第三方框架的肩膀上. 但是也实现了存储和服务分离, scaling很好 个人比较喜欢pulsar的分离设计, 大大提高了可扩展性, 可以更好地增加partition来应对突发流量, 而不像kafka那样需要人工介入rebalance/reassign7 当然对于kafka主动脱离zk而自管理metadata也很期待 Referene apache pulsar Apache Pulsar分层分片架构 performance comparison between apache pulsar and kafka: latency Apache Pulsar at Yahoo!JAPAN Kafka vs. Pulsar vs. RabbitMQ: Performance, Architecture, and Features Compared Kafka的复制机制 Kafka进行机器扩容后的副本再平衡和为已有分区增加replica实践 How to Configure Apache Pulsar Cluster Geo Replication between Regions on AWS apache kafka关注点</summary></entry><entry><title type="html">stock learning</title><link href="http://localhost:4000/2020/06/09/00_stock.html" rel="alternate" type="text/html" title="stock learning" /><published>2020-06-09T00:00:00+08:00</published><updated>2020-06-09T00:00:00+08:00</updated><id>http://localhost:4000/2020/06/09/00_stock</id><content type="html" xml:base="http://localhost:4000/2020/06/09/00_stock.html">&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
&lt;p&gt;月初时, 看到新加坡这边的正常利息实在太低了(75K SGD本金一年是37.5 SGD利息, 0.05%), 即便达标one interest(每个月至少消费500 SGD)利率也即3.68%(而且本金上限是75K, 多出的都只是按照base interest来算).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/84125385-0d553080-aa6f-11ea-85f2-bd88028d639d.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;base interest only&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/84125400-134b1180-aa6f-11ea-9562-c55162ef0e1c.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;base plus one interest&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/84125954-dd5a5d00-aa6f-11ea-9d71-d6c2feadf028.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;larger deposits&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果在国内, 由于top互联网公司都有互联网金融牌照, 可以转移到他们的基金产品进行简单投资. 这样至少比活期在银行有利, 而且灵活性和流动性没有受到太大限制.&lt;/p&gt;

&lt;p&gt;而年初经历了&lt;a href=&quot;https://en.wikipedia.org/wiki/COVID-19_pandemic&quot;&gt;COVID-19 pandemic&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/China%E2%80%93United_States_trade_war&quot;&gt;trade war&lt;/a&gt;, &lt;a href=&quot;https://zh-yue.wikipedia.org/wiki/%E9%A6%99%E6%B8%AF%E5%9C%8B%E5%AE%B6%E5%AE%89%E5%85%A8%E6%B3%95&quot;&gt;HK national security law&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/George_Floyd_protests&quot;&gt;floyd protest&lt;/a&gt;之后, 美国股市至今一直利好, 铺天盖地的news. 所以不管是出于想资产增值还是想学习投资, 未尝不可一试. 虽然起步晚了, 就是个人感觉现在不少处于超买, 但是至少知道了什么是超买. 通过这次学习和前期准备工作, 当下一个机会来临, 就可以迅速入金并进行相关投资.&lt;/p&gt;

&lt;p&gt;当然可以day-trading, 这个模式可能不会十分关注这个长期, 而专注于短期波动, 但是却比较精细和耗时, 而通过蓝筹进行价值投资的话, 相对省心.&lt;/p&gt;

&lt;h1 id=&quot;preparation&quot;&gt;Preparation&lt;/h1&gt;
&lt;h2 id=&quot;broker&quot;&gt;broker&lt;/h2&gt;
&lt;p&gt;选择一个broker进行股票买卖, 下面对比一下我在新加坡关注的(仅仅代表自己的个人看法而已, 而且不保证正确, 以最新官网为准),&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;items&lt;/th&gt;
      &lt;th&gt;robinhood&lt;/th&gt;
      &lt;th&gt;etoro&lt;/th&gt;
      &lt;th&gt;td ameritrade&lt;/th&gt;
      &lt;th&gt;webull&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;commission fee&lt;/td&gt;
      &lt;td&gt;zero&lt;/td&gt;
      &lt;td&gt;买卖有差价(0.09%)&lt;/td&gt;
      &lt;td&gt;买卖有差价&lt;/td&gt;
      &lt;td&gt;zero&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;top up fee&lt;/td&gt;
      &lt;td&gt;zero&lt;/td&gt;
      &lt;td&gt;zero&lt;/td&gt;
      &lt;td&gt;zero&lt;/td&gt;
      &lt;td&gt;$12.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;withdraw fee&lt;/td&gt;
      &lt;td&gt;zero&lt;/td&gt;
      &lt;td&gt;$5&lt;/td&gt;
      &lt;td&gt;$25&lt;/td&gt;
      &lt;td&gt;$45&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;优点&lt;/td&gt;
      &lt;td&gt;free免费, 适合大众组&lt;/td&gt;
      &lt;td&gt;操作简单, 市场丰富&lt;/td&gt;
      &lt;td&gt;比较成熟专业&lt;/td&gt;
      &lt;td&gt;操作简单, 无点差&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;缺点&lt;/td&gt;
      &lt;td&gt;需要US的SSN才能注册&lt;/td&gt;
      &lt;td&gt;有点差&lt;/td&gt;
      &lt;td&gt;有点差&lt;/td&gt;
      &lt;td&gt;出入金不方便&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;另外新加坡这边的credit card如果top up到broker账户的话, 有额外的foreign currency transaction fee 3.25%(sgd -&amp;gt; usd)&lt;/p&gt;

&lt;p&gt;我估计withdraw的时候也会有currency fee产生.&lt;/p&gt;

&lt;h2 id=&quot;trading-platforms&quot;&gt;trading platforms&lt;/h2&gt;

&lt;h3 id=&quot;platform&quot;&gt;platform&lt;/h3&gt;
&lt;p&gt;选择一个交易平台来分析股票, 这个可以是多个综合分析, 并且与broker的真实下单分离,&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;items&lt;/th&gt;
      &lt;th&gt;td ameritrade&lt;/th&gt;
      &lt;th&gt;webull&lt;/th&gt;
      &lt;th&gt;futu&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;优点&lt;/td&gt;
      &lt;td&gt;专业, 操作习惯细腻&lt;/td&gt;
      &lt;td&gt;简单&lt;/td&gt;
      &lt;td&gt;简单&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;缺点&lt;/td&gt;
      &lt;td&gt;20min的delay&lt;/td&gt;
      &lt;td&gt;权威性?&lt;/td&gt;
      &lt;td&gt;时间拖动有点卡&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;因为这节不涉及到交易, 只是分析, 个人爱好是三个一起用(各有各的优点), 目前没有那么多业余时间进行day-trading, 所以delay还可以接受.&lt;/p&gt;

&lt;p&gt;但是&lt;a href=&quot;https://youtu.be/OkJh67jZsfo&quot;&gt;筛选&lt;/a&gt;有投资潜力的股票, 还是使用td比较合适.&lt;/p&gt;

&lt;h3 id=&quot;indicator&quot;&gt;indicator&lt;/h3&gt;
&lt;p&gt;历史报价配合indicators可以作出更合理的分析和判断, 下面是一些用到的indicator,&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Trending&lt;/th&gt;
      &lt;th&gt;K线&lt;/th&gt;
      &lt;th&gt;&lt;a href=&quot;https://youtu.be/_Ht6rUwjyC0&quot;&gt;VWAP&lt;/a&gt;&lt;/th&gt;
      &lt;th&gt;&lt;a href=&quot;https://wiki.mbalib.com/wiki/EMA&quot;&gt;EMA&lt;/a&gt;&lt;/th&gt;
      &lt;th&gt;&lt;a href=&quot;https://wiki.mbalib.com/wiki/RSI&quot;&gt;RSI&lt;/a&gt;&lt;/th&gt;
      &lt;th&gt;&lt;a href=&quot;https://wiki.mbalib.com/wiki/MACD&quot;&gt;MACD&lt;/a&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;meaning&lt;/td&gt;
      &lt;td&gt;可以根据不同时间粒度而聚合出一个蜡烛, 表明了开盘价, 收盘价, 最高价, 最低价. &lt;br /&gt;反映大势的状况和价格信息&lt;/td&gt;
      &lt;td&gt;成交量加权平均价, 是一个将多笔交易的价格按各自的成交量加权而算出的平均价, 常用于day-trading. &lt;br /&gt;vwap既是压力线, 也是支撑线&lt;/td&gt;
      &lt;td&gt;是一定期间内数据(收盘价)的平均值, 但却提高了当期数据的权重&lt;/td&gt;
      &lt;td&gt;比较一段时期内的平均收盘&lt;strong&gt;涨&lt;/strong&gt;数和平均收盘&lt;strong&gt;跌&lt;/strong&gt;数来分析市场买卖盘的意向和实力. &lt;br /&gt;RSI多于[30,70]之间波动, 当指标上升(下降)到达80(20)时, 表示股市已有超买(超卖)现象&lt;/td&gt;
      &lt;td&gt;由一快及一慢EMA之间的差计算出来. &lt;br /&gt;“快”指短时期的EMA, 而”慢”则指长时期的EMA, 最常用的是12及26日EMA, 运用快速与慢速EMA的聚合与分离的征兆, 来研判买进与卖出的时机和讯号. &lt;br /&gt;快慢交叉点即黄金交叉点, 也称买卖点&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;未来可能&lt;/strong&gt;呈现上升⤴️趋势(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;涨价&lt;/code&gt;)&lt;/td&gt;
      &lt;td&gt;之前很多红烛, 忽然来了一个很长的绿烛&lt;/td&gt;
      &lt;td&gt;蜡烛向上突破vwap&lt;/td&gt;
      &lt;td&gt;蜡烛向上突破ema&lt;/td&gt;
      &lt;td&gt;超卖, 价值被低估了&lt;/td&gt;
      &lt;td&gt;红柱开始减少/褪色&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;未来可能&lt;/strong&gt;呈现下降⤵️趋势(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;降价&lt;/code&gt;)&lt;/td&gt;
      &lt;td&gt;之前很多绿烛, 忽然来了一个很长的红烛&lt;/td&gt;
      &lt;td&gt;蜡烛向下跌破vwap&lt;/td&gt;
      &lt;td&gt;蜡烛向下跌破ema&lt;/td&gt;
      &lt;td&gt;超买, 价值被高估了&lt;/td&gt;
      &lt;td&gt;绿柱开始减少/褪色&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这些indicators不是入市和出市的唯一标准, 只是一个参考, 最终的下单决定仍有路要走.&lt;/p&gt;

&lt;h3 id=&quot;黄金分割&quot;&gt;黄金分割&lt;/h3&gt;
&lt;p&gt;某时间段内的最高点(0%)与最低点(100%)&lt;/p&gt;

&lt;p&gt;观察k线在黄金分割线区间的运作&lt;/p&gt;

&lt;p&gt;k线突破(向上/向下)某条黄金线, 那么该黄金的上下就是resistance和support线&lt;/p&gt;

&lt;h4 id=&quot;最低价支撑线&quot;&gt;最低价支撑线&lt;/h4&gt;

&lt;p&gt;某时间段内的一条直线连接2个最低价(或者尽量多的低价点连起来)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;如果形成上升趋势线, 不破位, 沿着改线震荡向上&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/84878704-c5608a00-b0bc-11ea-9801-4f6887ee0511.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;ref: https://www.youtube.com/watch?v=9Nm_or34P-Q&amp;amp;feature=youtu.be&amp;amp;t=443s&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;financial-statement&quot;&gt;financial statement&lt;/h2&gt;
&lt;p&gt;在投资一个公司前, 首先对其业务进行判断, 是否夕阳业务, 是否未来业务.&lt;/p&gt;

&lt;p&gt;其次对其财报进行&lt;a href=&quot;https://youtu.be/NCoMUTiaLE8&quot;&gt;分析&lt;/a&gt;, 是否债台高筑(行业平均), 是否有足够现金流.
下面是一些在yahoo finance上的财报关注指标,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;资产负债表, income statement&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;items&lt;/th&gt;
          &lt;th&gt;feature&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;总现金&lt;/td&gt;
          &lt;td&gt;Cash Equivalents &amp;amp; Short Term Investments&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;长期负债&lt;/td&gt;
          &lt;td&gt;Long Term Debt&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;保留盈利&lt;/td&gt;
          &lt;td&gt;从公司创立以来至今的累计利润&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;总资产 - 总负债&lt;/td&gt;
          &lt;td&gt;数值越少, 流动性越差&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;损益表, balance sheet&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;items&lt;/th&gt;
          &lt;th&gt;feature&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;总收益&lt;/td&gt;
          &lt;td&gt;看公司是否在成长&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;经营收入或亏损&lt;/td&gt;
          &lt;td&gt;看管理层的工作效果&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;净收益&lt;/td&gt;
          &lt;td&gt;看公司是否在持续赚钱&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;现金流量表, cash flow&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;items&lt;/th&gt;
          &lt;th&gt;feature&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;自由现金流量&lt;/td&gt;
          &lt;td&gt;公司可以自由灵活运用的资金&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;referene&quot;&gt;Referene&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UC8AA0Ao2ZHxNWZu0ZFdRZxw&quot;&gt;Curtis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCFnQI5gEF8X_YE9gKf5msPg&quot;&gt;Joseph Ma&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://book.douban.com/subject/1467393/&quot;&gt;The Intelligent Investor&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="stock" /><summary type="html">Overview 月初时, 看到新加坡这边的正常利息实在太低了(75K SGD本金一年是37.5 SGD利息, 0.05%), 即便达标one interest(每个月至少消费500 SGD)利率也即3.68%(而且本金上限是75K, 多出的都只是按照base interest来算). base interest only base plus one interest larger deposits 如果在国内, 由于top互联网公司都有互联网金融牌照, 可以转移到他们的基金产品进行简单投资. 这样至少比活期在银行有利, 而且灵活性和流动性没有受到太大限制. 而年初经历了COVID-19 pandemic, trade war, HK national security law, floyd protest之后, 美国股市至今一直利好, 铺天盖地的news. 所以不管是出于想资产增值还是想学习投资, 未尝不可一试. 虽然起步晚了, 就是个人感觉现在不少处于超买, 但是至少知道了什么是超买. 通过这次学习和前期准备工作, 当下一个机会来临, 就可以迅速入金并进行相关投资. 当然可以day-trading, 这个模式可能不会十分关注这个长期, 而专注于短期波动, 但是却比较精细和耗时, 而通过蓝筹进行价值投资的话, 相对省心. Preparation broker 选择一个broker进行股票买卖, 下面对比一下我在新加坡关注的(仅仅代表自己的个人看法而已, 而且不保证正确, 以最新官网为准), items robinhood etoro td ameritrade webull commission fee zero 买卖有差价(0.09%) 买卖有差价 zero top up fee zero zero zero $12. withdraw fee zero $5 $25 $45 优点 free免费, 适合大众组 操作简单, 市场丰富 比较成熟专业 操作简单, 无点差 缺点 需要US的SSN才能注册 有点差 有点差 出入金不方便 另外新加坡这边的credit card如果top up到broker账户的话, 有额外的foreign currency transaction fee 3.25%(sgd -&amp;gt; usd) 我估计withdraw的时候也会有currency fee产生. trading platforms platform 选择一个交易平台来分析股票, 这个可以是多个综合分析, 并且与broker的真实下单分离, items td ameritrade webull futu 优点 专业, 操作习惯细腻 简单 简单 缺点 20min的delay 权威性? 时间拖动有点卡 因为这节不涉及到交易, 只是分析, 个人爱好是三个一起用(各有各的优点), 目前没有那么多业余时间进行day-trading, 所以delay还可以接受. 但是筛选有投资潜力的股票, 还是使用td比较合适. indicator 历史报价配合indicators可以作出更合理的分析和判断, 下面是一些用到的indicator, Trending K线 VWAP EMA RSI MACD meaning 可以根据不同时间粒度而聚合出一个蜡烛, 表明了开盘价, 收盘价, 最高价, 最低价. 反映大势的状况和价格信息 成交量加权平均价, 是一个将多笔交易的价格按各自的成交量加权而算出的平均价, 常用于day-trading. vwap既是压力线, 也是支撑线 是一定期间内数据(收盘价)的平均值, 但却提高了当期数据的权重 比较一段时期内的平均收盘涨数和平均收盘跌数来分析市场买卖盘的意向和实力. RSI多于[30,70]之间波动, 当指标上升(下降)到达80(20)时, 表示股市已有超买(超卖)现象 由一快及一慢EMA之间的差计算出来. “快”指短时期的EMA, 而”慢”则指长时期的EMA, 最常用的是12及26日EMA, 运用快速与慢速EMA的聚合与分离的征兆, 来研判买进与卖出的时机和讯号. 快慢交叉点即黄金交叉点, 也称买卖点 未来可能呈现上升⤴️趋势(涨价) 之前很多红烛, 忽然来了一个很长的绿烛 蜡烛向上突破vwap 蜡烛向上突破ema 超卖, 价值被低估了 红柱开始减少/褪色 未来可能呈现下降⤵️趋势(降价) 之前很多绿烛, 忽然来了一个很长的红烛 蜡烛向下跌破vwap 蜡烛向下跌破ema 超买, 价值被高估了 绿柱开始减少/褪色 这些indicators不是入市和出市的唯一标准, 只是一个参考, 最终的下单决定仍有路要走. 黄金分割 某时间段内的最高点(0%)与最低点(100%) 观察k线在黄金分割线区间的运作 k线突破(向上/向下)某条黄金线, 那么该黄金的上下就是resistance和support线 最低价支撑线 某时间段内的一条直线连接2个最低价(或者尽量多的低价点连起来) 如果形成上升趋势线, 不破位, 沿着改线震荡向上 ref: https://www.youtube.com/watch?v=9Nm_or34P-Q&amp;amp;feature=youtu.be&amp;amp;t=443s financial statement 在投资一个公司前, 首先对其业务进行判断, 是否夕阳业务, 是否未来业务. 其次对其财报进行分析, 是否债台高筑(行业平均), 是否有足够现金流. 下面是一些在yahoo finance上的财报关注指标, 资产负债表, income statement items feature 总现金 Cash Equivalents &amp;amp; Short Term Investments 长期负债 Long Term Debt 保留盈利 从公司创立以来至今的累计利润 总资产 - 总负债 数值越少, 流动性越差 损益表, balance sheet items feature 总收益 看公司是否在成长 经营收入或亏损 看管理层的工作效果 净收益 看公司是否在持续赚钱 现金流量表, cash flow items feature 自由现金流量 公司可以自由灵活运用的资金 Referene Curtis Joseph Ma The Intelligent Investor</summary></entry><entry><title type="html">piano learning</title><link href="http://localhost:4000/2020/06/07/00_piano.html" rel="alternate" type="text/html" title="piano learning" /><published>2020-06-07T00:00:00+08:00</published><updated>2020-06-07T00:00:00+08:00</updated><id>http://localhost:4000/2020/06/07/00_piano</id><content type="html" xml:base="http://localhost:4000/2020/06/07/00_piano.html">&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
&lt;p&gt;琴来了, 哈哈.&lt;/p&gt;

&lt;p&gt;偶然random到一首钢琴曲&lt;sup&gt;2&lt;/sup&gt;, 看着视频发呆了, 听着旋律也发呆了. 所以试着让自己也学一学, 希望有朝一日我也能简单连续弹出一些喜欢的曲子.&lt;/p&gt;

&lt;h1 id=&quot;认识键盘&quot;&gt;认识键盘&lt;/h1&gt;
&lt;p&gt;88个键 = 52个白键 + 36个黑键, 一共分为7个区(octaves),&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/84173554-04388380-aab0-11ea-8f3b-1d58f9ef0ff5.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;分区(C1-C7)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;认识五线谱&quot;&gt;认识五线谱&lt;/h1&gt;
&lt;p&gt;主要记录着,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;谱号clef
    &lt;ul&gt;
      &lt;li&gt;高音谱号treble
  &lt;img src=&quot;https://user-images.githubusercontent.com/8369671/84250542-c0d92600-ab3e-11ea-803d-3f777f534d7a.png&quot; alt=&quot;image&quot; /&gt;
        &lt;blockquote&gt;
          &lt;p&gt;EGBDF(Every Great Band Draws Fans), FACE&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;低音谱号bass
  &lt;img src=&quot;https://user-images.githubusercontent.com/8369671/84250553-c46cad00-ab3e-11ea-8419-43cb8b04aae5.png&quot; alt=&quot;image&quot; /&gt;
        &lt;blockquote&gt;
          &lt;p&gt;GBDFA(Good Boy Does Fine Always), ACEG(All Cows Eat Grass)&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;中音谱号alto&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;线line
    &lt;ul&gt;
      &lt;li&gt;加线ledger&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;间space
    &lt;ul&gt;
      &lt;li&gt;加间&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;拍号time signature
    &lt;ul&gt;
      &lt;li&gt;定义小节中的节拍数量以及音符时值的具体拍数&lt;/li&gt;
      &lt;li&gt;e.g., 3/8所代表的含义为”以8分音符为1拍, 每小节有3拍”&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;强弱规律&lt;/p&gt;

        &lt;table&gt;
          &lt;thead&gt;
            &lt;tr&gt;
              &lt;th&gt;拍号&lt;/th&gt;
              &lt;th&gt;feature&lt;/th&gt;
            &lt;/tr&gt;
          &lt;/thead&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td&gt;4/4拍&lt;/td&gt;
              &lt;td&gt;强 -&amp;gt; 弱 -&amp;gt; 次强 -&amp;gt; 弱&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;3/4拍&lt;/td&gt;
              &lt;td&gt;强 -&amp;gt; 弱 -&amp;gt; 弱&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;2/4拍&lt;/td&gt;
              &lt;td&gt;强 -&amp;gt; 弱&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/li&gt;
      &lt;li&gt;切分节奏(进阶必备?)
        &lt;ul&gt;
          &lt;li&gt;没有按照4/4拍的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;强 -&amp;gt; 弱 -&amp;gt; 次强 -&amp;gt; 弱&lt;/code&gt;来走, 而是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;弱 -&amp;gt; 强 -&amp;gt; 弱&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;音符note
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;时值duration, 就是击键与停顿的时间(节奏)&lt;/p&gt;

        &lt;table&gt;
          &lt;thead&gt;
            &lt;tr&gt;
              &lt;th&gt;note&lt;/th&gt;
              &lt;th&gt;feature&lt;/th&gt;
              &lt;th&gt;duration&lt;/th&gt;
            &lt;/tr&gt;
          &lt;/thead&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td&gt;全音符&lt;/td&gt;
              &lt;td&gt;空心符头&lt;/td&gt;
              &lt;td&gt;4拍&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;二分音符&lt;/td&gt;
              &lt;td&gt;空心符头 + 符干&lt;/td&gt;
              &lt;td&gt;2拍&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;四分音符&lt;/td&gt;
              &lt;td&gt;实心符头 + 符干&lt;/td&gt;
              &lt;td&gt;1拍&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;八分音符&lt;/td&gt;
              &lt;td&gt;实心符头 + 符干 + 符尾&lt;/td&gt;
              &lt;td&gt;1/2拍&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;十六分音符&lt;/td&gt;
              &lt;td&gt;实心符头 + 符干 + 2符尾&lt;/td&gt;
              &lt;td&gt;1/4拍&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;附点二分音符&lt;/td&gt;
              &lt;td&gt;二分音符+ 附点&lt;/td&gt;
              &lt;td&gt;(2 + 附点的时值是前面音符的1/2)=3拍&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;休止符&lt;/td&gt;
              &lt;td&gt;倒挂于第4线&lt;/td&gt;
              &lt;td&gt;整小节&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;二分休止符&lt;/td&gt;
              &lt;td&gt;放在第3线&lt;/td&gt;
              &lt;td&gt;2拍&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;四分休止符&lt;/td&gt;
              &lt;td&gt;人形&lt;/td&gt;
              &lt;td&gt;1拍&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;连音线&lt;/td&gt;
              &lt;td&gt;拱形x-x, 只&lt;strong&gt;抬手&lt;/strong&gt;一次, 中间的所有音符都是&lt;strong&gt;抬指&lt;/strong&gt;&lt;/td&gt;
              &lt;td&gt;时值是两者相加&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;降记号&lt;/td&gt;
              &lt;td&gt;尖b&lt;/td&gt;
              &lt;td&gt;击其左边的1键(降半音)&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;升记号&lt;/td&gt;
              &lt;td&gt;尖#&lt;/td&gt;
              &lt;td&gt;击其右边的1键(升半音)&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;音符落键&quot;&gt;音符落键&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/84173235-968c5780-aaaf-11ea-921a-b84686c60681.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;音符在五线谱staff的位置 vs 键盘位置(!)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/84168033-85404c80-aaa9-11ea-89db-e1d1bf09235e.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;音符note在五线谱staff的位置 vs 键盘位置(!!)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/84181262-3dc2bc00-aabb-11ea-9765-36a463999b74.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;音符在五线谱的位置 vs 键盘位置(!!!)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;手指位置&quot;&gt;手指位置&lt;/h1&gt;
&lt;p&gt;找到当前音符的落键位置之后, 就要判断用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;哪只手&lt;/code&gt;的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;哪根指头&lt;/code&gt;去敲击,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/84169507-4612fb00-aaab-11ea-9a92-a15ceb8a2151.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;C大調下的手指摆放layout. 左手尾指在C3, 右手拇指在C4&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/84170002-db15f400-aaab-11ea-8f0f-b385ff6f59fd.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;各种调号key signature所对应的手指摆放(拇指永远是1, 尾指永远是5)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;上图可以看到, &lt;strong&gt;转指&lt;/strong&gt;,&lt;/p&gt;

&lt;p&gt;一个分区是7个音,&lt;/p&gt;

&lt;p&gt;C -&amp;gt; D -&amp;gt; E -&amp;gt; F -&amp;gt; G -&amp;gt; A -&amp;gt; B -&amp;gt; C 一共8个音, 即&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;direction&lt;/th&gt;
      &lt;th&gt;action&lt;/th&gt;
      &lt;th&gt;sequence&lt;/th&gt;
      &lt;th&gt;combine&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;往右(上行)&lt;/td&gt;
      &lt;td&gt;中指固定(第3位), 拇指穿越&lt;/td&gt;
      &lt;td&gt;1 -&amp;gt; 2 -&amp;gt; 3(固定) -&amp;gt; 1(穿越) -&amp;gt; 2 -&amp;gt; 3 -&amp;gt; 4 -&amp;gt; 5&lt;/td&gt;
      &lt;td&gt;3+5的指法组合&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;往左(下行)&lt;/td&gt;
      &lt;td&gt;拇指固定(第5位), 中指穿越&lt;/td&gt;
      &lt;td&gt;5 -&amp;gt; 4 -&amp;gt; 3 -&amp;gt; 2 -&amp;gt; 1(固定) -&amp;gt; 3(穿越) -&amp;gt; 2 -&amp;gt; 1&lt;/td&gt;
      &lt;td&gt;5+3的指法组合&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/84171275-372d4800-aaad-11ea-9aba-01aea84ac718.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;手型训练, 脑海里想象着手握住网球&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;训练素材&quot;&gt;训练素材&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://apps.apple.com/us/app/notes-sight-reading-trainer/id874386416&quot;&gt;认识音符的落键&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://book.douban.com/subject/1493350/&quot;&gt;指法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;简单右手练习曲&lt;/li&gt;
  &lt;li&gt;简单左手练习曲&lt;/li&gt;
  &lt;li&gt;简单双手练习曲&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLB8nOR4NbaKCsi6bo0OEaJcVqRjgrcxFV&quot;&gt;零基礎學鋼琴&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/P9OhFXuWOVg&quot;&gt;君だったら piano&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%B0%83%E5%8F%B7&quot;&gt;调号&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/19754814/answer/62393028&quot;&gt;怎样自学钢琴？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Piano-Keyboard-All-One-Dummies-ebook/dp/B00H7JE9FO&quot;&gt;Piano and Keyboard All-in-One For Dummies&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="piano" /><summary type="html">Overview 琴来了, 哈哈. 偶然random到一首钢琴曲2, 看着视频发呆了, 听着旋律也发呆了. 所以试着让自己也学一学, 希望有朝一日我也能简单连续弹出一些喜欢的曲子. 认识键盘 88个键 = 52个白键 + 36个黑键, 一共分为7个区(octaves), 分区(C1-C7) 认识五线谱 主要记录着, 谱号clef 高音谱号treble EGBDF(Every Great Band Draws Fans), FACE 低音谱号bass GBDFA(Good Boy Does Fine Always), ACEG(All Cows Eat Grass) 中音谱号alto 线line 加线ledger 间space 加间 拍号time signature 定义小节中的节拍数量以及音符时值的具体拍数 e.g., 3/8所代表的含义为”以8分音符为1拍, 每小节有3拍” 强弱规律 拍号 feature 4/4拍 强 -&amp;gt; 弱 -&amp;gt; 次强 -&amp;gt; 弱 3/4拍 强 -&amp;gt; 弱 -&amp;gt; 弱 2/4拍 强 -&amp;gt; 弱 切分节奏(进阶必备?) 没有按照4/4拍的强 -&amp;gt; 弱 -&amp;gt; 次强 -&amp;gt; 弱来走, 而是弱 -&amp;gt; 强 -&amp;gt; 弱 音符note 时值duration, 就是击键与停顿的时间(节奏) note feature duration 全音符 空心符头 4拍 二分音符 空心符头 + 符干 2拍 四分音符 实心符头 + 符干 1拍 八分音符 实心符头 + 符干 + 符尾 1/2拍 十六分音符 实心符头 + 符干 + 2符尾 1/4拍 附点二分音符 二分音符+ 附点 (2 + 附点的时值是前面音符的1/2)=3拍 休止符 倒挂于第4线 整小节 二分休止符 放在第3线 2拍 四分休止符 人形 1拍 连音线 拱形x-x, 只抬手一次, 中间的所有音符都是抬指 时值是两者相加 降记号 尖b 击其左边的1键(降半音) 升记号 尖# 击其右边的1键(升半音) 音符落键 音符在五线谱staff的位置 vs 键盘位置(!) 音符note在五线谱staff的位置 vs 键盘位置(!!) 音符在五线谱的位置 vs 键盘位置(!!!) 手指位置 找到当前音符的落键位置之后, 就要判断用哪只手的哪根指头去敲击, C大調下的手指摆放layout. 左手尾指在C3, 右手拇指在C4 各种调号key signature所对应的手指摆放(拇指永远是1, 尾指永远是5) 上图可以看到, 转指, 一个分区是7个音, C -&amp;gt; D -&amp;gt; E -&amp;gt; F -&amp;gt; G -&amp;gt; A -&amp;gt; B -&amp;gt; C 一共8个音, 即 direction action sequence combine 往右(上行) 中指固定(第3位), 拇指穿越 1 -&amp;gt; 2 -&amp;gt; 3(固定) -&amp;gt; 1(穿越) -&amp;gt; 2 -&amp;gt; 3 -&amp;gt; 4 -&amp;gt; 5 3+5的指法组合 往左(下行) 拇指固定(第5位), 中指穿越 5 -&amp;gt; 4 -&amp;gt; 3 -&amp;gt; 2 -&amp;gt; 1(固定) -&amp;gt; 3(穿越) -&amp;gt; 2 -&amp;gt; 1 5+3的指法组合 手型训练, 脑海里想象着手握住网球 训练素材 认识音符的落键 指法 简单右手练习曲 简单左手练习曲 简单双手练习曲 Reference 零基礎學鋼琴 君だったら piano 调号 怎样自学钢琴？ Piano and Keyboard All-in-One For Dummies</summary></entry><entry><title type="html">A simple book recommender</title><link href="http://localhost:4000/2020/05/28/00_book-recommender.html" rel="alternate" type="text/html" title="A simple book recommender" /><published>2020-05-28T00:00:00+08:00</published><updated>2020-05-28T00:00:00+08:00</updated><id>http://localhost:4000/2020/05/28/00_book-recommender</id><content type="html" xml:base="http://localhost:4000/2020/05/28/00_book-recommender.html">&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
&lt;p&gt;最近起点合同问题纷纷扰扰, 与此同时在知乎上看到别人推书的post, 其中&lt;a href=&quot;https://www.tuishujun.com/&quot;&gt;推书君作者&lt;/a&gt;回答了一波, 然后下面有网友提出一些建议, 当然还有其他网友基于ta的见解来推荐.&lt;/p&gt;

&lt;p&gt;在大数据时代, 信息爆炸, 我们获取信息的渠道主要集中于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;主动搜索(类似Google)&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;被动推荐(类似AD)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;想着最近WFH, 看看如果自己来实现一个book/novel的推荐系统, 会是怎样的一个过程. 下面记录一下本次探索.&lt;/p&gt;

&lt;h1 id=&quot;素材准备&quot;&gt;素材准备&lt;/h1&gt;
&lt;p&gt;关于推荐, 记得刚刚毕业的时候看过一点&lt;a href=&quot;https://blog.csdn.net/qq_35082030/article/details/75646595&quot;&gt;协同过滤&lt;/a&gt;, 主要是两大类, 一类是基于人, 一类是基于物,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;基于人, 甲乙两人, 现在已知甲喜欢物品A和B, 而乙喜欢物品A, 由此可以得出, 乙大概率会喜欢物品B(similar with甲, 可能这里物品样本只有2个, 偶然性会比较大; 如果甲喜欢1000个, 而乙喜欢了其中的999个, 只剩下1个没有被乙喜欢, 那么将这个剩余的1推荐给乙, 乙大概率会喜欢)&lt;/li&gt;
  &lt;li&gt;基于物, 已知物品A和B被绝大部分人喜欢, 而甲目前只是喜欢了物品A(可能没有发现B), 由此可以得出, 乙大概率会喜欢物品B(similar with A, 类似销量排序, 排行榜)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果在样本足够多的情况, 感觉基于人的recommend会更靠谱, 而对于book/novel这种类型, 书单bookList是一个很好的挖掘方式. 比如说&lt;a href=&quot;https://book.douban.com/people/chenfh5/collect&quot;&gt;豆瓣我读过的书单&lt;/a&gt;, &lt;a href=&quot;https://book.qidian.com/booklist/&quot;&gt;起点书单&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;当有了这些素材之后, 就可以着手实现算法.&lt;/p&gt;

&lt;h1 id=&quot;architect&quot;&gt;Architect&lt;/h1&gt;
&lt;p&gt;先来看看总体结构,
&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/83434117-71bf3100-a46c-11ea-8c84-4d2f0764dc4e.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;a simple book recommender system&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;根据用户给定的books, 找到这些books所属的booklists, 然后通过算法控制这些booklists里面所有books的weight, 之后取TopK返回.&lt;/p&gt;

&lt;h2 id=&quot;fetcher&quot;&gt;Fetcher&lt;/h2&gt;
&lt;p&gt;网络爬虫, 因为booklists都是存在于网上, 所以需要根据用户query实时爬取web, 然后解析所有booklists, 之后抓取出所有books. 这里根据个人编程喜好, 选择了&lt;a href=&quot;https://jsoup.org/&quot;&gt;jsoup&lt;/a&gt;这个HTML Parser, 因为其中的selectors能够快速抓取到想要的元素.&lt;/p&gt;

&lt;h3 id=&quot;promo&quot;&gt;Promo&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;因为booklists里面包括了大量的books(M), 当然也有可能是大量用户创建了booklist而其booklist刚好包含其中(N), 这样一膨胀就是O(M*N)了. 非常容易造成hotspot. 这里采用了随机截断器(maxBookListSize and maxBookListContentSize). 将这种膨胀做了一些限制, 当然不能跟DL-pooling相比, 但是大概是一种方向, 防止膨胀与防止过拟合而采取的剪枝&lt;/li&gt;
  &lt;li&gt;多线程与防爬proxy&lt;/li&gt;
  &lt;li&gt;定期爬取booklists然后入local库, 避免网络消耗, 增加吞吐量, 稳定性, 可控性&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;merger&quot;&gt;Merger&lt;/h2&gt;
&lt;p&gt;当所需booklists都抓取过来之后, 接下来就是merge, 这一步类似es的query过程, &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-node.html#coordinating-node&quot;&gt;coordinator&lt;/a&gt;将query路由到对应data-node, 然后data-node返回hit到coordinator, 然后coordinator作汇总排序.&lt;/p&gt;

&lt;p&gt;这里有一个需要注意的点是merge的case class unboxing, 也叫&lt;a href=&quot;https://chenfh5.github.io/2019/05/07/01_scala-ADT.html&quot;&gt;ADT&lt;/a&gt;. 将各个booklists的book assign weight之后, 然后merge.&lt;/p&gt;

&lt;p&gt;这里assign weight是全系统最关键点, 关系着推荐质量, 目前采用了全覆盖的方式, 即booklist中包含了用户所有输入book的话, 那么该booklist中所有books都升权. 反之维持原样. (分配)&lt;/p&gt;

&lt;p&gt;分配好之后就是合并, 目前合并是book与book的weight直接相加. (合并)&lt;/p&gt;

&lt;h3 id=&quot;promo-1&quot;&gt;Promo&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;权重分配算法&lt;/li&gt;
  &lt;li&gt;权重合并算法&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ranker&quot;&gt;Ranker&lt;/h2&gt;
&lt;p&gt;当分配与合并好每本书与原书的相似度weight之后, 直接返回topK.&lt;/p&gt;

&lt;h2 id=&quot;http-server&quot;&gt;Http Server&lt;/h2&gt;
&lt;p&gt;基于&lt;a href=&quot;https://javaee.github.io/grizzly/httpserverframework.html&quot;&gt;Grizzly&lt;/a&gt;搭建了http server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/83148380-795c9e00-a12b-11ea-86ad-9e7a0298a2a5.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;http call (70s, too slow)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;promo-2&quot;&gt;Promo&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/59116615&quot;&gt;LRUCache&lt;/a&gt;
  &lt;img src=&quot;https://user-images.githubusercontent.com/8369671/83148518-a610b580-a12b-11ea-9a85-340a96963041.png&quot; alt=&quot;image&quot; /&gt;
    &lt;blockquote&gt;
      &lt;p&gt;cache&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;other&quot;&gt;Other&lt;/h2&gt;
&lt;p&gt;至此, jar包已经打好, 后续就是&lt;a href=&quot;https://blog.csdn.net/Xuesong_2015/article/details/79021659&quot;&gt;发布部署&lt;/a&gt;, 暴露接口供用户进行调用.
&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/83148026-03f0cd80-a12b-11ea-96aa-c322799e1bbc.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;promo-3&quot;&gt;Promo&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;开发前端展示与交互, html, css, js&lt;/li&gt;
  &lt;li&gt;load balance&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;后记&quot;&gt;后记&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;网络世界很丰饶, 当然这也埋没了一定量的好作品, 自己一个人的力量是非常有限的, 即便Google的rank已经将最高相似度返回了, 但这个相识度更类似与tf/idf和出入度, 主要集中在keyword的命中和网页的权重&lt;/li&gt;
  &lt;li&gt;通过crawler, 个人可以将彼此的大量网络数据爬取出来, 加之利用即可定制化自己的查找策略和侧重, 比如书单, 影单, 歌单, stockList(过了:bowtie:, 投资有风险)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://jsoup.org/&quot;&gt;jsoup: Java HTML Parser&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.lihaoyi.com/post/ScrapingWebsitesusingScalaandJsoup.html&quot;&gt;Scraping Websites using Scala and Jsoup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/wtog/web-crawler&quot;&gt;wtog-web-crawler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/chenfh5/a-simple-book-recommender&quot;&gt;source code&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="architect" /><category term="recommender-systems" /><summary type="html">Overview 最近起点合同问题纷纷扰扰, 与此同时在知乎上看到别人推书的post, 其中推书君作者回答了一波, 然后下面有网友提出一些建议, 当然还有其他网友基于ta的见解来推荐. 在大数据时代, 信息爆炸, 我们获取信息的渠道主要集中于主动搜索(类似Google)和被动推荐(类似AD). 想着最近WFH, 看看如果自己来实现一个book/novel的推荐系统, 会是怎样的一个过程. 下面记录一下本次探索. 素材准备 关于推荐, 记得刚刚毕业的时候看过一点协同过滤, 主要是两大类, 一类是基于人, 一类是基于物, 基于人, 甲乙两人, 现在已知甲喜欢物品A和B, 而乙喜欢物品A, 由此可以得出, 乙大概率会喜欢物品B(similar with甲, 可能这里物品样本只有2个, 偶然性会比较大; 如果甲喜欢1000个, 而乙喜欢了其中的999个, 只剩下1个没有被乙喜欢, 那么将这个剩余的1推荐给乙, 乙大概率会喜欢) 基于物, 已知物品A和B被绝大部分人喜欢, 而甲目前只是喜欢了物品A(可能没有发现B), 由此可以得出, 乙大概率会喜欢物品B(similar with A, 类似销量排序, 排行榜) 如果在样本足够多的情况, 感觉基于人的recommend会更靠谱, 而对于book/novel这种类型, 书单bookList是一个很好的挖掘方式. 比如说豆瓣我读过的书单, 起点书单. 当有了这些素材之后, 就可以着手实现算法. Architect 先来看看总体结构, a simple book recommender system 根据用户给定的books, 找到这些books所属的booklists, 然后通过算法控制这些booklists里面所有books的weight, 之后取TopK返回. Fetcher 网络爬虫, 因为booklists都是存在于网上, 所以需要根据用户query实时爬取web, 然后解析所有booklists, 之后抓取出所有books. 这里根据个人编程喜好, 选择了jsoup这个HTML Parser, 因为其中的selectors能够快速抓取到想要的元素. Promo 因为booklists里面包括了大量的books(M), 当然也有可能是大量用户创建了booklist而其booklist刚好包含其中(N), 这样一膨胀就是O(M*N)了. 非常容易造成hotspot. 这里采用了随机截断器(maxBookListSize and maxBookListContentSize). 将这种膨胀做了一些限制, 当然不能跟DL-pooling相比, 但是大概是一种方向, 防止膨胀与防止过拟合而采取的剪枝 多线程与防爬proxy 定期爬取booklists然后入local库, 避免网络消耗, 增加吞吐量, 稳定性, 可控性 Merger 当所需booklists都抓取过来之后, 接下来就是merge, 这一步类似es的query过程, coordinator将query路由到对应data-node, 然后data-node返回hit到coordinator, 然后coordinator作汇总排序. 这里有一个需要注意的点是merge的case class unboxing, 也叫ADT. 将各个booklists的book assign weight之后, 然后merge. 这里assign weight是全系统最关键点, 关系着推荐质量, 目前采用了全覆盖的方式, 即booklist中包含了用户所有输入book的话, 那么该booklist中所有books都升权. 反之维持原样. (分配) 分配好之后就是合并, 目前合并是book与book的weight直接相加. (合并) Promo 权重分配算法 权重合并算法 Ranker 当分配与合并好每本书与原书的相似度weight之后, 直接返回topK. Http Server 基于Grizzly搭建了http server. http call (70s, too slow) Promo LRUCache cache Other 至此, jar包已经打好, 后续就是发布部署, 暴露接口供用户进行调用. Promo 开发前端展示与交互, html, css, js load balance 后记 网络世界很丰饶, 当然这也埋没了一定量的好作品, 自己一个人的力量是非常有限的, 即便Google的rank已经将最高相似度返回了, 但这个相识度更类似与tf/idf和出入度, 主要集中在keyword的命中和网页的权重 通过crawler, 个人可以将彼此的大量网络数据爬取出来, 加之利用即可定制化自己的查找策略和侧重, 比如书单, 影单, 歌单, stockList(过了:bowtie:, 投资有风险) Reference jsoup: Java HTML Parser Scraping Websites using Scala and Jsoup wtog-web-crawler source code</summary></entry><entry><title type="html">One Stack Big Data Platform</title><link href="http://localhost:4000/2020/05/02/00_big-data-one-stack.html" rel="alternate" type="text/html" title="One Stack Big Data Platform" /><published>2020-05-02T00:00:00+08:00</published><updated>2020-05-02T00:00:00+08:00</updated><id>http://localhost:4000/2020/05/02/00_big-data-one-stack</id><content type="html" xml:base="http://localhost:4000/2020/05/02/00_big-data-one-stack.html">&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
&lt;p&gt;分布式本质论: 高吞吐(high throughput), 高可用(high available), 低延迟(low latency), 可扩展(high scalability).&lt;/p&gt;

&lt;p&gt;整合一下个人对于大数据平台, 数据中台, 数据仓库的技术栈, 这里有一个它们之间差异的&lt;a href=&quot;https://www.zhihu.com/question/282421879&quot;&gt;回答&lt;/a&gt;,&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;数据库阶段&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;主要是OLTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;联机事务处理&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;的需求&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;数据仓库阶段&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OLAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;联机分析处理&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;成为主要需求&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;数据平台阶段&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;主要解决BI和报表需求的技术问题&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;数据中台阶段&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;通过系统来对接OLTP和OLAP的需求&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;强调数据业务化的能力&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当然, 主要看具体业务需求, 一切脱离业务的架构都是耍流氓. 业务开展到哪里, 架构也要跟着并延展些.&lt;/p&gt;

&lt;p&gt;另外, 有些框架经过多年的发展, 已经脱离了单一的技术范畴, 向着多元化的生态圈发展. 当然这也是围城和壁垒.&lt;/p&gt;

&lt;h1 id=&quot;structure&quot;&gt;Structure&lt;/h1&gt;
&lt;p&gt;下面是一个不大完善的数据栈图, 中台可以在此之上做扩展. 
&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/83434218-9f0bdf00-a46c-11ea-94a4-5459487f65cd.png&quot; alt=&quot;db Arch&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;data-collection&quot;&gt;data collection&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/80909688-bf0c8d80-8d5c-11ea-94d4-8201c9142540.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;flume(2011): 采用事务来确保event可靠性, 由sink来确认是否remove channel里的event, via apache&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/80910187-5c1cf580-8d60-11ea-825e-567cbf8f68e7.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;libbeat(2015): 通过Scan()来确认新增file, 然后为其new一个harvester发送到libbeat做聚合, via elastic&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;reference&quot;&gt;Reference&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://flume.apache.org/FlumeUserGuide.html#reliability&quot;&gt;apache flume reliability&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-overview.html&quot;&gt;filebeat-overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/6282b04fe06a&quot;&gt;filebeat工作原理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;data-storageraw&quot;&gt;data storage(raw)&lt;/h2&gt;
&lt;h3 id=&quot;batch&quot;&gt;batch&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/80858795-4b9c4a80-8c8e-11ea-8460-b8757875979c.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;hdfs(2006): 分布式文件系统, 通过master-slave和replica机制来低成本高可靠地存储数据. via bigintellects&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;stream&quot;&gt;stream&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/80914484-74037200-8d7e-11ea-9834-8be306c7777d.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;kafka(2011): file system cache, &lt;a href=&quot;https://zhuanlan.zhihu.com/p/78335525&quot;&gt;zero copy&lt;/a&gt;(内核态), 顺序写磁盘. via dataflair&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/80863711-b199c980-8cb0-11ea-92f0-e89715b259f1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;pulsar(2016): 将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;无状态的消息服务层broker&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;有状态的消息持久层bookkeeper&lt;/code&gt;分离, 无状态可以随时增删, 而有状态却通过replica segment来做HA；当然还有scale out. via streamthoughts&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;reference-1&quot;&gt;Reference&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.jouypub.com/2019/8b02bd00f40ccf93019a317ee7d34081/&quot;&gt;技术架构及选型&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.allthingsdistributed.com/2007/10/amazons_dynamo.html&quot;&gt;Dynamo: Amazon’s Highly Available Key-value Store&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://lxkaka.wang/2019/03/25/pulsar/&quot;&gt;Pulsar(新一代高性能消息系统)核心总结&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://matt33.com/2019/01/28/bk-store-realize/&quot;&gt;BookKeeper 原理浅谈&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.splunk.com/en_us/blog/it/comparing-pulsar-and-kafka-how-a-segment-based-architecture-delivers-better-performance-scalability-and-resilience.html&quot;&gt;Comparing Pulsar and Kafka&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jack-vanlightly.com/blog/2018/10/2/understanding-how-apache-pulsar-works&quot;&gt;Understanding How Apache Pulsar Works&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;data-compute&quot;&gt;data compute&lt;/h2&gt;
&lt;h3 id=&quot;batch-1&quot;&gt;batch&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/80911284-f2084e80-8d67-11ea-9423-b077913c1f31.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;spark(2014): lambda(batch-stream分离), master-slave, rdd, lineage, persist, via 0x0fff&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/81182974-20449300-8fe1-11ea-9a7d-0e54c121f19a.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;airflow(2015): high scalability, HA, UI manage, via clairvoyantsoft&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/80914120-27b73280-8d7c-11ea-917d-2562d18a8fa1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;oozie(2011): server与compute分离, multilayer(bundle), HA, via devstacks&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这里scheduler都是通过多server来避免SPOF, 而多server之间的状态同步是通过DB(ZK)来传递.&lt;/p&gt;

&lt;p&gt;有别于常规的多server leader-standby模式(eg., kafka broker, DB主从复制)&lt;/p&gt;

&lt;h3 id=&quot;stream-1&quot;&gt;stream&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/80914587-fbe97c00-8d7e-11ea-8ed2-ac19aaab9eb7.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;flink(2011): kappa, master-slave, &lt;a href=&quot;https://juejin.im/post/5c87dbdbe51d45494c77d607&quot;&gt;state&lt;/a&gt;, window, cp, via apache&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;reference-2&quot;&gt;Reference&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://site.clairvoyantsoft.com/tag/high-availability/&quot;&gt;Making Apache Airflow Highly Available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://devstacks.wordpress.com/2017/02/16/oozie-architecture-and-job-scheduling/&quot;&gt;Oozie Architecture and Job Scheduling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ask.hellobi.com/blog/Beckham/12290&quot;&gt;Lambda架构 vs Kappa架构&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/4d31d6cddc99&quot;&gt;Flink–Checkpoint机制原理&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/8d6569361999&quot;&gt;一文搞懂Flink内部的Exactly Once和At Least Once&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;data-storage&quot;&gt;data storage&lt;/h2&gt;
&lt;h3 id=&quot;in-memory&quot;&gt;in-memory&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/80949680-0cedc800-8e27-11ea-9340-5d5640e84fa1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;redis(2009): mem-base, 非阻塞多路IO复用, 事务, proactive expire, HA(sentinel), throughput(cluster), via redislabs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/80974537-6ff55400-8e53-11ea-9e19-5f1882af7044.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;ignite(2015): 分布式, KV, mem-disk SQL, 2PC事务, 数据本地性, via apache&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;timeseries&quot;&gt;timeseries&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/81039960-e0948300-8edc-11ea-9f48-bd0edb27089d.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;influxdb(2013): TSM, TSI, WAL/cache, rp, via hbasefly&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;full-text&quot;&gt;full-text&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/81048644-4be75080-8eef-11ea-8363-0944312525da.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;es(2010): master-data, zen discovery , replica, LSM, full text&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;molap&quot;&gt;MOLAP&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/81054993-64109d00-8efa-11ea-977b-32b0b3403bbe.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;kylin(2013): 预计算cube, SQL, high scalability, MR, via apache&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/81068339-cb3a4b80-8f12-11ea-83d5-f9e8dd91b3ed.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;druid(2011), role separate(master-query-data), LSM, via apache&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;rolap&quot;&gt;ROLAP&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/81143961-aa6f0600-8fa5-11ea-8249-29919a76d3e6.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;clickhouse(2016): russia, column oriented, SQL, 主备复制, index(primary key sort), table engine, via altinity&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/81159496-99c98a80-8fbb-11ea-88d6-0bc23c94aaa5.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;greenplum(2015): master-slave, &lt;a href=&quot;https://github.com/digoal/blog/blob/master/201708/20170818_02.md&quot;&gt;append-optimized&lt;/a&gt;, SQL, resource queue, via researchgate&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/80951231-0f9dec80-8e2a-11ea-9091-f2c9ea3ef920.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;tidb(2017): 分布式, SQL, raft, LSM, mysql alternative, via pingcap&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;query-engine&quot;&gt;query engine&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/81101961-78c45380-8f41-11ea-83c9-1c6e73bde07f.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;presto(2013): master-slave, mem-base MPP, SQL, connector, via slideshare&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/80785361-96e12b00-8bb2-11ea-9f20-a1e9cc526dae.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;sparksql(2014): catalyst, cost base, rdd, via dataflair&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/81178389-b0cba500-8fda-11ea-9bbc-c1b8542701f6.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;hive(2010): SQL, MR, metadata, via andr83&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/81178977-97772880-8fdb-11ea-9707-97b4f25c3f1b.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;pig(2008): pig latin, MR, via dezyre&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;graph&quot;&gt;graph&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/8369671/81493837-6f870e00-92d6-11ea-8407-65ad14a2426f.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;neo4j(2007): 定长记录结构, cypher, HA, via slideshare&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;reference-3&quot;&gt;Reference&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/28594409&quot;&gt;IO多路复用技术(multiplexing)是什么？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/37271342&quot;&gt;为什么IO多路复用要搭配非阻塞 IO?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/tgzhu/p/9984170.html&quot;&gt;Ignite(二): 架构及工具&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/24900322&quot;&gt;数据库如何用 WAL 保证事务一致性？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.elastic.co/blog/every-shard-deserves-a-home&quot;&gt;Every shard deserves a home&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://qbox.io/blog/refresh-flush-operations-elasticsearch-guide&quot;&gt;Guide to Refresh and Flush Operations in Elasticsearch&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://juejin.im/post/5bc4979a5188255c451ed5a0&quot;&gt;Apache Kylin 入门 2 - 原理与架构&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/lihaozong2013/p/11655594.html&quot;&gt;apache druid架构、原理、执行流程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/67068975&quot;&gt;数据结构篇—-B+树与LSM树浅析&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.aliyun.com/article/739801&quot;&gt;ClickHouse表引擎到底怎么选&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pingcap.com/docs-cn/stable/architecture/&quot;&gt;TiDB整体架构&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://prestosql.io/Presto_SQL_on_Everything.pdf&quot;&gt;Presto: SQL on Everything&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://my.oschina.net/hblt147/blog/3006435#h3_13&quot;&gt;Presto架构及原理、安装及部署&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chenfh5.github.io/2018/03/11/spark-sql-catalyst.html&quot;&gt;Spark SQL Catalyst优化器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.quora.com/What-is-Hive-Metastore&quot;&gt;What is Hive Metastore?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/Regan_Hoo/article/details/78772479&quot;&gt;Neo4j_高层架构和应用&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;data-analytics&quot;&gt;data analytics&lt;/h2&gt;
&lt;h3 id=&quot;bi&quot;&gt;BI&lt;/h3&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;TODO&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="architect" /><summary type="html">Overview 分布式本质论: 高吞吐(high throughput), 高可用(high available), 低延迟(low latency), 可扩展(high scalability). 整合一下个人对于大数据平台, 数据中台, 数据仓库的技术栈, 这里有一个它们之间差异的回答, - 数据库阶段, 主要是OLTP(联机事务处理)的需求 - 数据仓库阶段, OLAP(联机分析处理)成为主要需求 - 数据平台阶段, 主要解决BI和报表需求的技术问题 - 数据中台阶段, 通过系统来对接OLTP和OLAP的需求, 强调数据业务化的能力 当然, 主要看具体业务需求, 一切脱离业务的架构都是耍流氓. 业务开展到哪里, 架构也要跟着并延展些. 另外, 有些框架经过多年的发展, 已经脱离了单一的技术范畴, 向着多元化的生态圈发展. 当然这也是围城和壁垒. Structure 下面是一个不大完善的数据栈图, 中台可以在此之上做扩展. data collection flume(2011): 采用事务来确保event可靠性, 由sink来确认是否remove channel里的event, via apache libbeat(2015): 通过Scan()来确认新增file, 然后为其new一个harvester发送到libbeat做聚合, via elastic Reference apache flume reliability filebeat-overview filebeat工作原理 data storage(raw) batch hdfs(2006): 分布式文件系统, 通过master-slave和replica机制来低成本高可靠地存储数据. via bigintellects stream kafka(2011): file system cache, zero copy(内核态), 顺序写磁盘. via dataflair pulsar(2016): 将无状态的消息服务层broker和有状态的消息持久层bookkeeper分离, 无状态可以随时增删, 而有状态却通过replica segment来做HA；当然还有scale out. via streamthoughts Reference 技术架构及选型 Dynamo: Amazon’s Highly Available Key-value Store Pulsar(新一代高性能消息系统)核心总结 BookKeeper 原理浅谈 Comparing Pulsar and Kafka Understanding How Apache Pulsar Works data compute batch spark(2014): lambda(batch-stream分离), master-slave, rdd, lineage, persist, via 0x0fff airflow(2015): high scalability, HA, UI manage, via clairvoyantsoft oozie(2011): server与compute分离, multilayer(bundle), HA, via devstacks 这里scheduler都是通过多server来避免SPOF, 而多server之间的状态同步是通过DB(ZK)来传递. 有别于常规的多server leader-standby模式(eg., kafka broker, DB主从复制) stream flink(2011): kappa, master-slave, state, window, cp, via apache Reference Making Apache Airflow Highly Available Oozie Architecture and Job Scheduling Lambda架构 vs Kappa架构 Flink–Checkpoint机制原理 一文搞懂Flink内部的Exactly Once和At Least Once data storage in-memory redis(2009): mem-base, 非阻塞多路IO复用, 事务, proactive expire, HA(sentinel), throughput(cluster), via redislabs ignite(2015): 分布式, KV, mem-disk SQL, 2PC事务, 数据本地性, via apache timeseries influxdb(2013): TSM, TSI, WAL/cache, rp, via hbasefly full-text es(2010): master-data, zen discovery , replica, LSM, full text MOLAP kylin(2013): 预计算cube, SQL, high scalability, MR, via apache druid(2011), role separate(master-query-data), LSM, via apache ROLAP clickhouse(2016): russia, column oriented, SQL, 主备复制, index(primary key sort), table engine, via altinity greenplum(2015): master-slave, append-optimized, SQL, resource queue, via researchgate tidb(2017): 分布式, SQL, raft, LSM, mysql alternative, via pingcap query engine presto(2013): master-slave, mem-base MPP, SQL, connector, via slideshare sparksql(2014): catalyst, cost base, rdd, via dataflair hive(2010): SQL, MR, metadata, via andr83 pig(2008): pig latin, MR, via dezyre graph neo4j(2007): 定长记录结构, cypher, HA, via slideshare Reference IO多路复用技术(multiplexing)是什么？ 为什么IO多路复用要搭配非阻塞 IO? Ignite(二): 架构及工具 数据库如何用 WAL 保证事务一致性？ Every shard deserves a home Guide to Refresh and Flush Operations in Elasticsearch Apache Kylin 入门 2 - 原理与架构 apache druid架构、原理、执行流程 数据结构篇—-B+树与LSM树浅析 ClickHouse表引擎到底怎么选 TiDB整体架构 Presto: SQL on Everything Presto架构及原理、安装及部署 Spark SQL Catalyst优化器 What is Hive Metastore? Neo4j_高层架构和应用 data analytics BI TODO TODO</summary></entry></feed>