<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-11-06T16:26:51+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">harry’s blog</title><subtitle>harry&apos;s technology blog 
</subtitle><author><name>harry</name><email>harry_c2016@163.com</email></author><entry><title type="html">如何优化一堆的if条件语句</title><link href="http://localhost:4000/2023/10/24/%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E4%B8%80%E5%A0%86%E7%9A%84if%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5.html" rel="alternate" type="text/html" title="如何优化一堆的if条件语句" /><published>2023-10-24T00:00:00+08:00</published><updated>2023-10-24T00:00:00+08:00</updated><id>http://localhost:4000/2023/10/24/%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E4%B8%80%E5%A0%86%E7%9A%84if%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5</id><content type="html" xml:base="http://localhost:4000/2023/10/24/%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E4%B8%80%E5%A0%86%E7%9A%84if%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5.html">&lt;h2 id=&quot;如何优化一堆的if条件语句&quot;&gt;如何优化一堆的if条件语句&lt;/h2&gt;

&lt;h3 id=&quot;1前提&quot;&gt;1.前提&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;currentList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outlinesIndex&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outlines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subOutlinesIndex&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outlinesIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subOutlines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outlinesIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subOutlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subOutlinesIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;livingCardPackageContentId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;///先定位至分区才能获取显示cell,否则因为cell重用无法获取到未显示的cell&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scrollToRow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outlinesIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;//bottomOffsetY &amp;lt;= 0 说明已经滑到最底部&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bottomOffsetY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bottomOffsetY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    
                    &lt;span class=&quot;kt&quot;&gt;DispatchQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;asyncAfter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;deadline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;///获取显示的cell&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cellForRow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outlinesIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ServicesListTableViewCell&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;subTableView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewWithTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;888&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;subCell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subTableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cellForRow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subOutlinesIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ServicesSubListTableViewCell&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;livingCellPoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;superview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;livingCellPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bottomOffsetY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setContentOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bottomOffsetY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setContentOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;livingCellPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们先来看一段代码，类似这样的代码是否也曾在你们的项目中无处不见？&lt;/p&gt;

&lt;h3 id=&quot;2-透过本质看问题&quot;&gt;2. 透过本质看问题&lt;/h3&gt;

&lt;p&gt;本身来说if语句是没有问题的，这也就是为什么几乎所有的语言都有设计if条件语句。if条件语句也会让逻辑更清晰、扩展。但是， 如果像上边这样if嵌套、if里做的事情较多，一个方法可能有100+以上的代码。那么if语句可能就会变的不是太好维护和扩展。我们需要一些手段去简化（或者叫优化）if语句。&lt;/p&gt;

&lt;h3 id=&quot;方案&quot;&gt;方案&lt;/h3&gt;

&lt;h4 id=&quot;31-卫语句&quot;&gt;3.1 卫语句&lt;/h4&gt;

&lt;p&gt;最简单方案莫过于卫语句，那么卫语句是什么什么？卫语句其实就是判断不符合的条件直接退出。比如：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xxxx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// swift 推荐&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xxxx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;善于使用卫语句，提前return，也在一定程度上简化if条件判断。但是首先我们的思路需要转变，我们需要先考虑不满足的条件。&lt;/p&gt;

&lt;h4 id=&quot;32-三目运算优化&quot;&gt;3.2 三目运算优化&lt;/h4&gt;

&lt;p&gt;那其实三目运算也是一种好的优化方式（：我就比较喜欢用三目运算， 但是三目运算也只能是适合简单的代替。&lt;/p&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func test() {
	var title = &quot;&quot;
	if type == .live {
		title = &quot;直播&quot;
	} else {
		title = &quot;回放&quot;
	}
}

// 我们其实用三目运算会更简单
func test() {
	let title = type == .live ? &quot;直播&quot; : &quot;回放&quot;
}
// 是不是看起来更简单。明了了呢？
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;33-合并条件&quot;&gt;3.3 合并条件&lt;/h4&gt;

&lt;p&gt;合并条件其实就是如果我们有处理相同事务的条件，可以进行合并判断。&lt;/p&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;live&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nf&quot;&gt;jumpLiveOrPlayback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nf&quot;&gt;jumpLiveOrPlayback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gaozhongXiaoBan&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nf&quot;&gt;jumpLiveOrPlayback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chuzhongXiaoBan&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nf&quot;&gt;jumpClassin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;video&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nf&quot;&gt;jumpVideo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 优化后&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;live&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gaozhongXiaoBan&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nf&quot;&gt;jumpLiveOrPlayback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chuzhongXiaoBan&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nf&quot;&gt;jumpClassin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;video&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nf&quot;&gt;jumpVideo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;合理的合并条件，在很大程度上能提高代码的可读性。&lt;/p&gt;

&lt;h4 id=&quot;34-if-内容封装&quot;&gt;3.4 if 内容封装&lt;/h4&gt;

&lt;p&gt;什么叫if内容封装， 也就是说我们将if条件为真需要执行的代码，用方法封装起来。&lt;/p&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;35-利用设计模式&quot;&gt;3.5 利用设计模式&lt;/h4&gt;

&lt;h5 id=&quot;351-策略模式&quot;&gt;3.5.1 策略模式&lt;/h5&gt;

&lt;p&gt;什么是策略模式呢？维基百科说：指对象有某个行为，但是在不同的场景中，该行为有不同的实现算法。从某种程度上说也是符合if条件语句的，条件语句则就是根据条件不同执行的逻辑不同。&lt;/p&gt;

&lt;p&gt;怎么实现呢？&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nf&quot;&gt;doSomething1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nf&quot;&gt;doSomething2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nf&quot;&gt;doSomething3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 优化后&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AbstractsStrategy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Strategy1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AbstractsStrategy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Strategy2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AbstractsStrategy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Strategy3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AbstractsStrategy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StrategyFactory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AbstractStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;strategyMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Strategy1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Strategy2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Strategy3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;
		
		&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			 &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategyMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
			 &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			 		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
			 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			 
			 &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;StragtegyFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;352-简单工厂模式&quot;&gt;3.5.2 简单工厂模式&lt;/h5&gt;

&lt;p&gt;其实简单工厂模式和策略模式代码类似，区别在于，简单工厂模式侧重于产出product实例。策略模式则是侧重于行为。所以根据设计模式的分类我们称简单工厂模式为创建型模式，而策略模式为行为模式。&lt;/p&gt;

&lt;p&gt;如：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nf&quot;&gt;doSomething1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nf&quot;&gt;doSomething2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nf&quot;&gt;doSomething3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AbstractHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Handler1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AbstractHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Handler2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AbstractHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Handler3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AbstractHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Handler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;strategyMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Handler1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Handler2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Handler3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AbstractHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;353-责任链模式&quot;&gt;3.5.3 责任链模式&lt;/h5&gt;

&lt;p&gt;责任链的定义为：每一个处理对象决定它能处理哪些命令对象，它也知道如何将它不能处理的命令对象传递给该链中的下一个处理对象。该模式还描述了往该处理链的末尾添加新的处理对象的方法（百度百科）。&lt;/p&gt;

&lt;p&gt;如：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nf&quot;&gt;doSomething1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nf&quot;&gt;doSomething2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nf&quot;&gt;doSomething3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AbstractHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AbstractHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
		
		&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		
		&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AbstractHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		
		&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
						&lt;span class=&quot;nf&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
						&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;没有处理器&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		
		&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Handler1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AbstractHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Handler2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AbstractHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Handler3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AbstractHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;handler1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Handler1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;handler2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Handler2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;handler3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Handler3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		
		&lt;span class=&quot;n&quot;&gt;handler1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;handler2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		
		&lt;span class=&quot;n&quot;&gt;handler1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;最后看一下我们开头说的代码优化后的样子：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;destinationRow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;destinationSection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outlines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstIndex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outline&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;destinationRow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subOutlines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;firstIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;livingCardPackageContentId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destinationRow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destinationSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destinationRow&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scrollToRow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// bottomOffsetY &amp;lt;= 0 说明内容不超过一屏&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bottomOffsetY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bottomOffsetY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;kt&quot;&gt;DispatchQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;asyncAfter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;deadline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;///获取显示的cell&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cellForRow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ServicesListTableViewCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;subTableView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;888&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;subCell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subTableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cellForRow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ServicesSubListTableViewCell&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;livingCellPoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;superview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;offsetY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;livingCellPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bottomOffsetY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bottomOffsetY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;livingCellPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setContentOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offsetY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

&lt;p&gt;当然使用设计模式去优化if代码，还有其他的设计模式，比如优先状态机等。&lt;/p&gt;

&lt;p&gt;所有的方式也是可以组合使用。我们的目的是让代码更好阅读、更好扩展、更好维护。&lt;/p&gt;

&lt;p&gt;不一定所有的if都要进行优化，一些简单的，本身来说就是很明确、很容易阅读、维护。那么其实就不需要优化。我们针对的是if过多、嵌套过多、不利于维护的代码。&lt;/p&gt;

&lt;p&gt;最后，引用常说的一句话，要不因为使用设计模式而设计代码，这样反而得不偿失。&lt;/p&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="iOS" /><category term="设计模式" /><summary type="html">如何优化一堆的if条件语句 1.前提 func test() { let currentList = model for outlinesIndex in 0...currentList.outlines.count - 1 { for subOutlinesIndex in 0...currentList.outlines[outlinesIndex].subOutlines.count - 1 { if currentList.outlines[outlinesIndex].subOutlines[subOutlinesIndex].id == currentList.livingCardPackageContentId { ///先定位至分区才能获取显示cell,否则因为cell重用无法获取到未显示的cell self.tableView.scrollToRow(at: IndexPath(row: 0, section: outlinesIndex), at: .none, animated: true) //bottomOffsetY &amp;lt;= 0 说明已经滑到最底部 let bottomOffsetY = self.tableView.contentSize.height - self.tableView.bounds.size.height guard bottomOffsetY &amp;gt; 0 else { return } DispatchQueue.main.asyncAfter(deadline: .now() + 0.25) { ///获取显示的cell guard let cell = self.tableView.cellForRow(at: IndexPath(row: 0, section: outlinesIndex)) as? ServicesListTableViewCell else { return } for view in cell.subviews { if let subTableView = view.viewWithTag(888) as? UITableView { guard let subCell = subTableView.cellForRow(at: IndexPath(row: subOutlinesIndex, section: 0)) as? ServicesSubListTableViewCell else { return } let livingCellPoint = self.tableView.convert(CGPoint(x: subCell.frame.origin.x, y: subCell.frame.origin.y), from: subCell.superview) if livingCellPoint.y &amp;gt; bottomOffsetY { self.tableView.setContentOffset(CGPoint.init(x: 0, y: bottomOffsetY), animated: true) } else { self.tableView.setContentOffset(CGPoint.init(x: 0, y: livingCellPoint.y - 8), animated: true) } } } } } } 我们先来看一段代码，类似这样的代码是否也曾在你们的项目中无处不见？ 2. 透过本质看问题 本身来说if语句是没有问题的，这也就是为什么几乎所有的语言都有设计if条件语句。if条件语句也会让逻辑更清晰、扩展。但是， 如果像上边这样if嵌套、if里做的事情较多，一个方法可能有100+以上的代码。那么if语句可能就会变的不是太好维护和扩展。我们需要一些手段去简化（或者叫优化）if语句。 方案 3.1 卫语句 最简单方案莫过于卫语句，那么卫语句是什么什么？卫语句其实就是判断不符合的条件直接退出。比如： func test() { if xxxx == nil { return } ... } // swift 推荐 func test() { guard xxxx != nil else { return } ... } 善于使用卫语句，提前return，也在一定程度上简化if条件判断。但是首先我们的思路需要转变，我们需要先考虑不满足的条件。 3.2 三目运算优化 那其实三目运算也是一种好的优化方式（：我就比较喜欢用三目运算， 但是三目运算也只能是适合简单的代替。 比如： func test() { var title = &quot;&quot; if type == .live { title = &quot;直播&quot; } else { title = &quot;回放&quot; } } // 我们其实用三目运算会更简单 func test() { let title = type == .live ? &quot;直播&quot; : &quot;回放&quot; } // 是不是看起来更简单。明了了呢？ 3.3 合并条件 合并条件其实就是如果我们有处理相同事务的条件，可以进行合并判断。 比如： func test() { if type == .live { jumpLiveOrPlayback() } else if == .playback { jumpLiveOrPlayback() } else if == .gaozhongXiaoBan { jumpLiveOrPlayback() } else if == .chuzhongXiaoBan { jumpClassin() } else if == .video { jumpVideo() } } // 优化后 func test() { if type == .live || type == .playback || type == .gaozhongXiaoBan { jumpLiveOrPlayback() } else if == .chuzhongXiaoBan { jumpClassin() } else if == .video { jumpVideo() } } 合理的合并条件，在很大程度上能提高代码的可读性。 3.4 if 内容封装 什么叫if内容封装， 也就是说我们将if条件为真需要执行的代码，用方法封装起来。 比如： func test() { if a == 1 { a() } else if a == 2 { b() } else if a == 3 { c() } else { d() } } func a() { ... } func b() { ... } func c() { ... } func d() { ... } 3.5 利用设计模式 3.5.1 策略模式 什么是策略模式呢？维基百科说：指对象有某个行为，但是在不同的场景中，该行为有不同的实现算法。从某种程度上说也是符合if条件语句的，条件语句则就是根据条件不同执行的逻辑不同。 怎么实现呢？ func test() { if type == 1 { doSomething1() } else if type == 2 { doSomething2() } else if type == 3 { doSomething3() } } // 优化后 open class AbstractsStrategy { func doSomething() {} } class Strategy1: AbstractsStrategy { override func doSomething() { ... } } class Strategy2: AbstractsStrategy { override func doSomething() { ... } } class Strategy3: AbstractsStrategy { override func doSomething() { ... } } class StrategyFactory { private var strategy: AbstractStrategy? private var strategyMap = [1: Strategy1(), 2: Strategy2(), 3: Strategy3()] func doSomething(_ type: Int) { strategy = strategyMap[type] guard let strategy = self.strategy else { return } strategy.doSomething() } } func test() { StragtegyFactory().doSomething(type) } 3.5.2 简单工厂模式 其实简单工厂模式和策略模式代码类似，区别在于，简单工厂模式侧重于产出product实例。策略模式则是侧重于行为。所以根据设计模式的分类我们称简单工厂模式为创建型模式，而策略模式为行为模式。 如： func test() { if type == 1 { doSomething1() } else if type == 2 { doSomething2() } else if type == 3 { doSomething3() } } open class AbstractHandler { func doSomething() } class Handler1: AbstractHandler { func doSomething() } class Handler2: AbstractHandler { func doSomething() } class Handler3: AbstractHandler { func doSomething() } class Handler { private var strategyMap = [1: Handler1(), 2: Handler2(), 3: Handler3()] class func create(_ type) -&amp;gt; AbstractHandler? { return Map[type] } } func test() { Handler.create(type)?.doSomething() } 3.5.3 责任链模式 责任链的定义为：每一个处理对象决定它能处理哪些命令对象，它也知道如何将它不能处理的命令对象传递给该链中的下一个处理对象。该模式还描述了往该处理链的末尾添加新的处理对象的方法（百度百科）。 如： func test() { if type == 1 { doSomething1() } else if type == 2 { doSomething2() } else if type == 3 { doSomething3() } } open class AbstractHandler { var next: AbstractHandler? var type: Int = 0 init(type: Int) { self.type = type } func setNext(_ next: AbstractHandler) { self.next = next } func execute(_ type: Int) { if type == self.type { do() } else if let next = self.next { next.doSomething() } else { print(&quot;没有处理器&quot;) } } func do() {} } class Handler1: AbstractHandler { init() { super.init(type: 1) } override func do() { ... } } class Handler2: AbstractHandler { init() { super.init(type: 2) } override func do() { ... } } class Handler3: AbstractHandler { init() { super.init(type: 3) } override func do() { ... } } func test() { let handler1 = Handler1() let handler2 = Handler2() let handler3 = Handler3() handler1.setNext(handler2) handler2.setNext(handler3) handler1.execute(type) } 最后看一下我们开头说的代码优化后的样子： func test() { var destinationRow: Int? = nil let destinationSection = model.outlines.firstIndex { outline in destinationRow = outline.subOutlines.firstIndex(where: {$0.id == model.livingCardPackageContentId}) return destinationRow != nil } guard let section = destinationSection, let row = destinationRow else { return } self.tableView.scrollToRow(at: IndexPath(row: 0, section: section), at: .none, animated: true) // bottomOffsetY &amp;lt;= 0 说明内容不超过一屏 let bottomOffsetY = self.tableView.contentSize.height - self.tableView.bounds.size.height guard bottomOffsetY &amp;gt; 0 else { return } DispatchQueue.main.asyncAfter(deadline: .now() + 0.25) { ///获取显示的cell guard let cell = self.tableView.cellForRow(at: IndexPath(row: 0, section: section)) as? ServicesListTableViewCell, let subTableView = cell.subviews.first(where: {$0.tag == 888}) as? UITableView, let subCell = subTableView.cellForRow(at: IndexPath(row: row, section: 0)) as? ServicesSubListTableViewCell else { return } let livingCellPoint = self.tableView.convert(CGPoint(x: subCell.frame.origin.x, y: subCell.frame.origin.y), from: subCell.superview) let offsetY = livingCellPoint.y &amp;gt; bottomOffsetY ? bottomOffsetY : livingCellPoint.y - 8 self.tableView.setContentOffset(CGPoint.init(x: 0, y: offsetY), animated: true) } } 总结 当然使用设计模式去优化if代码，还有其他的设计模式，比如优先状态机等。 所有的方式也是可以组合使用。我们的目的是让代码更好阅读、更好扩展、更好维护。 不一定所有的if都要进行优化，一些简单的，本身来说就是很明确、很容易阅读、维护。那么其实就不需要优化。我们针对的是if过多、嵌套过多、不利于维护的代码。 最后，引用常说的一句话，要不因为使用设计模式而设计代码，这样反而得不偿失。</summary></entry><entry><title type="html">使用homeBrew 发布自己的Mac 软件</title><link href="http://localhost:4000/2023/08/17/%E4%BD%BF%E7%94%A8hombrew-%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E7%9A%84Mac-app.html" rel="alternate" type="text/html" title="使用homeBrew 发布自己的Mac 软件" /><published>2023-08-17T00:00:00+08:00</published><updated>2023-08-17T00:00:00+08:00</updated><id>http://localhost:4000/2023/08/17/%E4%BD%BF%E7%94%A8hombrew%20%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E7%9A%84Mac%20app</id><content type="html" xml:base="http://localhost:4000/2023/08/17/%E4%BD%BF%E7%94%A8hombrew-%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E7%9A%84Mac-app.html">&lt;h2 id=&quot;使用home-brew-发布自己的mac-软件&quot;&gt;使用Home Brew 发布自己的Mac 软件&lt;/h2&gt;

&lt;h3 id=&quot;制作三方home-brew-tap&quot;&gt;制作三方home brew tap&lt;/h3&gt;

&lt;p&gt;制作HomeBrew 三方tap的教程我已经在之前的文章有介绍过了，在这就不在赘述了。有需要的小伙伴可以去&lt;a href=&quot;https://haoxiansen.github.io/2023/02/03/%E5%88%9B%E5%BB%BA%E4%B8%89%E6%96%B9homeBrew.html&quot;&gt;这里&lt;/a&gt;自行学习。&lt;/p&gt;

&lt;h3 id=&quot;制作dmg文件&quot;&gt;制作.dmg文件&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;打开磁盘工具&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230817195344image-20230817195343871.png&quot; alt=&quot;image-20230817195343871&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;选择“文件”-“新建映像”-“空白映像”&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230817195534image-20230817195534431.png&quot; alt=&quot;image-20230817195534431&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;命名为temp， 大小可以根据实际app大小给一个&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230817195651image-20230817195650815.png&quot; alt=&quot;image-20230817195650815&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;完成之后会出现temp的dmg以及未命名的一个磁盘&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230817195851image-20230817195851150.png&quot; alt=&quot;image-20230817195851150&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;准备三个材料：1、打好的.app包 2、app包的icon 3、应用程序的替身&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;1/2 就不用多介绍了&lt;/li&gt;
      &lt;li&gt;应用程序的替身制作，打开“电脑”-“Macintosh HD”-“应用程序”-双击选择“制作替身”选项&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;打开“未命名”的磁盘， 将1、2、3 拖入&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;双击空白区， 选择“查看显示选项”&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230817200525image-20230817200524935.png&quot; alt=&quot;image-20230817200524935&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将我们2的背景图片，拖到背景图片位置&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230817200613image-20230817200613713.png&quot; alt=&quot;image-20230817200613713&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;重新打开磁盘工具，选择“映像”-“转换”&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230817200711image-20230817200711769.png&quot; alt=&quot;image-20230817200711769&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;选取刚才temp.dmg，存储为我们app的名字&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230817200836image-20230817200836058.png&quot; alt=&quot;image-20230817200836058&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;至此我们dmg就只做完毕，打开.dmg， 就出现了我们常见的页面&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230817201051image-20230817201051546.png&quot; alt=&quot;image-20230817201051546&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;创建cask-脚本&quot;&gt;创建Cask 脚本&lt;/h3&gt;

&lt;h4 id=&quot;将dmg放到可访问下载的地址&quot;&gt;将dmg放到可访问下载的地址&lt;/h4&gt;

&lt;p&gt;这里我选择在github重新建一个Repo用来存放dmg， 然后创建一个release，存放有dmg，如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230817201343image-20230817201343224.png&quot; alt=&quot;image-20230817201343224&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;创建cask脚本&quot;&gt;创建Cask脚本&lt;/h4&gt;

&lt;p&gt;使用命令&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew create --cask [dmg_download_url]&lt;/code&gt; 创建一个cask ruby 脚本。&lt;/p&gt;

&lt;p&gt;补充好需要内容，如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230817201534image-20230817201534286.png&quot; alt=&quot;image-20230817201534286&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;发布到公有cask仓库&quot;&gt;发布到公有cask仓库&lt;/h4&gt;

&lt;p&gt;发布到cask 公有仓库，需要先可执行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew audit --cask --new kcode&lt;/code&gt; 命令检查。其中kcode 是我自己的cask名字。&lt;/p&gt;

&lt;p&gt;需要注意的是，homebrew会去检查你的项目查看数、点赞数、签名等等，需要满足条件才能发布，要不然就会报以下错误：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230817201834image-20230817201834123.png&quot; alt=&quot;image-20230817201834123&quot; /&gt;&lt;/p&gt;

&lt;p&gt;很明显，我们不满足要求，所以我们没法用公开的cask仓库。&lt;/p&gt;

&lt;p&gt;我们选择三方仓库tap使用。&lt;/p&gt;

&lt;h4 id=&quot;发布三方tap仓库&quot;&gt;发布三方tap仓库&lt;/h4&gt;

&lt;p&gt;如果你是新建的tap仓库，那么你需要新建一个Casks目录，然后将rb脚本放到这个目录里。然后去执行添加tap（&lt;strong&gt;需要注意的是先保证的你的三方tap仓库push了&lt;/strong&gt;）：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew tap &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;xxx/repo] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;url]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;而我已经有tap仓库了，那么同样我需要新建一个Casks目录，然后将rb脚本放到这个目录下，然后Push项目，执行更新操作：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew update 
// 或者
brew tap &lt;span class=&quot;nt&quot;&gt;--force-auto-update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;xxx/repo]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装--更新&quot;&gt;安装 | 更新&lt;/h3&gt;

&lt;p&gt;安装&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew tap brew tap &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;xxx/repo] &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; brew &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;app_name]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;更新&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew update
brew upgrade &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;cask_name]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果要更新app的版本：&lt;/p&gt;

&lt;p&gt;我们需要先去三方tap里改脚本的版本号，以及对应sha256。具体sha256怎么生成，请到第一部分所提到的文章里看。&lt;/p&gt;

&lt;h3 id=&quot;参考文章&quot;&gt;参考文章&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.brew.sh/Cask-Cookbook#stanza-zap&quot;&gt;Cask Cookbook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://haoxiansen.github.io/2023/02/03/%E5%88%9B%E5%BB%BA%E4%B8%89%E6%96%B9homeBrew.html&quot;&gt;如何创建一个三方home brew tap&lt;/a&gt;&lt;/p&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="homebrew" /><summary type="html">使用Home Brew 发布自己的Mac 软件 制作三方home brew tap 制作HomeBrew 三方tap的教程我已经在之前的文章有介绍过了，在这就不在赘述了。有需要的小伙伴可以去这里自行学习。 制作.dmg文件 打开磁盘工具 选择“文件”-“新建映像”-“空白映像” 命名为temp， 大小可以根据实际app大小给一个 完成之后会出现temp的dmg以及未命名的一个磁盘 准备三个材料：1、打好的.app包 2、app包的icon 3、应用程序的替身 1/2 就不用多介绍了 应用程序的替身制作，打开“电脑”-“Macintosh HD”-“应用程序”-双击选择“制作替身”选项 打开“未命名”的磁盘， 将1、2、3 拖入 双击空白区， 选择“查看显示选项” 将我们2的背景图片，拖到背景图片位置 重新打开磁盘工具，选择“映像”-“转换” 选取刚才temp.dmg，存储为我们app的名字 至此我们dmg就只做完毕，打开.dmg， 就出现了我们常见的页面 创建Cask 脚本 将dmg放到可访问下载的地址 这里我选择在github重新建一个Repo用来存放dmg， 然后创建一个release，存放有dmg，如下： 创建Cask脚本 使用命令brew create --cask [dmg_download_url] 创建一个cask ruby 脚本。 补充好需要内容，如下： 发布到公有cask仓库 发布到cask 公有仓库，需要先可执行brew audit --cask --new kcode 命令检查。其中kcode 是我自己的cask名字。 需要注意的是，homebrew会去检查你的项目查看数、点赞数、签名等等，需要满足条件才能发布，要不然就会报以下错误： 很明显，我们不满足要求，所以我们没法用公开的cask仓库。 我们选择三方仓库tap使用。 发布三方tap仓库 如果你是新建的tap仓库，那么你需要新建一个Casks目录，然后将rb脚本放到这个目录里。然后去执行添加tap（需要注意的是先保证的你的三方tap仓库push了）： brew tap [xxx/repo] [url] 而我已经有tap仓库了，那么同样我需要新建一个Casks目录，然后将rb脚本放到这个目录下，然后Push项目，执行更新操作： brew update // 或者 brew tap --force-auto-update [xxx/repo] 安装 | 更新 安装 brew tap brew tap [xxx/repo] &amp;amp;&amp;amp; brew install [app_name] 更新 brew update brew upgrade [cask_name] 如果要更新app的版本： 我们需要先去三方tap里改脚本的版本号，以及对应sha256。具体sha256怎么生成，请到第一部分所提到的文章里看。 参考文章 Cask Cookbook 如何创建一个三方home brew tap</summary></entry><entry><title type="html">Flutter 入门简介</title><link href="http://localhost:4000/2023/08/07/Flutter%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D.html" rel="alternate" type="text/html" title="Flutter 入门简介" /><published>2023-08-07T00:00:00+08:00</published><updated>2023-08-07T00:00:00+08:00</updated><id>http://localhost:4000/2023/08/07/Flutter%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D</id><content type="html" xml:base="http://localhost:4000/2023/08/07/Flutter%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D.html">&lt;h2 id=&quot;flutter-入门简介&quot;&gt;Flutter 入门简介&lt;/h2&gt;

&lt;h3 id=&quot;1-简介&quot;&gt;1 简介&lt;/h3&gt;

&lt;p&gt;Flutter 是由谷歌开发推出的一款开源的移动应用开发框架，其主打的就是&lt;strong&gt;跨平台、高保真、高性能&lt;/strong&gt;。其开发呢主要使用的&lt;strong&gt;dart&lt;/strong&gt;语言。一套代码可以同时在Android和iOS  系统上运行。并且Flutter 还可以和原生进行混合开发。&lt;/p&gt;

&lt;h3 id=&quot;2-主要优势&quot;&gt;2 主要优势&lt;/h3&gt;

&lt;h4 id=&quot;21跨平台自绘渲染引擎&quot;&gt;2.1跨平台自绘渲染引擎&lt;/h4&gt;

&lt;p&gt;Flutter 采用自绘渲染引擎&lt;strong&gt;Skia&lt;/strong&gt;，那么和其他的跨平台框架不同的是，其他框架要不采用webView进行渲染，要不采用操作原生控件进行渲染， 并且避免了像RN，weex那样不断和native进行布局同步，导致的布局卡顿，手势卡顿等问题。那么Flutter利用自己的跨平台2d绘制渲染引擎，不仅可以保证UI的一致性，而且能降低维护的成本。（Skia是安卓系统一直使用的一个2d绘制渲染引擎）。&lt;/p&gt;

&lt;h4 id=&quot;22-高性能&quot;&gt;2.2 高性能&lt;/h4&gt;

&lt;p&gt;Flutter 支持了JIT（Just-In-Time 即时编译（动态编译）） 和 AOT （Ahead-of-time 静态编译）。&lt;/p&gt;

&lt;p&gt;JIT 也就是程序在运行过程中实时将源码编翻译成机器码，也叫做动态编译，这种方式被称为JIT，典型的代表则为JavaScript。值得一提的是其实绝大多数的脚本语言都支持JIT。&lt;/p&gt;

&lt;p&gt;AOT 需要提前将程序编译成机器码或者机器字节码，也叫做静态编译。比如我们OC、Swift、安卓的java、C、C++，都需要编译、链接之后才能运行程序。&lt;/p&gt;

&lt;p&gt;那么Flutter既支持了JIT有支持了AOT，也就是说我们在开发的时候可以使用JIT进行快速开发，不需要保证应用的性能，可以做到随时改动、随时看到。在发布包的时候采用AOT，保证程序运行的新能。可以说鱼与熊掌兼得。&lt;/p&gt;

&lt;h4 id=&quot;23-快速内存分配&quot;&gt;2.3 快速内存分配&lt;/h4&gt;

&lt;p&gt;Flutter 使用函数式流，而dart的开发成员很多是来自于Chrome的开发，鉴于Chrome V8的javaScript的内存分配，dart底层也拥有一个能够有效处理琐碎任务的内存分配器。&lt;/p&gt;

&lt;h6 id=&quot;课外小知识函数式流&quot;&gt;课外小知识–函数式流&lt;/h6&gt;

&lt;p&gt;函数式流通常指的是使用函数式编程范式来处理数据流和状态变化，函数式编程是一种编程范式，它强调使用纯函数（无副作用的函数）和不可变数据结构来编写程序。这种范式有助于提高代码的可读性、可维护性和可测试性。&lt;/p&gt;

&lt;p&gt;函数式编程范式中的不可变数据结构和纯函数有助于减少内存分配。由于数据结构是不可变的，我们不需要为修改数据结构而分配新的内存。相反，我们可以通过共享不可变数据结构的部分来创建新的数据结构，从而减少内存分配。&lt;/p&gt;

&lt;h4 id=&quot;24-类型安全和空安全&quot;&gt;2.4 类型安全和空安全&lt;/h4&gt;

&lt;p&gt;dart 语言是类型安全语言， 2.12版本支持了空安全。支持静态类型检测，所以可以再编译前发现一些类型的错误，排除一些错误。&lt;/p&gt;

&lt;h6 id=&quot;课外小知识空安全&quot;&gt;课外小知识–空安全&lt;/h6&gt;

&lt;p&gt;空安全是一种编程语言的特性，指的是在帮助开发者避免空引用的错误，通常指试图访问一个空（null）对象的属性或者方法时，可能导致程序出现崩溃或者不可预期的错误。&lt;/p&gt;

&lt;h4 id=&quot;25-dart-团队就在身边&quot;&gt;2.5 dart 团队就在身边&lt;/h4&gt;

&lt;p&gt;因为dart团队和flutter团队同处于一个公司，那么对于Flutter想要dart支持的一些特性、功能dart团队也能快速沟通、快速实现。举例来说就是：最初dart团队并没有提供生成原生二进制的工具链，但是后边它实现了，因为dart团队专门为flutter开发了这一工具链。&lt;/p&gt;

&lt;h3 id=&quot;3-flutter框架结构&quot;&gt;3 Flutter框架结构&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://book.flutterchina.club/assets/img/1-1.82c25693.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;31-framework-层&quot;&gt;3.1 framework 层&lt;/h4&gt;

&lt;p&gt;framework层是完全有dart语言实现的sdk，它实现了一套基础库。从底向上分别是为&lt;/p&gt;

&lt;h5 id=&quot;311-foundationanimationpaintinggestures&quot;&gt;3.1.1 Foundation，Animation、Painting、Gestures&lt;/h5&gt;

&lt;p&gt;这一层又被称之为UI层。是Engine暴漏的底层UI层，主要提供了动画、绘制、手势。&lt;/p&gt;

&lt;h5 id=&quot;332-rendering&quot;&gt;3.3.2 Rendering&lt;/h5&gt;

&lt;p&gt;这一层是渲染层，渲染层会构建一颗由RenderObject组成的&lt;strong&gt;渲染树&lt;/strong&gt;。当动态更新这些对象的时候，渲染树找出变化的部分，然后更新渲染。它是Flutter比较重要的部分，不仅要确定渲染对象的位置、大小还要进行坐标变换和绘制，当然绘制调用dart:UI层进行。&lt;/p&gt;

&lt;h5 id=&quot;333-widgets&quot;&gt;3.3.3 Widgets&lt;/h5&gt;

&lt;p&gt;Widgets是Flutter提供给我们一套基础组件库，提供了Material、Cupertino 两套分别符合安卓和iOS设计规范的组件。&lt;/p&gt;

&lt;p&gt;值得一说的是，其实我们打交道最多的就是framework层，其中widgets是开发应用最多的，但是其中如果你有自定义（或者定制）的widgets，得需要Rendering层或者Painting。&lt;/p&gt;

&lt;h4 id=&quot;32-flutter-engine&quot;&gt;3.2 Flutter Engine&lt;/h4&gt;

&lt;p&gt;这一层是Flutter的引擎层，其中包含了Skia渲染引擎、Dart运行时、以及文字排版引擎等。其使用C++实现。上一层的dart：UI最终会调用到这一层。&lt;/p&gt;

&lt;h4 id=&quot;33-embedder&quot;&gt;3.3 Embedder&lt;/h4&gt;

&lt;p&gt;嵌入层。嵌入层呢主要将我们的Flutter引擎安装到对应平台上。其实现是采用当前平台的原生语言实现。通过嵌入层，可以将flutter代码以模块方式嵌入到当前应用中，或者作为主体。&lt;/p&gt;

&lt;h3 id=&quot;4-集成flutter开发环境&quot;&gt;4 集成Flutter开发环境&lt;/h3&gt;

&lt;h4 id=&quot;41-开发ide&quot;&gt;4.1 开发IDE&lt;/h4&gt;

&lt;p&gt;推荐使用Android studio或者VS Code开发，官方提供了他们开发Flutter的插件，支持更多功能。&lt;/p&gt;

&lt;h4 id=&quot;42-安装flutter&quot;&gt;4.2 安装Flutter&lt;/h4&gt;

&lt;p&gt;具体查看&lt;a href=&quot;https://book.flutterchina.club/chapter1/install_flutter.html#_1-3-1-%E5%AE%89%E8%A3%85flutter&quot;&gt;Flutter中文网&lt;/a&gt; 或者&lt;a href=&quot;https://flutter.cn/docs/get-started/install&quot;&gt;Flutter 官网&lt;/a&gt;。照着做即可，不在赘述。&lt;/p&gt;

&lt;h4 id=&quot;43-链接模拟器真机&quot;&gt;4.3 链接模拟器/真机&lt;/h4&gt;

&lt;p&gt;具体查看&lt;a href=&quot;https://book.flutterchina.club/chapter1/install_flutter.html#_1-3-1-%E5%AE%89%E8%A3%85flutter&quot;&gt;Flutter中文网&lt;/a&gt; 或者&lt;a href=&quot;https://flutter.cn/docs/get-started/install&quot;&gt;Flutter 官网&lt;/a&gt;。照着做即可，不在赘述。&lt;/p&gt;

&lt;h3 id=&quot;5-widgets&quot;&gt;5 Widgets&lt;/h3&gt;

&lt;p&gt;Flutter Widget 不同于我们原生开发所说的控件，Flutter 几乎所有的对象都叫做Widget，它不仅可以表示UI控件，也可以表示功能性组件，比如手势检测器GestureDetector。Widget只是UI信息配置信息的对象，并不是真正绘制到屏幕上的元素。&lt;/p&gt;

&lt;h4 id=&quot;51-flutter-中的四棵树&quot;&gt;5.1 Flutter 中的四棵树&lt;/h4&gt;

&lt;p&gt;基本流程为：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;根据Widget树生成Element树，每个Element节点类都继承于Element类；&lt;/li&gt;
  &lt;li&gt;根据Element树生成Render树（渲染树），渲染树中每个节点类都继承于RenderObject；&lt;/li&gt;
  &lt;li&gt;根据Render树生成Layer树，然后显示到屏幕上，Layer树中的每个节点类都继承于Layer类。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;真正的渲染和布局是在Render树中，Element树是Widget和Render的桥梁。&lt;/p&gt;

&lt;p&gt;举个栗子：&lt;/p&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 一个容器 widget&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 设置容器背景色&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;child:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 可以将子widget沿水平方向排列&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;children:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;https://www.example.com/1.png&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 显示图片的 widget&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://book.flutterchina.club/assets/img/2-2.59d95f72.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中Widget和Element是一一对应的，但是并不合Render一一对应。其实我们通常讲的Flutter只有上面三棵树，但是其实在上屏之前呢，还会根据Render树生成一颗Layer树。&lt;/p&gt;

&lt;h4 id=&quot;52-statelesswidget-和statefulwidget-以及state&quot;&gt;5.2 StatelessWidget 和StatefulWidget 以及State&lt;/h4&gt;

&lt;p&gt;StatelessWidget 和 StatefulWidget都继承于Widget抽象类。&lt;/p&gt;

&lt;p&gt;其中StatelessWidget 是用于不需要维护状态的场景，通常我们会在其override 方法 build(BuildContext context)里组合嵌套其他的组件构建UI。&lt;/p&gt;

&lt;p&gt;StatefulWidget 是用于需要维护状态的场景，与StatelessWidget不同的是，我们不再拥有 build(BuildContext context)方法。取而代之的是createState()方法，我们需要生成一个State类，用来存储状态。&lt;/p&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;package:flutter/material.dart&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestStatelessWidget&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StatelessWidget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestStatelessWidget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BuildContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;child:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;child:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;StatelessWidget&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestStatefulWidget&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StatefulWidget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestStatefulWidget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TestWidgetState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestWidgetState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestWidgetState&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestStatefulWidget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Widget 第一次插入Widget树调用，对于每一个State对象，只会调用一次&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;initState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;debugPrint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;initState&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 用于构建Widget&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BuildContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;debugPrint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scaffold&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;body:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;child:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;nl&quot;&gt;child:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$_count&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;nl&quot;&gt;onPressed:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Widget 重新构建时调用&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didUpdateWidget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;covariant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestStatefulWidget&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldWidget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;didUpdateWidget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldWidget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;debugPrint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;didUpdateWidget&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// State 对象从树中移除&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deactivate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// TODO: implement deactivate&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deactivate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;debugPrint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;deactivate&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 热重载时&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reassemble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// TODO: implement reassemble&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reassemble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;debugPrint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;reassemble&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 当state对象依赖发生变化时&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didChangeDependencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// TODO: implement didChangeDependencies&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;didChangeDependencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;debugPrint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;didChangeDependencies&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 当state对象从树中永久移除时。&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispose&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// TODO: implement dispose&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dispose&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;debugPrint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;didChangeDependencies&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;什么叫做状态&quot;&gt;什么叫做状态？&lt;/h6&gt;

&lt;p&gt;在Flutter中，状态（State）是指应用程序中的数据，这些数据会随着时间的推移而发生变化。状态可以包括用户界面的外观、用户交互产生的数据、从服务器获取的数据等。状态的变化通常会导致应用程序的界面发生变化，例如按钮的颜色、文本的内容等。&lt;/p&gt;

&lt;p&gt;在Flutter中，状态管理是一个重要的概念。由于Flutter使用声明式编程范式，组件（Widget）是不可变的，这意味着一旦创建，它们的属性就不能被修改。因此，当应用程序的状态发生变化时，我们需要创建一个新的组件实例来反映这些变化。&lt;/p&gt;

&lt;p&gt;所以结合着以上所说的StatelessWidget和StatefullWidget、State想必大家就会有一个明确的认知State。&lt;/p&gt;

&lt;h4 id=&quot;53-state状态管理简述&quot;&gt;5.3 State状态管理（简述）&lt;/h4&gt;

&lt;p&gt;Flutter的状态管理分为以下几种：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Widget 自身管理， 如上边的例子&lt;/li&gt;
  &lt;li&gt;父Widget管理子Widget状态；&lt;/li&gt;
  &lt;li&gt;混合管理，即组件自身管理一些内部状态，而父组件管理一些其他外部状态。&lt;/li&gt;
  &lt;li&gt;全局状态管理，用于跨组件/跨路由的状态管理&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;通常我们会采用专门用于状态的管理的三方包，进行简化管理，比如Bloc、Provider。（看情况出一个例子）&lt;/p&gt;

&lt;h3 id=&quot;6-路由管理&quot;&gt;6 路由管理&lt;/h3&gt;

&lt;p&gt;所谓的路由管理，其实就是管理页面如何跳转，也称之为导航管理。那么对于Android和iOS客户端来说，都是维护一个路由栈，Push 入栈打开一个新页面， Pop出栈关闭页面。&lt;/p&gt;

&lt;h4 id=&quot;61-通过navigator-和-materialpageroute-实现&quot;&gt;6.1 通过Navigator 和 MaterialPageRoute 实现&lt;/h4&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// HomePageState &lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BuildContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scaffold&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 省略代码&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;body:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;child:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 省略代码&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;TextButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;nl&quot;&gt;onPressed:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_routePageA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nl&quot;&gt;child:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&apos;打开pageA&apos;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 省略代码&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_routePageA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Navigator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MaterialPageRoute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;builder:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PageA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 输出返回值&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// PageA&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BuildContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scaffold&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;body:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;child:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;children:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;CupertinoButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
              &lt;span class=&quot;nl&quot;&gt;onPressed:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_back&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
              &lt;span class=&quot;nl&quot;&gt;child:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;返回&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_back&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BuildContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Navigator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;我是返回值&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;62-通过路由表名&quot;&gt;6.2 通过路由表名&lt;/h4&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyApp&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StatelessWidget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// This widget is the root of your application.&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BuildContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MaterialApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;routes:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;pageA&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModalRoute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)?.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PageA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;title:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;PageB&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PageB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyHomePage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;title:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;首页&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;initialRoute:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 初始路由&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 使用&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_MyHomePageState&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyHomePage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_routePageB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Navigator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pushNamed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PageB&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;debugPrint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;我是PageA反传值：&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$result&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当然我们推荐使用路由表管理，因为1. 代码更好维护， 集中管理路由 2. 语义更加明确 3. 可以通过onGenerateRoute做路由跳转的一些前置处理。&lt;/p&gt;

&lt;h3 id=&quot;7-包管理--资源管理&quot;&gt;7 包管理 &amp;amp; 资源管理&lt;/h3&gt;

&lt;h4 id=&quot;71-包管理&quot;&gt;7.1 包管理&lt;/h4&gt;

&lt;p&gt;App 在实际开发中会依赖很多包，这些包通常可能会存在交叉依赖、版本依赖等。所以，这种开发生态都会出现一些包管理工具，比如Android使用Gradle来管理依赖，iOS 使用Cocoapods或者Carthage管理依赖。Flutter 也拥有自己包管理工具，它使用pubspec.yaml 文件管理。如：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;flutter_in_action&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;First Flutter Application.&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1.0.0+1&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;flutter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sdk&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;flutter&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;cupertino_icons&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;^0.1.2&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;dev_dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;flutter_test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sdk&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;flutter&lt;/span&gt;
    
&lt;span class=&quot;na&quot;&gt;flutter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;uses-material-design&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;：应用或包名称。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;description&lt;/code&gt;: 应用或包的描述、简介。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;version&lt;/code&gt;：应用或包的版本号。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dependencies&lt;/code&gt;：应用或包依赖的其他包或插件。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev_dependencies&lt;/code&gt;：开发环境依赖的工具包（而不是flutter应用本身依赖的包）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter&lt;/code&gt;：flutter相关的配置选项。&lt;/p&gt;

    &lt;h5 id=&quot;711-依赖三方pub&quot;&gt;7.1.1 依赖三方pub&lt;/h5&gt;

    &lt;p&gt;官方Dart Package位于Pub（https://pub.dev/ ），我们可以在上面查找需要依赖的package以及版本号和package介绍。&lt;/p&gt;

    &lt;p&gt;依赖方式如下：&lt;/p&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;flutter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sdk&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;flutter&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;cupertino_icons&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;^0.1.2&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;dio&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;^5.3.2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;然后执行： &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dart pub get&lt;/code&gt; 或者直接在Android studio里上方点击Pub get即可&lt;/p&gt;

    &lt;h5 id=&quot;712-依赖本地包私有包&quot;&gt;7.1.2 依赖本地包/私有包&lt;/h5&gt;

    &lt;p&gt;本地包：&lt;/p&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pkg1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;../../code/pkg1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;git 包(package 位于根目录)：&lt;/p&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pkg1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git://github.com/xxx/pkg1.git&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;git 包(package 位于非目录)：&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dependencies:
  pkg1:
    git:
      url: git://github.com/xxx/pkg1.git
      path: packages/package1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;h4 id=&quot;713-flutter-包的分类&quot;&gt;7.1.3 Flutter 包的分类&lt;/h4&gt;

    &lt;ol&gt;
      &lt;li&gt;dart 包： 纯dart编写的包，指依赖flutter框架&lt;/li&gt;
      &lt;li&gt;插件包：包含Dart编写的API， 以及特定平台的特定实现，也就是说插件包需要实现原生功能交互。比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;image_picker&lt;/code&gt; 实现了图片选取 + 照相功能。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;72-资源管理&quot;&gt;7.2 资源管理&lt;/h4&gt;

&lt;p&gt;Flutter 资源管理也是在pubspec.yaml 文件里配置的。如下：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;flutter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# To add assets to your application, add an assets section, like this:&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;images/2x/a_dot_burr.png&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;images/3x/a_dot_burr.png&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 2x,3x代表分辨率&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用：&lt;/p&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BuildContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// return Center(&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//   child: Image.asset(&quot;a_dot_burr.png&quot;)); &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 或者&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;child:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;image:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AssetImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a_dot_burr.png&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;8-组件简介&quot;&gt;8 组件简介&lt;/h3&gt;

&lt;p&gt;Flutter 中的组件大概分为下面几类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;基础组件
    &lt;ul&gt;
      &lt;li&gt;Text、TextStyle等&lt;/li&gt;
      &lt;li&gt;TextButton、ElevatedButton等&lt;/li&gt;
      &lt;li&gt;…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;布局类组件
    &lt;ul&gt;
      &lt;li&gt;Row、Colum 线性布局&lt;/li&gt;
      &lt;li&gt;Flex 弹性布局&lt;/li&gt;
      &lt;li&gt;Wrap、Flow 流式布局&lt;/li&gt;
      &lt;li&gt;Stack、Positioned 层叠布局&lt;/li&gt;
      &lt;li&gt;Align 对齐与相对定位&lt;/li&gt;
      &lt;li&gt;…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;容器类组件
    &lt;ul&gt;
      &lt;li&gt;Container 容器组件&lt;/li&gt;
      &lt;li&gt;DecoratedBox 装饰容器&lt;/li&gt;
      &lt;li&gt;Scaffold 页面脚手架&lt;/li&gt;
      &lt;li&gt;….&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;可滚动组件
    &lt;ul&gt;
      &lt;li&gt;SingleChildScrollView&lt;/li&gt;
      &lt;li&gt;ListView&lt;/li&gt;
      &lt;li&gt;GridView&lt;/li&gt;
      &lt;li&gt;PageView&lt;/li&gt;
      &lt;li&gt;….&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;功能性组件
    &lt;ul&gt;
      &lt;li&gt;WillPopScope 导航返回拦截&lt;/li&gt;
      &lt;li&gt;InheritedWidget 数据共享&lt;/li&gt;
      &lt;li&gt;…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;手势、事件处理和通知；动画；自定义组件，自行了解。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;9-混合开发&quot;&gt;9 混合开发&lt;/h3&gt;

&lt;p&gt;一般情况下，我们不可能将现有的项目一下子都转化Flutter，只能循序渐进、逐渐的加入Flutter或者改写为Flutter，这个时候我们就需要考虑，以下几件事情：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;怎么继承Flutter开发的模块&lt;/p&gt;

    &lt;p&gt;flutter 官网提供了 iOS 三种集成Flutter的方式：&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;&lt;strong&gt;使用 CocoaPods 依赖管理器安装 Flutter SDK&lt;/strong&gt; 使用这种方法，每次构建应用的时候都会从源代码中编译 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter_module&lt;/code&gt;。(推荐)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;创建一个框架，把 Flutter 引擎、已编译的 Dart 代码和所有 Flutter 插件都放进去&lt;/strong&gt; 这种方式你可以手动嵌入这个框架，并在 Xcode 中更改现有的应用的构建设置。如果不想要求开发团队的每一位成员都在本地安装 Flutter SDK 和 Cocoapods，这种方式比较适用&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;为已编译的 Dart 代码和所有 Flutter 插件创建一个框架，对 Flutter 引擎使用 CocoaPods 来管理&lt;/strong&gt; 这种方式是将应用内容和插件作为内嵌的框架，但将 Flutter 引擎作为 CocoaPods podspec 分发。这有点类似第二种方式，但是它为分发大型的 Flutter.xcframework 文件提供了替代方案。&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;首先通过以下命令创建一个flutter_module&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;some/path/
flutter create &lt;span class=&quot;nt&quot;&gt;--template&lt;/span&gt; module my_flutter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;使用1.方式集成：&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;flutter 模块执行flutter build ios –debug / –release&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Podfile 里加入一下代码&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;flutter_application_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;../my_flutter&apos;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flutter_application_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;.ios&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Flutter&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;podhelper.rb&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;MyApp&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;install_all_flutter_pods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flutter_application_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;post_install&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;installer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;flutter_post_install&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;installer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;defined?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flutter_post_install&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;pod install 执行完毕后，打开.xcworkspace即可&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;使用2. 方法集成&lt;/p&gt;

    &lt;p&gt;在flutter module 下执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter build ios-framework --output=some/path/MyApp/Flutter/&lt;/code&gt; 生成静态库&lt;/p&gt;

    &lt;p&gt;嵌入到原生app中当做framework处理&lt;/p&gt;

    &lt;p&gt;使用3. 方法集成&lt;/p&gt;

    &lt;p&gt;使用以下命令生成Flutter.podspec&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flutter build ios-framework &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;some/path/MyApp/Flutter/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;采用Cocoapods集成：&lt;/p&gt;

    &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Flutter&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:podspec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;some/path/MyApp/Flutter/[build mode]/Flutter.podspec&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;安卓集成大概是两种：1. 生成aar 2. 依赖源码的模块，详细请移步到&lt;a href=&quot;https://flutter.cn/docs/add-to-app/android/project-setup&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;iOS 详细内容请移步到&lt;a href=&quot;https://flutter.cn/docs/add-to-app/ios/project-setup&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如何进行Flutter和原生的互通&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;初始化需要初始化FlutterEngine以及注册Engine(安卓同学代码配置不一样，原理其实一致，详细移步到&lt;a href=&quot;https://flutter.cn/docs/add-to-app/android/add-flutter-screen?tab=cached-engine-with-initial-route-kotlin-tab&quot;&gt;这里&lt;/a&gt;)&lt;/p&gt;

        &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AppDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FlutterAppDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;flutterEngine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FlutterEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;My Flutter Engine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FlutterMethodChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
        
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didFinishLaunchingWithOptions&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;launchOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;LaunchOptionsKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            
        &lt;span class=&quot;n&quot;&gt;flutterEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            
        &lt;span class=&quot;kt&quot;&gt;GeneratedPluginRegistrant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flutterEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;didFinishLaunchingWithOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;launchOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Flutter 在原生的承载页iOS 为FlutterViewController， 安卓为FlutterActivity(安卓同学代码配置不一样，原理其实一致，详细移步到&lt;a href=&quot;https://flutter.cn/docs/add-to-app/android/add-flutter-screen?tab=cached-engine-with-initial-route-kotlin-tab&quot;&gt;这里&lt;/a&gt;)&lt;/p&gt;

        &lt;p&gt;比如我们原生直接采用以下方式打开Flutter&lt;/p&gt;

        &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testButtonClicked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;flutterEngine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AppDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flutterEngine&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;flutterViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FlutterViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flutterEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nibName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;present&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flutterViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;双方互通采用Channel通道进行&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;Channel 分为三种 FlutterBasicMessageChannel、FlutterMethodChannel、FlutterEventChannel&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BasicMessageChannel&lt;/code&gt;用于双向通信，支持发送和接收任意类型的消息，通信模式是无状态的。&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MethodChannel&lt;/code&gt;用于远程过程调用，允许Dart代码调用原生代码中的方法，通信模式是有状态的。&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventChannel&lt;/code&gt;用于事件流通信，允许原生代码向Dart代码发送事件，通信模式是基于流的。&lt;/li&gt;
        &lt;/ul&gt;

        &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AppDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FlutterAppDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;flutterEngine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FlutterEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;My Flutter Engine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FlutterMethodChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
        
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didFinishLaunchingWithOptions&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;launchOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;LaunchOptionsKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            
        &lt;span class=&quot;n&quot;&gt;flutterEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            
        &lt;span class=&quot;kt&quot;&gt;GeneratedPluginRegistrant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flutterEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            
        &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FlutterMethodChannel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;flutter_channel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;binaryMessenger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flutterEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binaryMessenger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setMethodCallHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;getBattery&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getBattery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            
        &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;invokeMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;invokeFlutterMethod&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;我是原生&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;没调用到&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;didFinishLaunchingWithOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;launchOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getBattery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;UIDevice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isBatteryMonitoringEnabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;您的电量为: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIDevice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batteryLevel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; %&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;多Flutter实例&lt;/p&gt;

    &lt;p&gt;比如NativePage-&amp;gt;flutterpage -&amp;gt;nativePage-&amp;gt;flutterPage的情况。&lt;/p&gt;

    &lt;p&gt;Flutter 2 以及以上的版本针对多 Flutter 实例进行了优化，额外增加的 Flutter 实例只会增加约 180K 的内存占用，这种「固定成本」的降低，可以帮助你更轻松的将 Flutter 加入到现有应用 (add-to-app)&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://github.com/flutter/samples/blob/main/add_to_app/multiple_flutters/&quot;&gt;官方代码&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;主要采用新的API FlutterEngineGroup 去创建和管理多个Engine，从 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FlutterEngineGroup&lt;/code&gt; 生成的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FlutterEngine&lt;/code&gt; 具有常用共享资源（例如 GPU 上下文、字体度量和隔离线程的快照）的性能优势，从而加快首次渲染的速度、降低延迟并降低内存占用。&lt;/p&gt;

    &lt;p&gt;据说新的方式可以降低内存，那么在2.0之前，我们一直采用的是三方混合路由管理方案如：flutter_boost（咸鱼）, 采用单例Engine共用的方式，减小内存。&lt;/p&gt;

    &lt;p&gt;例如：&lt;/p&gt;

    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AppDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FlutterAppDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;engines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FlutterEngineGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;multiple-flutters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
&lt;span class=&quot;c1&quot;&gt;// 一个页面一个Flutter实例&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SingleFlutterViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FlutterViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FlutterMethodChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
      
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withEntrypoint&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;entryPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;appDelegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AppDelegate&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;newEngine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;engines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;makeEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withEntrypoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entryPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;libraryURI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;GeneratedPluginRegistrant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nibName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FlutterMethodChannel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;multiple-flutters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;binaryMessenger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binaryMessenger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;invokeMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;setCount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setMethodCallHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;next&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;vc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HostViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigationController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pushViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
  &lt;span class=&quot;c1&quot;&gt;// 一个页面多个Flutter实例&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DoubleFlutterViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;topFlutter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SingleFlutterViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SingleFlutterViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;withEntrypoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;topMain&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bottomFlutter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SingleFlutterViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SingleFlutterViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;withEntrypoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bottomMain&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
      &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;addChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topFlutter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;addChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bottomFlutter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;safeFrame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;safeAreaLayoutGuide&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layoutFrame&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;halfHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;safeFrame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;topFlutter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;safeFrame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;safeFrame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;safeFrame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;halfHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bottomFlutter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;safeFrame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topFlutter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;safeFrame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;halfHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topFlutter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bottomFlutter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;topFlutter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;didMove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;toParent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bottomFlutter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;didMove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;toParent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
&lt;span class=&quot;c1&quot;&gt;// 路由栈中多个Flutter实例&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HostViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nextButtonClicked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;navController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigationController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;navController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewControllers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;vc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SingleFlutterViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withEntrypoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;navController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pushViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;vc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DoubleFlutterViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;navController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pushViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;h3 id=&quot;学习--参考文档&quot;&gt;学习 &amp;amp; 参考文档&lt;/h3&gt;

    &lt;p&gt;&lt;a href=&quot;https://book.flutterchina.club/&quot;&gt;flutter 中文网&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://flutter.cn/&quot;&gt;flutter 官网&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://github.com/flutter/flutter&quot;&gt;flutter github&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://github.com/flutter/packages&quot;&gt;Flutter 官方package github&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://pub.dev&quot;&gt;flutter pub package&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="Flutter" /><summary type="html">Flutter 入门简介 1 简介 Flutter 是由谷歌开发推出的一款开源的移动应用开发框架，其主打的就是跨平台、高保真、高性能。其开发呢主要使用的dart语言。一套代码可以同时在Android和iOS 系统上运行。并且Flutter 还可以和原生进行混合开发。 2 主要优势 2.1跨平台自绘渲染引擎 Flutter 采用自绘渲染引擎Skia，那么和其他的跨平台框架不同的是，其他框架要不采用webView进行渲染，要不采用操作原生控件进行渲染， 并且避免了像RN，weex那样不断和native进行布局同步，导致的布局卡顿，手势卡顿等问题。那么Flutter利用自己的跨平台2d绘制渲染引擎，不仅可以保证UI的一致性，而且能降低维护的成本。（Skia是安卓系统一直使用的一个2d绘制渲染引擎）。 2.2 高性能 Flutter 支持了JIT（Just-In-Time 即时编译（动态编译）） 和 AOT （Ahead-of-time 静态编译）。 JIT 也就是程序在运行过程中实时将源码编翻译成机器码，也叫做动态编译，这种方式被称为JIT，典型的代表则为JavaScript。值得一提的是其实绝大多数的脚本语言都支持JIT。 AOT 需要提前将程序编译成机器码或者机器字节码，也叫做静态编译。比如我们OC、Swift、安卓的java、C、C++，都需要编译、链接之后才能运行程序。 那么Flutter既支持了JIT有支持了AOT，也就是说我们在开发的时候可以使用JIT进行快速开发，不需要保证应用的性能，可以做到随时改动、随时看到。在发布包的时候采用AOT，保证程序运行的新能。可以说鱼与熊掌兼得。 2.3 快速内存分配 Flutter 使用函数式流，而dart的开发成员很多是来自于Chrome的开发，鉴于Chrome V8的javaScript的内存分配，dart底层也拥有一个能够有效处理琐碎任务的内存分配器。 课外小知识–函数式流 函数式流通常指的是使用函数式编程范式来处理数据流和状态变化，函数式编程是一种编程范式，它强调使用纯函数（无副作用的函数）和不可变数据结构来编写程序。这种范式有助于提高代码的可读性、可维护性和可测试性。 函数式编程范式中的不可变数据结构和纯函数有助于减少内存分配。由于数据结构是不可变的，我们不需要为修改数据结构而分配新的内存。相反，我们可以通过共享不可变数据结构的部分来创建新的数据结构，从而减少内存分配。 2.4 类型安全和空安全 dart 语言是类型安全语言， 2.12版本支持了空安全。支持静态类型检测，所以可以再编译前发现一些类型的错误，排除一些错误。 课外小知识–空安全 空安全是一种编程语言的特性，指的是在帮助开发者避免空引用的错误，通常指试图访问一个空（null）对象的属性或者方法时，可能导致程序出现崩溃或者不可预期的错误。 2.5 dart 团队就在身边 因为dart团队和flutter团队同处于一个公司，那么对于Flutter想要dart支持的一些特性、功能dart团队也能快速沟通、快速实现。举例来说就是：最初dart团队并没有提供生成原生二进制的工具链，但是后边它实现了，因为dart团队专门为flutter开发了这一工具链。 3 Flutter框架结构 3.1 framework 层 framework层是完全有dart语言实现的sdk，它实现了一套基础库。从底向上分别是为 3.1.1 Foundation，Animation、Painting、Gestures 这一层又被称之为UI层。是Engine暴漏的底层UI层，主要提供了动画、绘制、手势。 3.3.2 Rendering 这一层是渲染层，渲染层会构建一颗由RenderObject组成的渲染树。当动态更新这些对象的时候，渲染树找出变化的部分，然后更新渲染。它是Flutter比较重要的部分，不仅要确定渲染对象的位置、大小还要进行坐标变换和绘制，当然绘制调用dart:UI层进行。 3.3.3 Widgets Widgets是Flutter提供给我们一套基础组件库，提供了Material、Cupertino 两套分别符合安卓和iOS设计规范的组件。 值得一说的是，其实我们打交道最多的就是framework层，其中widgets是开发应用最多的，但是其中如果你有自定义（或者定制）的widgets，得需要Rendering层或者Painting。 3.2 Flutter Engine 这一层是Flutter的引擎层，其中包含了Skia渲染引擎、Dart运行时、以及文字排版引擎等。其使用C++实现。上一层的dart：UI最终会调用到这一层。 3.3 Embedder 嵌入层。嵌入层呢主要将我们的Flutter引擎安装到对应平台上。其实现是采用当前平台的原生语言实现。通过嵌入层，可以将flutter代码以模块方式嵌入到当前应用中，或者作为主体。 4 集成Flutter开发环境 4.1 开发IDE 推荐使用Android studio或者VS Code开发，官方提供了他们开发Flutter的插件，支持更多功能。 4.2 安装Flutter 具体查看Flutter中文网 或者Flutter 官网。照着做即可，不在赘述。 4.3 链接模拟器/真机 具体查看Flutter中文网 或者Flutter 官网。照着做即可，不在赘述。 5 Widgets Flutter Widget 不同于我们原生开发所说的控件，Flutter 几乎所有的对象都叫做Widget，它不仅可以表示UI控件，也可以表示功能性组件，比如手势检测器GestureDetector。Widget只是UI信息配置信息的对象，并不是真正绘制到屏幕上的元素。 5.1 Flutter 中的四棵树 基本流程为： 根据Widget树生成Element树，每个Element节点类都继承于Element类； 根据Element树生成Render树（渲染树），渲染树中每个节点类都继承于RenderObject； 根据Render树生成Layer树，然后显示到屏幕上，Layer树中的每个节点类都继承于Layer类。 真正的渲染和布局是在Render树中，Element树是Widget和Render的桥梁。 举个栗子： Container( // 一个容器 widget color: Colors.blue, // 设置容器背景色 child: Row( // 可以将子widget沿水平方向排列 children: [ Image.network(&apos;https://www.example.com/1.png&apos;), // 显示图片的 widget const Text(&apos;A&apos;), ], ), ); 其中Widget和Element是一一对应的，但是并不合Render一一对应。其实我们通常讲的Flutter只有上面三棵树，但是其实在上屏之前呢，还会根据Render树生成一颗Layer树。 5.2 StatelessWidget 和StatefulWidget 以及State StatelessWidget 和 StatefulWidget都继承于Widget抽象类。 其中StatelessWidget 是用于不需要维护状态的场景，通常我们会在其override 方法 build(BuildContext context)里组合嵌套其他的组件构建UI。 StatefulWidget 是用于需要维护状态的场景，与StatelessWidget不同的是，我们不再拥有 build(BuildContext context)方法。取而代之的是createState()方法，我们需要生成一个State类，用来存储状态。 import &apos;package:flutter/material.dart&apos;; class TestStatelessWidget extends StatelessWidget { const TestStatelessWidget({super.key}); @override Widget build(BuildContext context) { return Container(color: Colors.blue, child: const Center(child: Text(&quot;StatelessWidget&quot;))); } } class TestStatefulWidget extends StatefulWidget { const TestStatefulWidget({super.key, this.count = 0}); final int count; @override TestWidgetState createState() =&amp;gt; TestWidgetState(); } class TestWidgetState extends State&amp;lt;TestStatefulWidget&amp;gt; { int _count = 0; // Widget 第一次插入Widget树调用，对于每一个State对象，只会调用一次 @override void initState() { super.initState(); _count = widget.count; debugPrint(&quot;initState&quot;); } // 用于构建Widget @override Widget build(BuildContext context) { debugPrint(&quot;build&quot;); return Scaffold( body: Center( child: TextButton( child: Text(&apos;$_count&apos;), onPressed: () =&amp;gt; { _count += 1, } ))); } // Widget 重新构建时调用 @override void didUpdateWidget(covariant TestStatefulWidget oldWidget) { super.didUpdateWidget(oldWidget); debugPrint(&quot;didUpdateWidget&quot;); } // State 对象从树中移除 @override void deactivate() { // TODO: implement deactivate super.deactivate(); debugPrint(&quot;deactivate&quot;); } // 热重载时 @override void reassemble() { // TODO: implement reassemble super.reassemble(); debugPrint(&quot;reassemble&quot;); } // 当state对象依赖发生变化时 @override void didChangeDependencies() { // TODO: implement didChangeDependencies super.didChangeDependencies(); debugPrint(&quot;didChangeDependencies&quot;); } // 当state对象从树中永久移除时。 @override void dispose() { // TODO: implement dispose super.dispose(); debugPrint(&quot;didChangeDependencies&quot;); } } 什么叫做状态？ 在Flutter中，状态（State）是指应用程序中的数据，这些数据会随着时间的推移而发生变化。状态可以包括用户界面的外观、用户交互产生的数据、从服务器获取的数据等。状态的变化通常会导致应用程序的界面发生变化，例如按钮的颜色、文本的内容等。 在Flutter中，状态管理是一个重要的概念。由于Flutter使用声明式编程范式，组件（Widget）是不可变的，这意味着一旦创建，它们的属性就不能被修改。因此，当应用程序的状态发生变化时，我们需要创建一个新的组件实例来反映这些变化。 所以结合着以上所说的StatelessWidget和StatefullWidget、State想必大家就会有一个明确的认知State。 5.3 State状态管理（简述） Flutter的状态管理分为以下几种： Widget 自身管理， 如上边的例子 父Widget管理子Widget状态； 混合管理，即组件自身管理一些内部状态，而父组件管理一些其他外部状态。 全局状态管理，用于跨组件/跨路由的状态管理 通常我们会采用专门用于状态的管理的三方包，进行简化管理，比如Bloc、Provider。（看情况出一个例子） 6 路由管理 所谓的路由管理，其实就是管理页面如何跳转，也称之为导航管理。那么对于Android和iOS客户端来说，都是维护一个路由栈，Push 入栈打开一个新页面， Pop出栈关闭页面。 6.1 通过Navigator 和 MaterialPageRoute 实现 // HomePageState @override Widget build(BuildContext context) { return Scaffold( ... // 省略代码 body: Center( child: Column( ... // 省略代码 TextButton( onPressed: _routePageA, child: const Text( &apos;打开pageA&apos; ) ) ], ), ), ... // 省略代码 ); } void _routePageA() async { var result = await Navigator.push( context, MaterialPageRoute(builder: (context) =&amp;gt; const PageA() ) ); // 输出返回值 print(result.toString()); } // PageA @override Widget build(BuildContext context) { return Scaffold( ... body: Center( child: Column(children: [ ... CupertinoButton( onPressed: () =&amp;gt; _back(context), child: const Text(&quot;返回&quot;), ) ]) ) ); } void _back(BuildContext context) { Navigator.pop(context, &quot;我是返回值&quot;); } 6.2 通过路由表名 class MyApp extends StatelessWidget { const MyApp({super.key}); // This widget is the root of your application. @override Widget build(BuildContext context) { return MaterialApp( ... routes: { &quot;pageA&quot;: (context) { var arguments = ModalRoute.of(context)?.settings.arguments; return PageA(title: arguments is String ? arguments : &quot;&quot;); }, &quot;PageB&quot;: (context) =&amp;gt; const PageB(), &quot;/&quot;: (context) =&amp;gt; const MyHomePage(title: &quot;首页&quot;) }, initialRoute: &quot;/&quot;, // 初始路由 ); } } // 使用 class _MyHomePageState extends State&amp;lt;MyHomePage&amp;gt; { void _routePageB() async { var result = await Navigator.pushNamed(context, &quot;PageB&quot;); debugPrint(&quot;我是PageA反传值：$result&quot;); } } 当然我们推荐使用路由表管理，因为1. 代码更好维护， 集中管理路由 2. 语义更加明确 3. 可以通过onGenerateRoute做路由跳转的一些前置处理。 7 包管理 &amp;amp; 资源管理 7.1 包管理 App 在实际开发中会依赖很多包，这些包通常可能会存在交叉依赖、版本依赖等。所以，这种开发生态都会出现一些包管理工具，比如Android使用Gradle来管理依赖，iOS 使用Cocoapods或者Carthage管理依赖。Flutter 也拥有自己包管理工具，它使用pubspec.yaml 文件管理。如： name: flutter_in_action description: First Flutter Application. version: 1.0.0+1 dependencies: flutter: sdk: flutter cupertino_icons: ^0.1.2 dev_dependencies: flutter_test: sdk: flutter flutter: uses-material-design: true name：应用或包名称。 description: 应用或包的描述、简介。 version：应用或包的版本号。 dependencies：应用或包依赖的其他包或插件。 dev_dependencies：开发环境依赖的工具包（而不是flutter应用本身依赖的包）。 flutter：flutter相关的配置选项。 7.1.1 依赖三方pub 官方Dart Package位于Pub（https://pub.dev/ ），我们可以在上面查找需要依赖的package以及版本号和package介绍。 依赖方式如下： dependencies: flutter: sdk: flutter cupertino_icons: ^0.1.2 dio: ^5.3.2 然后执行： dart pub get 或者直接在Android studio里上方点击Pub get即可 7.1.2 依赖本地包/私有包 本地包： dependencies: pkg1: path: ../../code/pkg1 git 包(package 位于根目录)： dependencies: pkg1: git: url: git://github.com/xxx/pkg1.git git 包(package 位于非目录)： dependencies: pkg1: git: url: git://github.com/xxx/pkg1.git path: packages/package1 7.1.3 Flutter 包的分类 dart 包： 纯dart编写的包，指依赖flutter框架 插件包：包含Dart编写的API， 以及特定平台的特定实现，也就是说插件包需要实现原生功能交互。比如image_picker 实现了图片选取 + 照相功能。 7.2 资源管理 Flutter 资源管理也是在pubspec.yaml 文件里配置的。如下： flutter: # To add assets to your application, add an assets section, like this: assets: - images/2x/a_dot_burr.png - images/3x/a_dot_burr.png # 2x,3x代表分辨率 使用： @override Widget build(BuildContext context) { // return Center( // child: Image.asset(&quot;a_dot_burr.png&quot;)); // 或者 return const Center( child: Image( image: AssetImage(&quot;a_dot_burr.png&quot;)) ); } 8 组件简介 Flutter 中的组件大概分为下面几类： 基础组件 Text、TextStyle等 TextButton、ElevatedButton等 … 布局类组件 Row、Colum 线性布局 Flex 弹性布局 Wrap、Flow 流式布局 Stack、Positioned 层叠布局 Align 对齐与相对定位 … 容器类组件 Container 容器组件 DecoratedBox 装饰容器 Scaffold 页面脚手架 …. 可滚动组件 SingleChildScrollView ListView GridView PageView …. 功能性组件 WillPopScope 导航返回拦截 InheritedWidget 数据共享 … 手势、事件处理和通知；动画；自定义组件，自行了解。 9 混合开发 一般情况下，我们不可能将现有的项目一下子都转化Flutter，只能循序渐进、逐渐的加入Flutter或者改写为Flutter，这个时候我们就需要考虑，以下几件事情： 怎么继承Flutter开发的模块 flutter 官网提供了 iOS 三种集成Flutter的方式： 使用 CocoaPods 依赖管理器安装 Flutter SDK 使用这种方法，每次构建应用的时候都会从源代码中编译 flutter_module。(推荐) 创建一个框架，把 Flutter 引擎、已编译的 Dart 代码和所有 Flutter 插件都放进去 这种方式你可以手动嵌入这个框架，并在 Xcode 中更改现有的应用的构建设置。如果不想要求开发团队的每一位成员都在本地安装 Flutter SDK 和 Cocoapods，这种方式比较适用 为已编译的 Dart 代码和所有 Flutter 插件创建一个框架，对 Flutter 引擎使用 CocoaPods 来管理 这种方式是将应用内容和插件作为内嵌的框架，但将 Flutter 引擎作为 CocoaPods podspec 分发。这有点类似第二种方式，但是它为分发大型的 Flutter.xcframework 文件提供了替代方案。 首先通过以下命令创建一个flutter_module cd some/path/ flutter create --template module my_flutter 使用1.方式集成： flutter 模块执行flutter build ios –debug / –release Podfile 里加入一下代码 flutter_application_path = &apos;../my_flutter&apos; load File.join(flutter_application_path, &apos;.ios&apos;, &apos;Flutter&apos;, &apos;podhelper.rb&apos;) target &apos;MyApp&apos; do install_all_flutter_pods(flutter_application_path) end post_install do |installer| flutter_post_install(installer) if defined?(flutter_post_install) end pod install 执行完毕后，打开.xcworkspace即可 使用2. 方法集成 在flutter module 下执行 flutter build ios-framework --output=some/path/MyApp/Flutter/ 生成静态库 嵌入到原生app中当做framework处理 使用3. 方法集成 使用以下命令生成Flutter.podspec flutter build ios-framework --output=some/path/MyApp/Flutter/ 采用Cocoapods集成： pod &apos;Flutter&apos;, :podspec =&amp;gt; &apos;some/path/MyApp/Flutter/[build mode]/Flutter.podspec&apos; 安卓集成大概是两种：1. 生成aar 2. 依赖源码的模块，详细请移步到这里 iOS 详细内容请移步到这里 如何进行Flutter和原生的互通 初始化需要初始化FlutterEngine以及注册Engine(安卓同学代码配置不一样，原理其实一致，详细移步到这里) class AppDelegate: FlutterAppDelegate { lazy var flutterEngine = FlutterEngine(name: &quot;My Flutter Engine&quot;) private var channel: FlutterMethodChannel! override func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&amp;gt; Bool { flutterEngine.run() GeneratedPluginRegistrant.register(with: self.flutterEngine) return super.application(application, didFinishLaunchingWithOptions: launchOptions) } Flutter 在原生的承载页iOS 为FlutterViewController， 安卓为FlutterActivity(安卓同学代码配置不一样，原理其实一致，详细移步到这里) 比如我们原生直接采用以下方式打开Flutter @objc func testButtonClicked() { let flutterEngine = (UIApplication.shared.delegate as! AppDelegate).flutterEngine let flutterViewController = FlutterViewController(engine: flutterEngine, nibName: nil, bundle: nil) present(flutterViewController, animated: true) } 双方互通采用Channel通道进行 Channel 分为三种 FlutterBasicMessageChannel、FlutterMethodChannel、FlutterEventChannel BasicMessageChannel用于双向通信，支持发送和接收任意类型的消息，通信模式是无状态的。 MethodChannel用于远程过程调用，允许Dart代码调用原生代码中的方法，通信模式是有状态的。 EventChannel用于事件流通信，允许原生代码向Dart代码发送事件，通信模式是基于流的。 class AppDelegate: FlutterAppDelegate { lazy var flutterEngine = FlutterEngine(name: &quot;My Flutter Engine&quot;) private var channel: FlutterMethodChannel! override func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&amp;gt; Bool { flutterEngine.run() GeneratedPluginRegistrant.register(with: self.flutterEngine) channel = FlutterMethodChannel(name: &quot;flutter_channel&quot;, binaryMessenger: self.flutterEngine.binaryMessenger) channel.setMethodCallHandler { call, result in if call.method == &quot;getBattery&quot; { result(self.getBattery()) } else { result(nil) } } channel.invokeMethod(&quot;invokeFlutterMethod&quot;, arguments: &quot;我是原生&quot;) { result in print(result ?? &quot;没调用到&quot;) } return super.application(application, didFinishLaunchingWithOptions: launchOptions) } func getBattery() -&amp;gt; String { UIDevice.current.isBatteryMonitoringEnabled = true return &quot;您的电量为: \(-UIDevice.current.batteryLevel * 100) %&quot; } } 多Flutter实例 比如NativePage-&amp;gt;flutterpage -&amp;gt;nativePage-&amp;gt;flutterPage的情况。 Flutter 2 以及以上的版本针对多 Flutter 实例进行了优化，额外增加的 Flutter 实例只会增加约 180K 的内存占用，这种「固定成本」的降低，可以帮助你更轻松的将 Flutter 加入到现有应用 (add-to-app) 官方代码 主要采用新的API FlutterEngineGroup 去创建和管理多个Engine，从 FlutterEngineGroup 生成的 FlutterEngine 具有常用共享资源（例如 GPU 上下文、字体度量和隔离线程的快照）的性能优势，从而加快首次渲染的速度、降低延迟并降低内存占用。 据说新的方式可以降低内存，那么在2.0之前，我们一直采用的是三方混合路由管理方案如：flutter_boost（咸鱼）, 采用单例Engine共用的方式，减小内存。 例如： class AppDelegate: FlutterAppDelegate { let engines = FlutterEngineGroup(name: &quot;multiple-flutters&quot;, project: nil) ... } // 一个页面一个Flutter实例 class SingleFlutterViewController: FlutterViewController { private var channel: FlutterMethodChannel! init(withEntrypoint entryPoint: String?) { let appDelegate = UIApplication.shared.delegate as! AppDelegate let newEngine = appDelegate.engines.makeEngine(withEntrypoint: entryPoint, libraryURI: nil) GeneratedPluginRegistrant.register(with: newEngine) super.init(engine: newEngine, nibName: nil, bundle: nil) } override func viewDidLoad() { super.viewDidLoad() channel = FlutterMethodChannel(name: &quot;multiple-flutters&quot;, binaryMessenger: self.engine!.binaryMessenger) channel.invokeMethod(&quot;setCount&quot;, arguments: nil) channel.setMethodCallHandler { call, result in if call.method == &quot;next&quot; { let vc = HostViewController() self.navigationController!.pushViewController(vc, animated: true) result(nil) } else { result(nil) } } } // 一个页面多个Flutter实例 class DoubleFlutterViewController: UIViewController { private let topFlutter: SingleFlutterViewController = SingleFlutterViewController( withEntrypoint: &quot;topMain&quot;) private let bottomFlutter: SingleFlutterViewController = SingleFlutterViewController( withEntrypoint: &quot;bottomMain&quot;) override func viewDidLoad() { addChild(topFlutter) addChild(bottomFlutter) let safeFrame = self.view.safeAreaLayoutGuide.layoutFrame let halfHeight = safeFrame.height / 2.0 topFlutter.view.frame = CGRect( x: safeFrame.minX, y: safeFrame.minY, width: safeFrame.width, height: halfHeight) bottomFlutter.view.frame = CGRect( x: safeFrame.minX, y: topFlutter.view.frame.maxY, width: safeFrame.width, height: halfHeight) self.view.addSubview(topFlutter.view) self.view.addSubview(bottomFlutter.view) topFlutter.didMove(toParent: self) bottomFlutter.didMove(toParent: self) } } // 路由栈中多个Flutter实例 extension HostViewController { @objc func nextButtonClicked() { let navController = self.navigationController! if navController.viewControllers.count % 4 == 0 { let vc = SingleFlutterViewController(withEntrypoint: nil) navController.pushViewController(vc, animated: true) } else { let vc = DoubleFlutterViewController() navController.pushViewController(vc, animated: true) } } } 学习 &amp;amp; 参考文档 flutter 中文网 flutter 官网 flutter github Flutter 官方package github flutter pub package</summary></entry><entry><title type="html">FLEX在iOS15 以上设备的OOM排查</title><link href="http://localhost:4000/2023/07/24/FLEX%E4%B8%89%E6%96%B9%E5%BA%93iOS-15%E4%BB%A5%E4%B8%8A%E9%9B%86%E6%88%90%E5%88%B0App%E5%AF%BC%E8%87%B4%E7%9A%84%E5%86%85%E5%AD%98OOM.html" rel="alternate" type="text/html" title="FLEX在iOS15 以上设备的OOM排查" /><published>2023-07-24T00:00:00+08:00</published><updated>2023-07-24T00:00:00+08:00</updated><id>http://localhost:4000/2023/07/24/FLEX%E4%B8%89%E6%96%B9%E5%BA%93iOS%2015%E4%BB%A5%E4%B8%8A%E9%9B%86%E6%88%90%E5%88%B0App%E5%AF%BC%E8%87%B4%E7%9A%84%E5%86%85%E5%AD%98OOM</id><content type="html" xml:base="http://localhost:4000/2023/07/24/FLEX%E4%B8%89%E6%96%B9%E5%BA%93iOS-15%E4%BB%A5%E4%B8%8A%E9%9B%86%E6%88%90%E5%88%B0App%E5%AF%BC%E8%87%B4%E7%9A%84%E5%86%85%E5%AD%98OOM.html">&lt;h3 id=&quot;起因&quot;&gt;起因&lt;/h3&gt;

&lt;p&gt;从iOS 15 开始我们发现&lt;a href=&quot;https://github.com/FLEXTool/FLEX&quot;&gt;FLEX&lt;/a&gt; 三方库在我们的iOS 工程无法使用，表现为ExploreToolBar可以正常显示，但是只要点击ToolBar上任何按钮都会发生内存占用暴增，导致内存崩溃（即OOM），这个问题虽然发现的很早，但是原因和方案一直没有去探索。导致其实有的时候我们遇到想要Debug的一些功能只能用iOS 15以下的一些设备去排查。甚至都想关掉FLEX。另外FLEX提供的DEBUG功能确实是非常的丰富，对于我们开发来说也是帮助很大，所以我觉得还是有必要排查清楚为什么会导致OOM，又该怎么去解决。（当然近期我也在github Flex 进行的反馈，至今没有接收到回复…）&lt;/p&gt;

&lt;h3 id=&quot;排查&quot;&gt;排查&lt;/h3&gt;

&lt;h4 id=&quot;排查发生崩溃的原因oom&quot;&gt;排查发生崩溃的原因（OOM）&lt;/h4&gt;

&lt;p&gt;其实最早之前我并不知道，是因为OOM崩溃的，直到开始探究为啥崩溃的时候才发现。发现的路径也很简单，&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1、在点击explorerBar的按钮之后，整个UI会处于无法点击的状态，查看CPU内存占用会达到100%；&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、一段时间后，App会意外退出，也就是crash掉，debug Xcode会提示，内存占用过大，而crash。&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;排查是否是ios-15-以上设备都会oom&quot;&gt;排查是否是iOS 15 以上设备都会OOM&lt;/h4&gt;

&lt;p&gt;为什么会想到排查这一步，原因是当我们出现三方库问题时候，我们都会去官方的github issues 上看看是否已经出现这样的问题和解决方案。但是当我去git issues上看时候，并未发现这样的问题。那么首先我们需要排除一下是不是iOS 15以上通用问题。如果不是，那么可能就是我们的App专有问题。&lt;/p&gt;

&lt;p&gt;于是，我写了一个demo app， 架构为tabbar-&amp;gt;navigation-&amp;gt;controller, 启动时候，代开FLEX，然后发现并未出现crash，内存占用也正常，各个功能也正常。&lt;/p&gt;

&lt;p&gt;接着我又按照我们现有App的架构，改造了这个demo，除了页面没有内容，其他的架构可以说是一模一样，同样也没有发现crash。&lt;/p&gt;

&lt;p&gt;OK，那么基本可以确认这不是一个iOS 15以上的普遍的crash，&lt;strong&gt;而是我们App的专有问题了。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;接着，我就猜想可能是app中某些库，或者某些runtime hook 导致了冲突，发生了OOM。&lt;/p&gt;

&lt;h4 id=&quot;排查发生oom的节点&quot;&gt;排查发生OOM的节点&lt;/h4&gt;

&lt;p&gt;首先我们需要从入口开始排查，入口则是点击ExploreBar的按钮的Action，我们以“menu”的事件出发。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230724151252image-20230724151251377.png&quot; alt=&quot;image-20230724151251377&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ExploreBar 对应的Controller为FLEXExplorerViewController， menu对应的事件为：&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toggleMenuTool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toggleToolWithViewControllerProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UINavigationController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FLEXNavigationController&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withRootViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FLEXGlobalsViewController&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toggleToolWithViewControllerProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UINavigationController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;future&lt;/span&gt;
                                  &lt;span class=&quot;nf&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;presentedViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// We do NOT want to present the future; this is&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// a convenience method for toggling the SAME TOOL&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dismissViewControllerAnimated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;presentViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从Action方法分析，得出，其实点解“menu”之后，会出发初始化FLEXNavigationController 和 它的rootViewController：FLEXGlobalsViewController， 然后将FLEXNavigationController 进行modal出来。&lt;/p&gt;

&lt;p&gt;从这部分代码来看，处理简单，也不存在造成OOM的疑点。&lt;/p&gt;

&lt;p&gt;那么可能会造成OOM就出现在了FLEXNavigationController 或者FLEXGlobalsViewController里。我们接着再来看FLEXNavigationController：&lt;/p&gt;

&lt;p&gt;（：大片的代码我就不粘贴了，重点粘贴一下分析出可能OOM的代码&lt;/p&gt;

&lt;p&gt;FLEXNavigationController 主要是去实现了1. 给NavigationBar 增加了一些手势，包括点击、长按、轻扫，以及他们的手势处理（iOS 13 PresentStyle 为UIModalPresentationAutomatic、UIModalPresentationFormSheet、UIModalPresentationPageSheet会自带轻扫手势，也就是下拖，所以iOS 13以上为增加手势）2. 给controllers增加done rightNavigationBarItem，分别在push、viewWillAppear时候。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;// 此代码为去除了一些无关的代码，只留了核心代码
- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    if (self.beingPresented &amp;amp;&amp;amp; !self.didSetupPendingDismissButtons) {
        for (UIViewController *vc in self.viewControllers) {
            [self addNavigationBarItemsToViewController:vc.navigationItem];
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 此代码为去除了一些无关的代码，只留了核心代码&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addNavigationBarItemsToViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UINavigationItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;navigationItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Give root view controllers a Done button if it does not already have one&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UIBarButtonItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIBarButtonItem&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;initWithBarButtonSystemItem:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIBarButtonSystemItemDone&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;target:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;action:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dismissAnimated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Prepend the button if other buttons exist already&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;existingItems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;navigationItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rightBarButtonItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;existingItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;navigationItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rightBarButtonItems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[@[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;arrayByAddingObjectsFromArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;existingItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;navigationItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rightBarButtonItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下面，我们去分析一下FLEXGlobalsViewController，FLEXGlobalsViewController的继承链为 FLEXGlobalsViewController-&amp;gt;FLEXFilteringTableViewController-&amp;gt;FLEXTableViewController-&amp;gt;UITableViewController。所以对于我们每一个父类其实都不可以放过。具体我们发现FLEXTableViewController留了初始化init方法，直接初始tableView的style，以及loadView去替换为自己的FLEXTableView为Controller的view和初始化ToolbarItem，以及正常的viewcontroller生命周期函数(:具体代码片段就不粘贴了:)&lt;/p&gt;

&lt;p&gt;对于FLEXFilteringTableViewController则只是实现了loadView方法，设置代理以及注册cell；&lt;/p&gt;

&lt;p&gt;而对于FLEXGlobalsViewController，则是正常的生命周期方法，以及定制化的一些处理。&lt;/p&gt;

&lt;p&gt;OK，相关代码控制器逻辑已经分析清楚，下面我们分别在FLEXNavigationController、FLEXGlobalsViewController以及他的父类、基类的生命周期方法里打断点。然后点击ExploreBar触发，看他的执行。&lt;/p&gt;

&lt;p&gt;最后执行为：FLEXGlobalsViewController(init) -&amp;gt; FLEXTableViewController(init)  -&amp;gt;  FLEXNavigationController(viewDidLoad:) -&amp;gt; FLEXNavigationController(viewWillAppear:)&lt;/p&gt;

&lt;p&gt;然后就进入界面卡死，内存占用不断增加的状态。ok，那么现在排除到最后执行到FLEXNavigationController(viewWillAppear:) ，正常执行完这个后会执行rootViewController的生命周期方法。&lt;/p&gt;

&lt;p&gt;那么我们大概率可以分析出，造成OOM的节点为FLEXNavigationController(viewWillAppear:) ，如上截图，FLEXNavigationController(viewWillAppear:) 其实也很简单，也就是给他的ViewController的navigationItem增加一个done的rightItem。&lt;/p&gt;

&lt;p&gt;我们尝试，把下面的代码注释掉再次运行：&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beingPresented&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;didSetupPendingDismissButtons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewControllers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addNavigationBarItemsToViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigationItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;果然，没有发生OOM，&lt;strong&gt;也就是说造成OOM的节点为给VC的navigationItem设置rightBarButtonItem。&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;进一步排查原因&quot;&gt;进一步排查原因&lt;/h4&gt;

&lt;p&gt;然后一个问题就出现在脑海，那么为什么同样的排查demo设备就没问题呢？&lt;/p&gt;

&lt;p&gt;所以我们借助Instrument做一下Leak查看，Instrument最后结果为：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230724154508image-20230724154508581.png&quot; alt=&quot;image-20230724154508581&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230724154622image-20230724154621958.png&quot; alt=&quot;image-20230724154621958&quot; /&gt;&lt;/p&gt;

&lt;p&gt;大概可以看出，itemBarbutton处于不断的一个布局，最后导致OOM。（：当然这个解释，我自己都不能说服。我还想知道为什么。&lt;/p&gt;

&lt;p&gt;所以我想要看看是否有其他的方式探索，找到其罪魁祸首。&lt;/p&gt;

&lt;h3 id=&quot;进阶&quot;&gt;进阶&lt;/h3&gt;

&lt;h4 id=&quot;尝试采用寄存器追踪法&quot;&gt;尝试采用寄存器追踪法&lt;/h4&gt;

&lt;p&gt;采用断点查看汇编，并且采用读取寄存器。并没有找到根本原因。有兴趣的请学习https://juejin.cn/post/6945393466218119182&lt;/p&gt;

&lt;h4 id=&quot;三方库排除法&quot;&gt;三方库排除法&lt;/h4&gt;

&lt;p&gt;1、逐量将崩溃App的疑似私有库三方库，加入到demo app中。做逐个排除。&lt;/p&gt;

&lt;p&gt;最后结果也没有崩溃，逐步排除是因为View、ViewController、NavigationController的hook导致的互相影响crash。&lt;/p&gt;

&lt;p&gt;2、 将崩溃App最简化，也就是移除启动的各种加载逻辑。只包括keyWindow、RootViewController。&lt;/p&gt;

&lt;p&gt;结果依然发生崩溃。&lt;/p&gt;

&lt;h4 id=&quot;继续断点排查&quot;&gt;继续断点排查&lt;/h4&gt;

&lt;p&gt;1、既然是因为外部给ViewControllers设置NavigationItem添加RightNavigationItem导致的crash，那么将navigationController 给viewControllers 的代码，移植到我们自己的CustomNavigationController。便于更好的排查问题。&lt;/p&gt;

&lt;p&gt;2、 断点一步一步的走。&lt;/p&gt;

&lt;p&gt;突然😱，发现了调用到了我们防护容器类的方法。难道是防护容器的hook出现了问题…&lt;/p&gt;

&lt;p&gt;3、排查哪个容器类的hook出现问题&lt;/p&gt;

&lt;p&gt;将所有容器类的hook注释掉，逐个打开测试，最后发现只有打开下面的hook时候会出现crash&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objc_getClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;__NSDictionaryM&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gz_swizzleSEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forKeyedSubscript&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withSEL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gz_setObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forKeyedSubscript&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gz_setObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forKeyedSubscript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSCopying&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gz_setObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forKeyedSubscript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个方法是采用subscript复制会调用，比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dict[@&quot;key&quot;] = value&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;然后我们一直打断点，最后发现了，autolayout的一个可变数组里存了一些Constraint，然后一直循环的赋值里边的key的value为nil，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230725180837image-20230725180836928.png&quot; alt=&quot;image-20230725180836928&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;分析&quot;&gt;分析&lt;/h3&gt;

&lt;p&gt;👌🏻，通过上面的探寻，我们可以得出，可能是navigationItem赋值的时候触发了它的布局，布局呢，会存有它的各个约束字典，然后可能在iOS 16上需要移除（调整）约束，将key置为nil，然后不断的检测是否移除正确，如果没有移除会继续移除，而我们hook让其return出去，导致keyValue无法移除。造成循环。内存暴增、卡死界面。&lt;/p&gt;

&lt;p&gt;所以我们需要修改一下我们hook，hook，不应该检测value是否存在，只需要检测key即可。&lt;/p&gt;

&lt;h3 id=&quot;结果&quot;&gt;结果&lt;/h3&gt;

&lt;p&gt;最后的结果如分析所得。从开始的我们以为是FLEX本身的问题，到最后真凶的出现，确实经历了好多天，有的时候真想放弃，直接修改复制Item的时机，最后还是为了探索真理而坚持。&lt;/p&gt;

&lt;p&gt;只要坚持不放弃，一切问题都可以解决。&lt;/p&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="iOS" /><summary type="html">起因 从iOS 15 开始我们发现FLEX 三方库在我们的iOS 工程无法使用，表现为ExploreToolBar可以正常显示，但是只要点击ToolBar上任何按钮都会发生内存占用暴增，导致内存崩溃（即OOM），这个问题虽然发现的很早，但是原因和方案一直没有去探索。导致其实有的时候我们遇到想要Debug的一些功能只能用iOS 15以下的一些设备去排查。甚至都想关掉FLEX。另外FLEX提供的DEBUG功能确实是非常的丰富，对于我们开发来说也是帮助很大，所以我觉得还是有必要排查清楚为什么会导致OOM，又该怎么去解决。（当然近期我也在github Flex 进行的反馈，至今没有接收到回复…） 排查 排查发生崩溃的原因（OOM） 其实最早之前我并不知道，是因为OOM崩溃的，直到开始探究为啥崩溃的时候才发现。发现的路径也很简单， 1、在点击explorerBar的按钮之后，整个UI会处于无法点击的状态，查看CPU内存占用会达到100%； 2、一段时间后，App会意外退出，也就是crash掉，debug Xcode会提示，内存占用过大，而crash。 排查是否是iOS 15 以上设备都会OOM 为什么会想到排查这一步，原因是当我们出现三方库问题时候，我们都会去官方的github issues 上看看是否已经出现这样的问题和解决方案。但是当我去git issues上看时候，并未发现这样的问题。那么首先我们需要排除一下是不是iOS 15以上通用问题。如果不是，那么可能就是我们的App专有问题。 于是，我写了一个demo app， 架构为tabbar-&amp;gt;navigation-&amp;gt;controller, 启动时候，代开FLEX，然后发现并未出现crash，内存占用也正常，各个功能也正常。 接着我又按照我们现有App的架构，改造了这个demo，除了页面没有内容，其他的架构可以说是一模一样，同样也没有发现crash。 OK，那么基本可以确认这不是一个iOS 15以上的普遍的crash，而是我们App的专有问题了。 接着，我就猜想可能是app中某些库，或者某些runtime hook 导致了冲突，发生了OOM。 排查发生OOM的节点 首先我们需要从入口开始排查，入口则是点击ExploreBar的按钮的Action，我们以“menu”的事件出发。 ExploreBar 对应的Controller为FLEXExplorerViewController， menu对应的事件为： - (void)toggleMenuTool { [self toggleToolWithViewControllerProvider:^UINavigationController *{ return [FLEXNavigationController withRootViewController:[FLEXGlobalsViewController new]]; } completion:nil]; } - (void)toggleToolWithViewControllerProvider:(UINavigationController *(^)(void))future completion:(void (^)(void))completion { if (self.presentedViewController) { // We do NOT want to present the future; this is // a convenience method for toggling the SAME TOOL [self dismissViewControllerAnimated:YES completion:completion]; } else if (future) { [self presentViewController:future() animated:YES completion:completion]; } } 从Action方法分析，得出，其实点解“menu”之后，会出发初始化FLEXNavigationController 和 它的rootViewController：FLEXGlobalsViewController， 然后将FLEXNavigationController 进行modal出来。 从这部分代码来看，处理简单，也不存在造成OOM的疑点。 那么可能会造成OOM就出现在了FLEXNavigationController 或者FLEXGlobalsViewController里。我们接着再来看FLEXNavigationController： （：大片的代码我就不粘贴了，重点粘贴一下分析出可能OOM的代码 FLEXNavigationController 主要是去实现了1. 给NavigationBar 增加了一些手势，包括点击、长按、轻扫，以及他们的手势处理（iOS 13 PresentStyle 为UIModalPresentationAutomatic、UIModalPresentationFormSheet、UIModalPresentationPageSheet会自带轻扫手势，也就是下拖，所以iOS 13以上为增加手势）2. 给controllers增加done rightNavigationBarItem，分别在push、viewWillAppear时候。 // 此代码为去除了一些无关的代码，只留了核心代码 - (void)viewWillAppear:(BOOL)animated { [super viewWillAppear:animated]; if (self.beingPresented &amp;amp;&amp;amp; !self.didSetupPendingDismissButtons) { for (UIViewController *vc in self.viewControllers) { [self addNavigationBarItemsToViewController:vc.navigationItem]; } } } // 此代码为去除了一些无关的代码，只留了核心代码 - (void)addNavigationBarItemsToViewController:(UINavigationItem *)navigationItem { // Give root view controllers a Done button if it does not already have one UIBarButtonItem *done = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemDone target:self action:@selector(dismissAnimated) ]; // Prepend the button if other buttons exist already NSArray *existingItems = navigationItem.rightBarButtonItems; if (existingItems.count) { navigationItem.rightBarButtonItems = [@[done] arrayByAddingObjectsFromArray:existingItems]; } else { navigationItem.rightBarButtonItem = done; } } 下面，我们去分析一下FLEXGlobalsViewController，FLEXGlobalsViewController的继承链为 FLEXGlobalsViewController-&amp;gt;FLEXFilteringTableViewController-&amp;gt;FLEXTableViewController-&amp;gt;UITableViewController。所以对于我们每一个父类其实都不可以放过。具体我们发现FLEXTableViewController留了初始化init方法，直接初始tableView的style，以及loadView去替换为自己的FLEXTableView为Controller的view和初始化ToolbarItem，以及正常的viewcontroller生命周期函数(:具体代码片段就不粘贴了:) 对于FLEXFilteringTableViewController则只是实现了loadView方法，设置代理以及注册cell； 而对于FLEXGlobalsViewController，则是正常的生命周期方法，以及定制化的一些处理。 OK，相关代码控制器逻辑已经分析清楚，下面我们分别在FLEXNavigationController、FLEXGlobalsViewController以及他的父类、基类的生命周期方法里打断点。然后点击ExploreBar触发，看他的执行。 最后执行为：FLEXGlobalsViewController(init) -&amp;gt; FLEXTableViewController(init) -&amp;gt; FLEXNavigationController(viewDidLoad:) -&amp;gt; FLEXNavigationController(viewWillAppear:) 然后就进入界面卡死，内存占用不断增加的状态。ok，那么现在排除到最后执行到FLEXNavigationController(viewWillAppear:) ，正常执行完这个后会执行rootViewController的生命周期方法。 那么我们大概率可以分析出，造成OOM的节点为FLEXNavigationController(viewWillAppear:) ，如上截图，FLEXNavigationController(viewWillAppear:) 其实也很简单，也就是给他的ViewController的navigationItem增加一个done的rightItem。 我们尝试，把下面的代码注释掉再次运行： if (self.beingPresented &amp;amp;&amp;amp; !self.didSetupPendingDismissButtons) { for (UIViewController *vc in self.viewControllers) { [self addNavigationBarItemsToViewController:vc.navigationItem]; } } 果然，没有发生OOM，也就是说造成OOM的节点为给VC的navigationItem设置rightBarButtonItem。 进一步排查原因 然后一个问题就出现在脑海，那么为什么同样的排查demo设备就没问题呢？ 所以我们借助Instrument做一下Leak查看，Instrument最后结果为： 大概可以看出，itemBarbutton处于不断的一个布局，最后导致OOM。（：当然这个解释，我自己都不能说服。我还想知道为什么。 所以我想要看看是否有其他的方式探索，找到其罪魁祸首。 进阶 尝试采用寄存器追踪法 采用断点查看汇编，并且采用读取寄存器。并没有找到根本原因。有兴趣的请学习https://juejin.cn/post/6945393466218119182 三方库排除法 1、逐量将崩溃App的疑似私有库三方库，加入到demo app中。做逐个排除。 最后结果也没有崩溃，逐步排除是因为View、ViewController、NavigationController的hook导致的互相影响crash。 2、 将崩溃App最简化，也就是移除启动的各种加载逻辑。只包括keyWindow、RootViewController。 结果依然发生崩溃。 继续断点排查 1、既然是因为外部给ViewControllers设置NavigationItem添加RightNavigationItem导致的crash，那么将navigationController 给viewControllers 的代码，移植到我们自己的CustomNavigationController。便于更好的排查问题。 2、 断点一步一步的走。 突然😱，发现了调用到了我们防护容器类的方法。难道是防护容器的hook出现了问题… 3、排查哪个容器类的hook出现问题 将所有容器类的hook注释掉，逐个打开测试，最后发现只有打开下面的hook时候会出现crash [objc_getClass(&quot;__NSDictionaryM&quot;) gz_swizzleSEL:@selector(setObject:forKeyedSubscript:) withSEL:@selector(gz_setObject:forKeyedSubscript:)]; - (void)gz_setObject:(id)obj forKeyedSubscript:(id&amp;lt;NSCopying&amp;gt;)key { if (!obj) { return; } if (!key) { return; } [self gz_setObject:obj forKeyedSubscript:key]; } 这个方法是采用subscript复制会调用，比如dict[@&quot;key&quot;] = value。 然后我们一直打断点，最后发现了，autolayout的一个可变数组里存了一些Constraint，然后一直循环的赋值里边的key的value为nil，如下图： 分析 👌🏻，通过上面的探寻，我们可以得出，可能是navigationItem赋值的时候触发了它的布局，布局呢，会存有它的各个约束字典，然后可能在iOS 16上需要移除（调整）约束，将key置为nil，然后不断的检测是否移除正确，如果没有移除会继续移除，而我们hook让其return出去，导致keyValue无法移除。造成循环。内存暴增、卡死界面。 所以我们需要修改一下我们hook，hook，不应该检测value是否存在，只需要检测key即可。 结果 最后的结果如分析所得。从开始的我们以为是FLEX本身的问题，到最后真凶的出现，确实经历了好多天，有的时候真想放弃，直接修改复制Item的时机，最后还是为了探索真理而坚持。 只要坚持不放弃，一切问题都可以解决。</summary></entry><entry><title type="html">MGJRouterKit 实现、优劣浅析</title><link href="http://localhost:4000/2023/06/12/MGJRouterKit%E7%9A%84%E7%A0%94%E7%A9%B6.html" rel="alternate" type="text/html" title="MGJRouterKit 实现、优劣浅析" /><published>2023-06-12T00:00:00+08:00</published><updated>2023-06-12T00:00:00+08:00</updated><id>http://localhost:4000/2023/06/12/MGJRouterKit%E7%9A%84%E7%A0%94%E7%A9%B6</id><content type="html" xml:base="http://localhost:4000/2023/06/12/MGJRouterKit%E7%9A%84%E7%A0%94%E7%A9%B6.html">&lt;h3 id=&quot;代码浅析&quot;&gt;代码浅析&lt;/h3&gt;

&lt;h4 id=&quot;存&quot;&gt;存&lt;/h4&gt;

&lt;p&gt;通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MGJRouter&lt;/code&gt; 单例管理。并且缓存在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSMutableDictionay *routes&lt;/code&gt;, 那么我们来看一下，他具体缓存的数据结构是什么样子的？&lt;/p&gt;

&lt;p&gt;例如 aa://bb/cc/dd&lt;/p&gt;

&lt;p&gt;关键代码为：&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;registerURLPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;URLPattern&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MGJRouterHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sharedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addURLPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URLPattern&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;andHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addURLPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;URLPattern&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;andHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MGJRouterHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSMutableDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subRoutes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addURLPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URLPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subRoutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;subRoutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;_&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSMutableDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addURLPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;URLPattern&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathComponents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pathComponentsFromURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URLPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;NSMutableDictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subRoutes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathComponent&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathComponents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subRoutes&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;objectForKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;subRoutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSMutableDictionary&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;subRoutes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subRoutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subRoutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pathComponentsFromURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;URL&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;NSMutableArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathComponents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSMutableArray&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rangeOfString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;://&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSNotFound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathSegments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;componentsSeparatedByString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;://&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 如果 URL 包含协议，那么把协议作为第一个元素放进去&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathComponents&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathSegments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// 如果只有协议，那么放一个占位符&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathSegments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathComponents&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MGJ_ROUTER_WILDCARD_CHARACTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathComponent&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;URLWithString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pathComponents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathComponent&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathComponent&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;substringToIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathComponents&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathComponents&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中关键方法为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;- (NSMutableDictionary *)addURLPattern:(NSString *)URLPattern&lt;/code&gt;，此方法会将例如 aa://bb/cc/dd 这样一个URL生成如下的结构：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;aa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;bb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}}}}}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;也就是说这个方法执行完之后，我们的routes就会变成这样的一个结构，最后把dd对应的{} return 回去。&lt;/p&gt;

&lt;p&gt;然后通过&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subRoutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;subRoutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;_&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将handler加入到字典里，最后routes就会变成&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{&quot;aa&quot;: {&quot;bb&quot;: {&quot;cc&quot;: {&quot;dd&quot;: {&quot;_&quot;: handler}}}}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;取&quot;&gt;取&lt;/h4&gt;

&lt;p&gt;关键代码为：&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;openURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withUserInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;userInfo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stringByAddingPercentEscapesUsingEncoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSUTF8StringEncoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSMutableDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sharedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;extractParametersFromURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;matchExactly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;enumerateKeysAndObjectsUsingBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isKindOfClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stringByReplacingPercentEscapesUsingEncoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSUTF8StringEncoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MGJRouterHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;block&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MGJRouterParameterCompletion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MGJRouterParameterUserInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;removeObjectForKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;block&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSMutableDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extractParametersFromURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;matchExactly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;exactly&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSMutableDictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSMutableDictionary&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MGJRouterParameterURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;NSMutableDictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subRoutes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathComponents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pathComponentsFromURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// borrowed from HHRouter(https://github.com/Huohua/HHRouter)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathComponent&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathComponents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// 对 key 进行排序，这样可以把 ~ 放到最后&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subRoutesKeys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subRoutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allKeys&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sortedArrayUsingComparator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSComparisonResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subRoutesKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MGJ_ROUTER_WILDCARD_CHARACTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;subRoutes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subRoutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;subRoutes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subRoutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;substringFromIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newPathComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 再做一下特殊处理，比如 :id.html -&amp;gt; :id&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkIfContainsSpecialCharacter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;NSCharacterSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specialCharacterSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSCharacterSet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;characterSetWithCharactersInString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specialCharacters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;NSRange&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rangeOfCharacterFromSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specialCharacterSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSNotFound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;// 把 pathComponent 后面的部分也去掉&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;newKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newKey&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;substringToIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suffixToStrip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;substringFromIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;newPathComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newPathComponent&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stringByReplacingOccurrencesOfString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suffixToStrip&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;newKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exactly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// 如果没有找到该 pathComponent 对应的 handler，则以上一层的 handler 作为 fallback&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subRoutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;_&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Extract Params From Query.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLQueryItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queryItems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLComponents&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resolvingAgainstBaseURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queryItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLQueryItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subRoutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;_&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;block&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subRoutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;_&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;取的逻辑呢，其实也是匹配我们已经存好的数据结构，例如 aa://bb/cc/dd&lt;/p&gt;

&lt;p&gt;首先我们会匹配aa，然后取出aa 对应的dictionary，再匹配bb，同理获取dictionary，一直到for 循环完dd，取到最后的dictionary，然后如果URL有query， 会把query.name作为parameters key, value作为 key的值。这样我们就能取到最后匹配到的block。&lt;/p&gt;

&lt;p&gt;其中有一个特殊处理就是：&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;subRoutes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subRoutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;substringFromIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newPathComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 再做一下特殊处理，比如 :id.html -&amp;gt; :id&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkIfContainsSpecialCharacter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;NSCharacterSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specialCharacterSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSCharacterSet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;characterSetWithCharactersInString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specialCharacters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;NSRange&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rangeOfCharacterFromSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specialCharacterSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSNotFound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;// 把 pathComponent 后面的部分也去掉&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;newKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newKey&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;substringToIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suffixToStrip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;substringFromIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;newPathComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newPathComponent&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stringByReplacingOccurrencesOfString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suffixToStrip&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;newKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这块是其实做了URL路径中:xxx的特殊处理，将可变的Component匹配，并且将pattern里的Component作为key，openURL里的实际值作为value传入parameters。&lt;/p&gt;

&lt;p&gt;最后，移除取出block&amp;amp;进行调用。&lt;/p&gt;

&lt;p&gt;这样就完成了一次我们open工作（也就是匹配过程）。&lt;/p&gt;

&lt;h4 id=&quot;使用&quot;&gt;使用&lt;/h4&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 注册&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 我们需要注册一个URLPattern 和 对应的block&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MGJRouter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registerURLPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;mgj://foo/bar&quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;routerParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;appendLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;匹配到了 url，以下是相关信息&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;appendLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stringWithFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;routerParameters:%@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routerParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 使用&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 通过URL 掉起&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MGJRouter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;openURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;mgj://foo/bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;更多使用请看MGJRouterKit demo.&lt;/p&gt;

&lt;h3 id=&quot;优劣浅析&quot;&gt;优劣浅析&lt;/h3&gt;

&lt;h4 id=&quot;疑问&quot;&gt;疑问？&lt;/h4&gt;

&lt;p&gt;URL 应该怎么管理？&lt;/p&gt;

&lt;p&gt;Register应该在哪里注册？&lt;/p&gt;

&lt;p&gt;URL 不能传递常规参数怎么办？比如我们要传一个block、image、data、object？&lt;/p&gt;

&lt;p&gt;缓存结构内存常驻？&lt;/p&gt;

&lt;h4 id=&quot;对于疑问我觉得&quot;&gt;对于疑问，我觉得&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;URL 怎么管理？&lt;/p&gt;

    &lt;p&gt;首先URL 肯定需要统一管理，并且采用常量/宏定义，避免URL写的到处都是难管理和硬编码。&lt;/p&gt;

    &lt;p&gt;那么如果是组件化，&lt;/p&gt;

    &lt;p&gt;第一种方案：&lt;/p&gt;

    &lt;p&gt;我们可能得在Route组件里，写一个.h， 里面定义URL&lt;/p&gt;

    &lt;p&gt;如果多项目复用，或者工程很庞大，那么这个URL定义会非常多，查看管理起来也是一个比较严重的问题。&lt;/p&gt;

    &lt;p&gt;第二种方案：&lt;/p&gt;

    &lt;p&gt;module 自己隔离接口层，定义module内URL。&lt;/p&gt;

    &lt;p&gt;相对来说，我更喜欢第二种方案，定义、功能都明确，不存在多工程复用、迁移问题。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Register应该在哪里注册？&lt;/p&gt;

    &lt;p&gt;register按理我理解，也需要相对统一管理。&lt;/p&gt;

    &lt;p&gt;那么对应的也可以有两种方案：&lt;/p&gt;

    &lt;p&gt;第一种方案：&lt;/p&gt;

    &lt;p&gt;主工程统一定义，但是这种就会主工程耦合Module严重，主工程不够单一&lt;/p&gt;

    &lt;p&gt;第二种方法：&lt;/p&gt;

    &lt;p&gt;依然是module隔离接口层，并且给予一个注册/启动方法，所有需要注册的module内的URL，在模块内注册，主工程只要注册该模块就可以使用。Module之间其实没有依赖&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;URL 不能传递常规参数怎么办？比如我们要传一个block、image、data、object？&lt;/p&gt;

    &lt;p&gt;其实MGJ也想到了这个问题，所以提供了API &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\+ (void)openURL:(NSString *)URL withUserInfo:(NSDictionary *)userInfo completion:(void (^)(id result))completion&lt;/code&gt; 这个方法支持我们传递userInfo，字典是完全支持非常规参数的。&lt;/p&gt;

    &lt;p&gt;但是其实URL里是无法体现出来的。只能通过MGJRouterParameterUserInfo 这个key拿到userInfo，取里边的值，参数就会不透明。&lt;/p&gt;

    &lt;p&gt;那么实际使用中，我们可能就得看具体的实现/注释，判断我们需要userinfo传的参数。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;缓存结构内存常驻？&lt;/p&gt;

    &lt;p&gt;从结构来说，他是dictionary嵌套，会不会导致内存过大？&lt;/p&gt;

    &lt;p&gt;下面是我的实验方法：&lt;/p&gt;

    &lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;demoTestMoreRegistURL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MGJRouter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registerURLPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stringWithFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;mgj://test%ld/demo%ld/performance%ld&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;routerParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;appendLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;匹配到了 url，以下是相关信息&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;appendLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stringWithFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;routerParameters:%@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routerParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230612205259image-20230612205259003.png&quot; alt=&quot;image-20230612205259003&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​	测试采用的是模拟器iphone14，从测试数据来看，100-10000个URL，内存相差并不大，但是URL数量达到1000000的时候内存突然暴增来到690M，某些设备可能会导致内存crash。&lt;/p&gt;

&lt;p&gt;​	所以一般情况下，内存占用还好，但是我们项目庞大，路由达到百万级别还得慎用。&lt;/p&gt;

&lt;p&gt;总体来说，都有相对的一些解决方案/代替方案，但是我觉得根本上存在的问题是不太好解决的，比如URL管理，即使分离管理，还是可能出现庞大的问题。&lt;/p&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

&lt;p&gt;可以说MGJRouter从设计上、实现上来说还是非常不错的，劣势呢也不全是说设计者的问题，而是基于URL本身存在的问题。但是选择内存常驻确实可能在量级过大的时候导致严重问题。&lt;/p&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="iOS" /><category term="组件化" /><category term="路由中间件" /><summary type="html">代码浅析 存 通过MGJRouter 单例管理。并且缓存在NSMutableDictionay *routes, 那么我们来看一下，他具体缓存的数据结构是什么样子的？ 例如 aa://bb/cc/dd 关键代码为： + (void)registerURLPattern:(NSString *)URLPattern toHandler:(MGJRouterHandler)handler { [[self sharedInstance] addURLPattern:URLPattern andHandler:handler]; } - (void)addURLPattern:(NSString *)URLPattern andHandler:(MGJRouterHandler)handler { NSMutableDictionary *subRoutes = [self addURLPattern:URLPattern]; if (handler &amp;amp;&amp;amp; subRoutes) { subRoutes[@&quot;_&quot;] = [handler copy]; } } - (NSMutableDictionary *)addURLPattern:(NSString *)URLPattern { NSArray *pathComponents = [self pathComponentsFromURL:URLPattern]; NSMutableDictionary* subRoutes = self.routes; for (NSString* pathComponent in pathComponents) { if (![subRoutes objectForKey:pathComponent]) { subRoutes[pathComponent] = [[NSMutableDictionary alloc] init]; } subRoutes = subRoutes[pathComponent]; } return subRoutes; } - (NSArray*)pathComponentsFromURL:(NSString*)URL { NSMutableArray *pathComponents = [NSMutableArray array]; if ([URL rangeOfString:@&quot;://&quot;].location != NSNotFound) { NSArray *pathSegments = [URL componentsSeparatedByString:@&quot;://&quot;]; // 如果 URL 包含协议，那么把协议作为第一个元素放进去 [pathComponents addObject:pathSegments[0]]; // 如果只有协议，那么放一个占位符 URL = pathSegments.lastObject; if (!URL.length) { [pathComponents addObject:MGJ_ROUTER_WILDCARD_CHARACTER]; } } for (NSString *pathComponent in [[NSURL URLWithString:URL] pathComponents]) { if ([pathComponent isEqualToString:@&quot;/&quot;]) continue; if ([[pathComponent substringToIndex:1] isEqualToString:@&quot;?&quot;]) break; [pathComponents addObject:pathComponent]; } return [pathComponents copy]; } 其中关键方法为- (NSMutableDictionary *)addURLPattern:(NSString *)URLPattern，此方法会将例如 aa://bb/cc/dd 这样一个URL生成如下的结构： {&quot;aa&quot;: {&quot;bb&quot;: {&quot;cc&quot;: {&quot;dd&quot;: {}}}}} 也就是说这个方法执行完之后，我们的routes就会变成这样的一个结构，最后把dd对应的{} return 回去。 然后通过 if (handler &amp;amp;&amp;amp; subRoutes) { subRoutes[@&quot;_&quot;] = [handler copy]; } 将handler加入到字典里，最后routes就会变成 {&quot;aa&quot;: {&quot;bb&quot;: {&quot;cc&quot;: {&quot;dd&quot;: {&quot;_&quot;: handler}}}}} 取 关键代码为： + (void)openURL:(NSString *)URL withUserInfo:(NSDictionary *)userInfo completion:(void (^)(id result))completion { URL = [URL stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]; NSMutableDictionary *parameters = [[self sharedInstance] extractParametersFromURL:URL matchExactly:NO]; [parameters enumerateKeysAndObjectsUsingBlock:^(id key, NSString *obj, BOOL *stop) { if ([obj isKindOfClass:[NSString class]]) { parameters[key] = [obj stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding]; } }]; if (parameters) { MGJRouterHandler handler = parameters[@&quot;block&quot;]; if (completion) { parameters[MGJRouterParameterCompletion] = completion; } if (userInfo) { parameters[MGJRouterParameterUserInfo] = userInfo; } if (handler) { [parameters removeObjectForKey:@&quot;block&quot;]; handler(parameters); } } } - (NSMutableDictionary *)extractParametersFromURL:(NSString *)url matchExactly:(BOOL)exactly { NSMutableDictionary* parameters = [NSMutableDictionary dictionary]; parameters[MGJRouterParameterURL] = url; NSMutableDictionary* subRoutes = self.routes; NSArray* pathComponents = [self pathComponentsFromURL:url]; BOOL found = NO; // borrowed from HHRouter(https://github.com/Huohua/HHRouter) for (NSString* pathComponent in pathComponents) { // 对 key 进行排序，这样可以把 ~ 放到最后 NSArray *subRoutesKeys =[subRoutes.allKeys sortedArrayUsingComparator:^NSComparisonResult(NSString *obj1, NSString *obj2) { return [obj1 compare:obj2]; }]; for (NSString* key in subRoutesKeys) { if ([key isEqualToString:pathComponent] || [key isEqualToString:MGJ_ROUTER_WILDCARD_CHARACTER]) { found = YES; subRoutes = subRoutes[key]; break; } else if ([key hasPrefix:@&quot;:&quot;]) { found = YES; subRoutes = subRoutes[key]; NSString *newKey = [key substringFromIndex:1]; NSString *newPathComponent = pathComponent; // 再做一下特殊处理，比如 :id.html -&amp;gt; :id if ([self.class checkIfContainsSpecialCharacter:key]) { NSCharacterSet *specialCharacterSet = [NSCharacterSet characterSetWithCharactersInString:specialCharacters]; NSRange range = [key rangeOfCharacterFromSet:specialCharacterSet]; if (range.location != NSNotFound) { // 把 pathComponent 后面的部分也去掉 newKey = [newKey substringToIndex:range.location - 1]; NSString *suffixToStrip = [key substringFromIndex:range.location]; newPathComponent = [newPathComponent stringByReplacingOccurrencesOfString:suffixToStrip withString:@&quot;&quot;]; } } parameters[newKey] = newPathComponent; break; } else if (exactly) { found = NO; } } // 如果没有找到该 pathComponent 对应的 handler，则以上一层的 handler 作为 fallback if (!found &amp;amp;&amp;amp; !subRoutes[@&quot;_&quot;]) { return nil; } } // Extract Params From Query. NSArray&amp;lt;NSURLQueryItem *&amp;gt; *queryItems = [[NSURLComponents alloc] initWithURL:[[NSURL alloc] initWithString:url] resolvingAgainstBaseURL:false].queryItems; for (NSURLQueryItem *item in queryItems) { parameters[item.name] = item.value; } if (subRoutes[@&quot;_&quot;]) { parameters[@&quot;block&quot;] = [subRoutes[@&quot;_&quot;] copy]; } return parameters; } 取的逻辑呢，其实也是匹配我们已经存好的数据结构，例如 aa://bb/cc/dd 首先我们会匹配aa，然后取出aa 对应的dictionary，再匹配bb，同理获取dictionary，一直到for 循环完dd，取到最后的dictionary，然后如果URL有query， 会把query.name作为parameters key, value作为 key的值。这样我们就能取到最后匹配到的block。 其中有一个特殊处理就是： else if ([key hasPrefix:@&quot;:&quot;]) { found = YES; subRoutes = subRoutes[key]; NSString *newKey = [key substringFromIndex:1]; NSString *newPathComponent = pathComponent; // 再做一下特殊处理，比如 :id.html -&amp;gt; :id if ([self.class checkIfContainsSpecialCharacter:key]) { NSCharacterSet *specialCharacterSet = [NSCharacterSet characterSetWithCharactersInString:specialCharacters]; NSRange range = [key rangeOfCharacterFromSet:specialCharacterSet]; if (range.location != NSNotFound) { // 把 pathComponent 后面的部分也去掉 newKey = [newKey substringToIndex:range.location - 1]; NSString *suffixToStrip = [key substringFromIndex:range.location]; newPathComponent = [newPathComponent stringByReplacingOccurrencesOfString:suffixToStrip withString:@&quot;&quot;]; } } parameters[newKey] = newPathComponent; break; } 这块是其实做了URL路径中:xxx的特殊处理，将可变的Component匹配，并且将pattern里的Component作为key，openURL里的实际值作为value传入parameters。 最后，移除取出block&amp;amp;进行调用。 这样就完成了一次我们open工作（也就是匹配过程）。 使用 // 注册 // 我们需要注册一个URLPattern 和 对应的block [MGJRouter registerURLPattern:@&quot;mgj://foo/bar&quot; toHandler:^(NSDictionary *routerParameters) { [self appendLog:@&quot;匹配到了 url，以下是相关信息&quot;]; [self appendLog:[NSString stringWithFormat:@&quot;routerParameters:%@&quot;, routerParameters]]; }]; // 使用 // 通过URL 掉起 [MGJRouter openURL:@&quot;mgj://foo/bar&quot;]; 更多使用请看MGJRouterKit demo. 优劣浅析 疑问？ URL 应该怎么管理？ Register应该在哪里注册？ URL 不能传递常规参数怎么办？比如我们要传一个block、image、data、object？ 缓存结构内存常驻？ 对于疑问，我觉得 URL 怎么管理？ 首先URL 肯定需要统一管理，并且采用常量/宏定义，避免URL写的到处都是难管理和硬编码。 那么如果是组件化， 第一种方案： 我们可能得在Route组件里，写一个.h， 里面定义URL 如果多项目复用，或者工程很庞大，那么这个URL定义会非常多，查看管理起来也是一个比较严重的问题。 第二种方案： module 自己隔离接口层，定义module内URL。 相对来说，我更喜欢第二种方案，定义、功能都明确，不存在多工程复用、迁移问题。 Register应该在哪里注册？ register按理我理解，也需要相对统一管理。 那么对应的也可以有两种方案： 第一种方案： 主工程统一定义，但是这种就会主工程耦合Module严重，主工程不够单一 第二种方法： 依然是module隔离接口层，并且给予一个注册/启动方法，所有需要注册的module内的URL，在模块内注册，主工程只要注册该模块就可以使用。Module之间其实没有依赖 URL 不能传递常规参数怎么办？比如我们要传一个block、image、data、object？ 其实MGJ也想到了这个问题，所以提供了API \+ (void)openURL:(NSString *)URL withUserInfo:(NSDictionary *)userInfo completion:(void (^)(id result))completion 这个方法支持我们传递userInfo，字典是完全支持非常规参数的。 但是其实URL里是无法体现出来的。只能通过MGJRouterParameterUserInfo 这个key拿到userInfo，取里边的值，参数就会不透明。 那么实际使用中，我们可能就得看具体的实现/注释，判断我们需要userinfo传的参数。 缓存结构内存常驻？ 从结构来说，他是dictionary嵌套，会不会导致内存过大？ 下面是我的实验方法： - (void)demoTestMoreRegistURL { NSInteger count = 1000000; for (NSInteger i = 0; i &amp;lt; count; i++) { [MGJRouter registerURLPattern:[NSString stringWithFormat:@&quot;mgj://test%ld/demo%ld/performance%ld&quot;, i, i, i] toHandler:^(NSDictionary *routerParameters) { [self appendLog:@&quot;匹配到了 url，以下是相关信息&quot;]; [self appendLog:[NSString stringWithFormat:@&quot;routerParameters:%@&quot;, routerParameters]]; }]; } } ​ 测试采用的是模拟器iphone14，从测试数据来看，100-10000个URL，内存相差并不大，但是URL数量达到1000000的时候内存突然暴增来到690M，某些设备可能会导致内存crash。 ​ 所以一般情况下，内存占用还好，但是我们项目庞大，路由达到百万级别还得慎用。 总体来说，都有相对的一些解决方案/代替方案，但是我觉得根本上存在的问题是不太好解决的，比如URL管理，即使分离管理，还是可能出现庞大的问题。 总结 可以说MGJRouter从设计上、实现上来说还是非常不错的，劣势呢也不全是说设计者的问题，而是基于URL本身存在的问题。但是选择内存常驻确实可能在量级过大的时候导致严重问题。</summary></entry><entry><title type="html">基于home brew的iOS Codelint 安装工具（lintmaker)</title><link href="http://localhost:4000/2023/06/07/%E5%9F%BA%E4%BA%8Ehomebrew%E7%9A%84pre-commit-iOS-lint-%E5%B7%A5%E5%85%B7%E8%AF%B4%E6%98%8E.html" rel="alternate" type="text/html" title="基于home brew的iOS Codelint 安装工具（lintmaker)" /><published>2023-06-07T00:00:00+08:00</published><updated>2023-06-07T00:00:00+08:00</updated><id>http://localhost:4000/2023/06/07/%E5%9F%BA%E4%BA%8Ehomebrew%E7%9A%84pre-commit%20iOS%20lint%20%E5%B7%A5%E5%85%B7%E8%AF%B4%E6%98%8E</id><content type="html" xml:base="http://localhost:4000/2023/06/07/%E5%9F%BA%E4%BA%8Ehomebrew%E7%9A%84pre-commit-iOS-lint-%E5%B7%A5%E5%85%B7%E8%AF%B4%E6%98%8E.html">&lt;h2 id=&quot;lintmaker&quot;&gt;lintmaker&lt;/h2&gt;

&lt;h3 id=&quot;简介&quot;&gt;简介&lt;/h3&gt;

&lt;p&gt;lintmaker 是使用swift 开发的一个CLI工具。主要负责了iOS 工程swift、objc语言的lint工具集成。&lt;/p&gt;

&lt;p&gt;使用lintmaker 可以傻瓜式一键安装、生效，在git 项目中，每次git commit 就会验证其代码规范性。&lt;/p&gt;

&lt;h3 id=&quot;主要功能&quot;&gt;主要功能&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;下载规则配置文件以及hook script、缓存到Library/Caches/ &amp;amp;&amp;amp; 移动到当前目录（或者指定目录）下&lt;/li&gt;
  &lt;li&gt;安装lint 依赖工具，home brew tap update, Objective-Clint, swiftlint、python3等工具&lt;/li&gt;
  &lt;li&gt;清理空间目录，即删除配置文件以及hook script&lt;/li&gt;
  &lt;li&gt;卸载安装， 清除空间目录 &amp;amp;&amp;amp; 卸载Objective-Clint、swiftlint&lt;/li&gt;
  &lt;li&gt;更新， 可全量更新（即更新配置文件 &amp;amp; 更新lint 工具），也可以只更新配置文件或者lint工具&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;架构思路&quot;&gt;架构思路&lt;/h3&gt;

&lt;p&gt;home brew 是 MAC\Linux 上非常方便的安装CLI或者Application的工具。&lt;/p&gt;

&lt;p&gt;我们目标则是打造一个基于home brew 安装、更新的安装工具-lintmaker&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;我们创建自己的三方Tap， haoxiansen/homebrew-private&lt;/li&gt;
  &lt;li&gt;Lintmaker 的开发则是尝试用swift 进行开发CLI程序&lt;/li&gt;
  &lt;li&gt;内部功能则是打着方便、好用、傻瓜式的原则进行开发&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;使用&quot;&gt;使用&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;lintmaker安装&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 安装&lt;/span&gt;
brew tap haoxiansen/private
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;lint-maker
&lt;span class=&quot;c&quot;&gt;# 更新&lt;/span&gt;
brew update 
brew upgrade lint-maker
  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;lintmaker 卸载&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew uninstall lint-maker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;install&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c&quot;&gt;# 默认在当前目录安装&lt;/span&gt;
  lintmaker &lt;span class=&quot;nb&quot;&gt;install
  
  &lt;/span&gt;USAGE: lintmaker &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--project-path&lt;/span&gt; &amp;lt;project-path&amp;gt;] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--configure-git-path&lt;/span&gt; &amp;lt;configure-git-path&amp;gt;]
  
  OPTIONS:
    &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--project-path&lt;/span&gt; &amp;lt;project-path&amp;gt;
                            Please input a workspace path
    &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--configure-git-path&lt;/span&gt; &amp;lt;configure-git-path&amp;gt;
                            Please input a accessible url, like
                            https://gitlab.corp.youdao.com/hikari/app/ios/gzlint.git, contains .clang-format
                            .swiftlint.yml &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: https://gitlab.corp.youdao.com/hikari/app/ios/gzlint.git&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;               Show the version.
    &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;              Show &lt;span class=&quot;nb&quot;&gt;help &lt;/span&gt;information.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;clean&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 默认清除当前目录&lt;/span&gt;
lintmaker clean
  
USAGE: lintmaker clean &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--project-path&lt;/span&gt; &amp;lt;project-path&amp;gt;] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--configure-git-path&lt;/span&gt; &amp;lt;configure-git-path&amp;gt;]
  
OPTIONS:
  &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--project-path&lt;/span&gt; &amp;lt;project-path&amp;gt;
                          Please input a workspace path
  &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--configure-git-path&lt;/span&gt; &amp;lt;configure-git-path&amp;gt;
                          Please input a accessible url, like
                          https://gitlab.corp.youdao.com/hikari/app/ios/gzlint.git, contains .clang-format
                          .swiftlint.yml &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: https://gitlab.corp.youdao.com/hikari/app/ios/gzlint.git&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;               Show the version.
  &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;              Show &lt;span class=&quot;nb&quot;&gt;help &lt;/span&gt;information.
  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;uninstall&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lintmaker uninstall
  
USAGE: lintmaker uninstall
  
OPTIONS:
  &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;               Show the version.
  &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;              Show &lt;span class=&quot;nb&quot;&gt;help &lt;/span&gt;information.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;update&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 默认全量更新&lt;/span&gt;
lintmaker update
  
USAGE: lintmaker update &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--project-path&lt;/span&gt; &amp;lt;project-path&amp;gt;] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--configure-git-path&lt;/span&gt; &amp;lt;configure-git-path&amp;gt;] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--configuration-only&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--lint-only&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  
OPTIONS:
  &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--project-path&lt;/span&gt; &amp;lt;project-path&amp;gt;
                          a git workspace path, &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;not &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;defult is current directory
  &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--configure-git-path&lt;/span&gt; &amp;lt;configure-git-path&amp;gt;
                          Please input a accessible url, like
                          https://gitlab.corp.youdao.com/hikari/app/ios/gzlint.git, contains .clang-format
                          .swiftlint.yml &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: https://gitlab.corp.youdao.com/hikari/app/ios/gzlint.git&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--configuration-only&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--configuration-only&lt;/span&gt;, only update configuration file
  &lt;span class=&quot;nt&quot;&gt;--lint-only&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--lint-only&lt;/span&gt;, only update lint tools
  &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;               Show the version.
  &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;              Show &lt;span class=&quot;nb&quot;&gt;help &lt;/span&gt;information.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;help&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lintmaker &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;
lintmaker &lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;subcommand]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;注意事项&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;所有命令只会对当前目录（指定目录）生效，不可全局生效，所以要求我们每一个git 项目都去集成&lt;/li&gt;
      &lt;li&gt;可执行一次install，在某个目录，其他git项目执行 lintmaker update –configuration-only即可生效&lt;/li&gt;
      &lt;li&gt;如若版本lint 工具升级，可执行lintmaker update 或者lintmaker update –lint-only&lt;/li&gt;
      &lt;li&gt;如若只升级configuration files， 执行lintmaker update –configuration-only，可实现当前目录或者指定目录的configuration files的升级。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;部分截图&quot;&gt;部分截图&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;安装成功&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230607182823image-20230607182823209.png&quot; alt=&quot;image-20230607182823209&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;清理成功&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230607182848image-20230607182847914.png&quot; alt=&quot;image-20230607182847914&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;更新成功&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230607182929image-20230607182928941.png&quot; alt=&quot;image-20230607182928941&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;卸载成功&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230607182956image-20230607182955883.png&quot; alt=&quot;image-20230607182955883&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;可能会遇到的问题mac-m1m2&quot;&gt;可能会遇到的问题（MAC M1、M2）&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;homebrew 报错，无法更细taps, 导致工具安装报错（警告⚠️）&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;主要原因呢，在于MAC M1/M2系统上brew 更改了安装目录，目录由urs/local/Homebrew 变更为 opt/Homebrew，然后导致这个目录下的git 认为是不安全的git目录&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;我们需要执行以下命令去信任这三个目录&lt;/p&gt;

        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--add&lt;/span&gt; safe.directory /opt/homebrew/Library/Taps/homebrew/homebrew-cask
    
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--add&lt;/span&gt; safe.directory /opt/homebrew/Library/Taps/homebrew/homebrew-core
    
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--add&lt;/span&gt; safe.directory /opt/homebrew/Library/Taps/homebrew/homebrew-services
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装objc-lint失败&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;error] 安装objc-lint失败， 原因：&lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; Fetching haoxiansen/private/objc-lint 
&lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; Downloading https://github.com/HaoXianSen/Objective-CLint/archive/refs/tags/v1.0.0.tar.gz Already downloaded: /Users/xxx/Library/Caches/Homebrew/downloads/252b1d1bc021d2a4de2c95bb39262e61aa06d9861245b37bafa15947f025efc0--Objective-CLint-1.0.0.tar.gz
&lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; Installing objc-lint from haoxiansen/private 
&lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; Homebrew has enabled anonymous aggregate formula and cask analytics. Read the analytics documentation &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;and how to opt-out&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; here:  https://docs.brew.sh/Analytics No analytics have been recorded yet &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nor will be during this &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;brew&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; run&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; Homebrew is run entirely by unpaid volunteers. Please consider donating:   https://github.com/Homebrew/brew#donations Updated 1 tap &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;homebrew/services&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; 
No changes to formulae or casks.
Error: Xcode alone is not sufficient on Monterey. Install the Command Line Tools:  xcode-select &lt;span class=&quot;nt&quot;&gt;--install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;xcode-select 可以打印更改我们xcode命令行工具所依赖目录，说白了其实就是xcode带了很多命令，比如我们熟知的xcodebuild、cc、make， 其实就是这个xcode这些命令所在的目录。&lt;/p&gt;

    &lt;p&gt;xcode-select –install 是会打开一个安装弹框，安装这些开发工具。&lt;/p&gt;

    &lt;p&gt;其实就是我们这里边会引用到xcode的命令，但是你的电脑没安装，所有需要按照提示执行一下：xcode-select –install&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="CLI" /><category term="homebrew" /><category term="codeLint" /><summary type="html">lintmaker 简介 lintmaker 是使用swift 开发的一个CLI工具。主要负责了iOS 工程swift、objc语言的lint工具集成。 使用lintmaker 可以傻瓜式一键安装、生效，在git 项目中，每次git commit 就会验证其代码规范性。 主要功能 下载规则配置文件以及hook script、缓存到Library/Caches/ &amp;amp;&amp;amp; 移动到当前目录（或者指定目录）下 安装lint 依赖工具，home brew tap update, Objective-Clint, swiftlint、python3等工具 清理空间目录，即删除配置文件以及hook script 卸载安装， 清除空间目录 &amp;amp;&amp;amp; 卸载Objective-Clint、swiftlint 更新， 可全量更新（即更新配置文件 &amp;amp; 更新lint 工具），也可以只更新配置文件或者lint工具 架构思路 home brew 是 MAC\Linux 上非常方便的安装CLI或者Application的工具。 我们目标则是打造一个基于home brew 安装、更新的安装工具-lintmaker 我们创建自己的三方Tap， haoxiansen/homebrew-private Lintmaker 的开发则是尝试用swift 进行开发CLI程序 内部功能则是打着方便、好用、傻瓜式的原则进行开发 使用 lintmaker安装 # 安装 brew tap haoxiansen/private brew install lint-maker # 更新 brew update brew upgrade lint-maker lintmaker 卸载 brew uninstall lint-maker install # 默认在当前目录安装 lintmaker install USAGE: lintmaker install [--project-path &amp;lt;project-path&amp;gt;] [--configure-git-path &amp;lt;configure-git-path&amp;gt;] OPTIONS: -p, --project-path &amp;lt;project-path&amp;gt; Please input a workspace path -c, --configure-git-path &amp;lt;configure-git-path&amp;gt; Please input a accessible url, like https://gitlab.corp.youdao.com/hikari/app/ios/gzlint.git, contains .clang-format .swiftlint.yml (default: https://gitlab.corp.youdao.com/hikari/app/ios/gzlint.git) --version Show the version. -h, --help Show help information. clean # 默认清除当前目录 lintmaker clean USAGE: lintmaker clean [--project-path &amp;lt;project-path&amp;gt;] [--configure-git-path &amp;lt;configure-git-path&amp;gt;] OPTIONS: -p, --project-path &amp;lt;project-path&amp;gt; Please input a workspace path -c, --configure-git-path &amp;lt;configure-git-path&amp;gt; Please input a accessible url, like https://gitlab.corp.youdao.com/hikari/app/ios/gzlint.git, contains .clang-format .swiftlint.yml (default: https://gitlab.corp.youdao.com/hikari/app/ios/gzlint.git) --version Show the version. -h, --help Show help information. uninstall lintmaker uninstall USAGE: lintmaker uninstall OPTIONS: --version Show the version. -h, --help Show help information. update # 默认全量更新 lintmaker update USAGE: lintmaker update [--project-path &amp;lt;project-path&amp;gt;] [--configure-git-path &amp;lt;configure-git-path&amp;gt;] [--configuration-only] [--lint-only] OPTIONS: -p, --project-path &amp;lt;project-path&amp;gt; a git workspace path, if not set defult is current directory -c, --configure-git-path &amp;lt;configure-git-path&amp;gt; Please input a accessible url, like https://gitlab.corp.youdao.com/hikari/app/ios/gzlint.git, contains .clang-format .swiftlint.yml (default: https://gitlab.corp.youdao.com/hikari/app/ios/gzlint.git) --configuration-only if set --configuration-only, only update configuration file --lint-only if set --lint-only, only update lint tools --version Show the version. -h, --help Show help information. help lintmaker --help lintmaker help [subcommand] 注意事项 所有命令只会对当前目录（指定目录）生效，不可全局生效，所以要求我们每一个git 项目都去集成 可执行一次install，在某个目录，其他git项目执行 lintmaker update –configuration-only即可生效 如若版本lint 工具升级，可执行lintmaker update 或者lintmaker update –lint-only 如若只升级configuration files， 执行lintmaker update –configuration-only，可实现当前目录或者指定目录的configuration files的升级。 部分截图 安装成功 清理成功 更新成功 卸载成功 可能会遇到的问题（MAC M1、M2） homebrew 报错，无法更细taps, 导致工具安装报错（警告⚠️） 主要原因呢，在于MAC M1/M2系统上brew 更改了安装目录，目录由urs/local/Homebrew 变更为 opt/Homebrew，然后导致这个目录下的git 认为是不安全的git目录 我们需要执行以下命令去信任这三个目录 git config --global --add safe.directory /opt/homebrew/Library/Taps/homebrew/homebrew-cask git config --global --add safe.directory /opt/homebrew/Library/Taps/homebrew/homebrew-core git config --global --add safe.directory /opt/homebrew/Library/Taps/homebrew/homebrew-services 安装objc-lint失败 [error] 安装objc-lint失败， 原因：==&amp;gt; Fetching haoxiansen/private/objc-lint ==&amp;gt; Downloading https://github.com/HaoXianSen/Objective-CLint/archive/refs/tags/v1.0.0.tar.gz Already downloaded: /Users/xxx/Library/Caches/Homebrew/downloads/252b1d1bc021d2a4de2c95bb39262e61aa06d9861245b37bafa15947f025efc0--Objective-CLint-1.0.0.tar.gz ==&amp;gt; Installing objc-lint from haoxiansen/private ==&amp;gt; Homebrew has enabled anonymous aggregate formula and cask analytics. Read the analytics documentation (and how to opt-out) here: https://docs.brew.sh/Analytics No analytics have been recorded yet (nor will be during this `brew` run). ==&amp;gt; Homebrew is run entirely by unpaid volunteers. Please consider donating: https://github.com/Homebrew/brew#donations Updated 1 tap (homebrew/services). No changes to formulae or casks. Error: Xcode alone is not sufficient on Monterey. Install the Command Line Tools: xcode-select --install xcode-select 可以打印更改我们xcode命令行工具所依赖目录，说白了其实就是xcode带了很多命令，比如我们熟知的xcodebuild、cc、make， 其实就是这个xcode这些命令所在的目录。 xcode-select –install 是会打开一个安装弹框，安装这些开发工具。 其实就是我们这里边会引用到xcode的命令，但是你的电脑没安装，所有需要按照提示执行一下：xcode-select –install</summary></entry><entry><title type="html">home brew 的研究</title><link href="http://localhost:4000/2023/05/31/homeBrew%E6%8E%A2%E7%A9%B6.html" rel="alternate" type="text/html" title="home brew 的研究" /><published>2023-05-31T00:00:00+08:00</published><updated>2023-05-31T00:00:00+08:00</updated><id>http://localhost:4000/2023/05/31/homeBrew%E6%8E%A2%E7%A9%B6</id><content type="html" xml:base="http://localhost:4000/2023/05/31/homeBrew%E6%8E%A2%E7%A9%B6.html">&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;虽然已经对homeBrew 如何去指定自己的taps 、如何写Formula脚本、以及安装更新自己的软件，有了一定的了解和使用，但是终归感觉不了解整体homeBrew的架构、机制。&lt;/p&gt;

&lt;p&gt;因此，需要对home brew 做一个深入的研究。&lt;/p&gt;

&lt;h3 id=&quot;正文&quot;&gt;正文&lt;/h3&gt;

&lt;h4 id=&quot;home-brew-简介&quot;&gt;home brew 简介&lt;/h4&gt;

&lt;p&gt;如果你是一名MacOs的使用者，那么我相信你肯定知道 home brew，也可能已经对于home brew 普通的一些命令非常熟悉了。那么home brew是什么？&lt;/p&gt;

&lt;p&gt;引用brew 官方文档的一句介绍的话：&lt;strong&gt;The Missing Package Manager for macOS (or Linux)， &lt;a href=&quot;https://formulae.brew.sh/cask/&quot;&gt;Homebrew Cask&lt;/a&gt; installs macOS apps, fonts and plugins and other non-open source software.&lt;/strong&gt;，home brew 一个MacOS 或者 Linux缺失包的管理器，通过brew cask还可以安装MasOS app 、字体、插件和一些不开源的软件。&lt;/p&gt;

&lt;p&gt;那么其实来说brew的意思呢是酿造的意思，home brew 呢也有着自家酿酒的意思，也就是说home brew 下载源码，自己进行编译。&lt;/p&gt;

&lt;p&gt;总体来说，home brew 就是一个命令行工具和MacOS 软件包管理安装工具。&lt;/p&gt;

&lt;h4 id=&quot;home-brew-有趣命名&quot;&gt;home brew 有趣命名&lt;/h4&gt;

&lt;p&gt;先来了解一下相关的概念：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;formula&lt;/strong&gt; ：字面意思为配方，也就是homeBrew包的安装源码编译的脚本（ruby编写）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;cask&lt;/strong&gt; ：字面意思也为桶，但是它功能类似于formula的，它是用来装定义了安装MacOS app的ruby脚本&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;keg&lt;/strong&gt; ：字面意思是桶，那么就是我们酿完酒之后需要的桶子装。也就是给定的Formula编译之后套件资料夹e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/local/Cellar/foo/0.1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;rack&lt;/strong&gt;：字面意思是支架的意思，也就是存放酒桶的架子，即keg的目录e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/local/Cellar/foo&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;**keg-only: ** 字面意思是不会超出桶，其实就是homeBrew不会做link到urs/bin操作的formula&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;cellar&lt;/strong&gt;：字面意思为地窖，也就是存放所有支架的，即代表/usr/local/Cellar/目录&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Caskroom&lt;/strong&gt;：字面意思呢是cask的房子，也就是用来存放一个或者多个cask的&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;external command&lt;/strong&gt;：一些brew的子命令但是不是在Homebrew/brew仓库，相当于我们扩展的一些brew命令&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;tap&lt;/strong&gt;：用来存放Formula、cask、external command的目录&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;bottle&lt;/strong&gt; ：提前构建好的酒桶，放到就架子上，也就是说是提前构建好的keg，然后放到rack上&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当我们了解了这些概念，在我们使用中或者理解homebrew工作机制会更有帮助。&lt;/p&gt;

&lt;p&gt;用一张图来了解一下这些概念：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230531175637image-20230531175637534.png&quot; alt=&quot;image-20230531175637534&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也就是说我们home brew是一个自己酿酒的过程，首先我们需要酿酒的配方（Formula），存放配方（Formula）的地方呢叫做tap，home brew 可以有多个tap。我们根据配方呢会造出来至少一桶酒keg，然后我们把酒桶呢是摆到了酒架子上。 最后呢我们存放酒架子的地方是酒窖。&lt;/p&gt;

&lt;p&gt;那么tap呢就对应目录为urs/local/Homebrew/Library/Taps/; 配方呢是tap目录下个某个Formula脚本。&lt;/p&gt;

&lt;p&gt;keg比如是/usr/local/Cellar/foo/0.1， rack呢就是/usr/local/Cellar/foo/ ，酒窖呢就对应为/usr/local/Cellar/&lt;/p&gt;

&lt;h4 id=&quot;home-brew-的一些机制&quot;&gt;home brew 的一些机制&lt;/h4&gt;

&lt;p&gt;由上面的介绍我们可以知道，我们整个比较关键的点，其实就是formula（配方）的制作。home brew 会根据formula进行编译安装。&lt;/p&gt;

&lt;p&gt;下面我们介绍一下整体的一个机制/命令：&lt;/p&gt;

&lt;p&gt;先来讲讲我们经常用到的几个命令：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先如果我们去执行 brew update，这个时候home brew 会更新自己tap 以及我们自定义的tap&lt;/li&gt;
  &lt;li&gt;如果我们自己创建了自己的tap，需要命名为homebrew-[特殊的名字]，否则你安装tap什么的会非常麻烦, 具体可以参看之前的&lt;a href=&quot;https://haoxiansen.github.io/2023/02/03/%E5%88%9B%E5%BB%BA%E4%B8%89%E6%96%B9homeBrew.html&quot;&gt;文章&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;更新tap只能执行 brew update&lt;/li&gt;
  &lt;li&gt;卸载tap， brew untap [tap名字]&lt;/li&gt;
  &lt;li&gt;安装CLI， brew install [CLI名字]， 重新安装brew reinstall&lt;/li&gt;
  &lt;li&gt;卸载CLI， brew uninstall [CLI名字]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;再来讲讲homebrew整体的一个机制&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;首先我们先了解一下MacOS的文件系统&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;bin/ 目录下存放的系统内置一些终端命令可执行文件，eg. ls、cp 等等&lt;/li&gt;
      &lt;li&gt;sbin/ 系统管理命令，这里存放的是系统管理员使用的管理程序&lt;/li&gt;
      &lt;li&gt;/etc 目录包含各种系统配置文件，许多网络配置文件也在/etc中&lt;/li&gt;
      &lt;li&gt;/home 用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;/usr&lt;/strong&gt; 是个很重要的目录，通常这一文件系统很大，因为所有程序安装在这里。/usr 里的所有文件一般来自linux发行版(distribution )；本地安装的程序和其他东西在/usr/local 下，因为这样可以在升级新版系统或新发行版时无须重新安装全部程序。/usr 目录下的许多内容是可选的，但这些功能会使用户使用系统更加有效。/usr可容纳许多大型的软件包和它们的配置文件。&lt;/li&gt;
      &lt;li&gt;/usr/bin  集中了几乎所有用户命令，是系统的软件库。另有些命令在/bin 或/usr/local/bin 中&lt;/li&gt;
      &lt;li&gt;/usr/sbin
包括了根文件系统不必要的系统管理命令&lt;/li&gt;
      &lt;li&gt;/usr/local
本地安装的软件和其他文件放在这里。这与/usr很相似。用户可能会在这发现一些比较大的软件包&lt;/li&gt;
      &lt;li&gt;/usr/local/bin
本地增加的命令 （就是在shell终端里执行的一些非系统命令）&lt;/li&gt;
      &lt;li&gt;/usr/local/lib
本地增加的库&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;了解以上的目录之后，我们再来看一下和home brew 相关的目录&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;/usr/local/Homebrew 这里是homebrew的工程目录，我们采用homebrew提供的安装方式，他就会在这里建立Homebrew目录，以及clone 远程homebrew仓库。并且他会将自己的/usr/local/Homebrew/bin/brew下的 链接到/usr/local/bin 下，这样我们brew命令就可以在终端使用&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230601115342image-20230601115342002.png&quot; alt=&quot;image-20230601115342002&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;我们home brew taps 在usr/local/Homebrew/Library/Taps/下，也就是说首次安装的时候其实不存在Taps，从&lt;a href=&quot;https://github.com/Homebrew/brew/tree/master/Library&quot;&gt;github&lt;/a&gt; 我们可以看的出。首次安装后，brew 会执行 brew tap 操作去添加公开的两个taps：homebrew-core、homebrew-cask， homebrew-core用来存放公开的CLI formula， homebrew-cask 存放MacOsApp的formula。我们自己的三方tap也会安装到这个目录下。&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230601120201image-20230601120201634.png&quot; alt=&quot;image-20230601120201634&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230601120305image-20230601120305439.png&quot; alt=&quot;image-20230601120305439&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;就如上面有趣的命名一样，brew 采用 formula（配方）酿制好酒，装入keg（酒桶）放入到rack(酒架子)上存在Caller(酒窖)。没错urs/locall/Caller 就是这个酒窖。brew 会把所有的编译好的文件都摆好放进去。&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230601121007image-20230601121007292.png&quot; alt=&quot;image-20230601121007292&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;上一步之后呢，他会把酒桶里的bin/的可执行文件，link到urs/bin下，实现可执行。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;最后呢，它会在/Users/xxx/Library/Caches/Homebrew，缓存文件下缓存未解压文件。&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230601121919image-20230601121919209.png&quot; alt=&quot;image-20230601121919209&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;以上呢就是我们对于brew 从安装到创建taps再到安装具体的软件，根据目录进行一个过程性描述。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;用一个复杂的git-formula-去了解-formula脚本内容&quot;&gt;用一个复杂的git formula 去了解 formula脚本内容&lt;/h5&gt;

&lt;p&gt;​	我们上面有讲到，最重要的其实就是Formula脚本的编写，配方决定着你酿出来的是什么酒。&lt;/p&gt;

&lt;p&gt;​	那么我们就用一个复杂一点的Formula的脚本例子，从例子中讲述，每一部分是什么作用。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Formula 脚本必须继承Formula类&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Formula&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;# 用来描述你的工具的一句话&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Distributed revision control system&quot;&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;# 必须是https的正确地址，可通过brew home 查看，如果发布到正式的tap这个有检验&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;homepage&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://git-scm.com&quot;&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;# 下载链接，也是一个源码库&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.39.1.tar.xz&quot;&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;# 源码zip包对应的一个sha256，用来验证缓存的完整性和安全性&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;40a38a0847b30c371b35873b3afcf123885dd41ea3ecbbf510efa97f3ce5c161&quot;&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;# 需要遵循的许可&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;license&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;GPL-2.0-only&quot;&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;# 可以直接通过--head 进行下载的，如果通过--head 就不会用url或者去下载&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/git/git.git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;branch: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;master&quot;&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;# 检查是否有新版本的block&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;livecheck&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://www.kernel.org/pub/software/scm/git/&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/href=.*?git[._-]v?(\d+(?:\.\d+)+)\.t/i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  	&lt;span class=&quot;c1&quot;&gt;# 已经编译好的可执行二进制文件对应的sha256, 如果有对应平台的bottle会直接采用&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bottle&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;arm64_ventura:  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2d9a37ed166b873b440d958901013b1e654bbd5ac727ccf1aedbf2775ef1d755&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;arm64_monterey: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;64f0c9cc05c506988b61e178562347032d86e4140063a57ca96fedb9c7ca7456&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;arm64_big_sur:  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;943e530d20cabe88ba728bf1e7c6a5872fa28701b42f6426372b813bd535922e&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;ventura:        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;f927b7c352d1e202cc072ea0f5582f8c09c57c6a374daf5682eae6de21ea04d5&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;monterey:       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b9849b6591a22a1cc2326301b258299888c8fd03dbb479793bab971bf14aadc8&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;big_sur:        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;7119f027abde700c0f3c7a012cceb7b0246a862735b3309f5ee70a63f7e69251&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;x86_64_linux:   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3c62fb80f565b24970423a4f882959377bbd8b67dc023ed8f47543faffe6fa36&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  	&lt;span class=&quot;c1&quot;&gt;# 依赖库，可指定具体场景时机使用&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;depends_on&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gettext&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;depends_on&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;pcre2&quot;&lt;/span&gt;
  
  	&lt;span class=&quot;c1&quot;&gt;# MacOS 提供的一些依赖库&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uses_from_macos&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;curl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;since: :catalina&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# macOS &amp;lt; 10.15.6 has broken cert path logic&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uses_from_macos&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;expat&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uses_from_macos&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;zlib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;since: :high_sierra&lt;/span&gt;
  
  	&lt;span class=&quot;c1&quot;&gt;# linux 系统的一些依赖&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_linux&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;depends_on&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;linux-headers@5.15&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:build&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;depends_on&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;openssl@1.1&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Uses CommonCrypto on macOS&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  	&lt;span class=&quot;c1&quot;&gt;# 额外的一些下载资源，会被定义为resource&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;html&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://mirrors.edge.kernel.org/pub/software/scm/git/git-htmldocs-2.39.1.tar.xz&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;032de9396c907383c8236e094a038191d54822a212390c2ce2fcd749db90dfd0&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
    &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;man&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://mirrors.edge.kernel.org/pub/software/scm/git/git-manpages-2.39.1.tar.xz&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b522a58e963fd5137f660802ec5a93283abfa3eaa0f069ebb6e7f00e529cc775&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
    &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Net::SMTP::SSL&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://cpan.metacpan.org/authors/id/R/RJ/RJBS/Net-SMTP-SSL-1.04.tar.gz&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;7b29c45add19d3d5084b751f7ba89a8e40479a446ce21cfd9cc741e558332a00&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  	&lt;span class=&quot;c1&quot;&gt;# 安装方法， 定义了如何安装， 里面具体内容不做过多注释了~&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# If these things are installed, tell Git build system not to use them&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NO_FINK&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NO_DARWIN_PORTS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PYTHON_PATH&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;which&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;python&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PERL_PATH&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;which&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;perl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;USE_LIBPCRE2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;INSTALL_SYMLINKS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;LIBPCREDIR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Formula&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pcre2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;opt_prefix&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;V&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# build verbosely&lt;/span&gt;
  
      &lt;span class=&quot;n&quot;&gt;perl_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Utils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;safe_popen_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;perl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;--version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/v(\d+\.\d+)(?:\.\d+)?/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mac?&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PERLLIB_EXTRA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%W[
          &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MacOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;active_developer_dir&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;
          /Library/Developer/CommandLineTools
          /Applications/Xcode.app/Contents/Developer
        ]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;uniq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/Library/Perl/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perl_version&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/darwin-thread-multi-2level&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;# The git-gui and gitk tools are installed by a separate formula (git-gui)&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# to avoid a dependency on tcl-tk and to avoid using the broken system&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# tcl-tk (see https://github.com/Homebrew/homebrew-core/issues/36390)&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# This is done by setting the NO_TCLTK make variable.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%W[
        prefix=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;
        sysconfdir=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;
        CC=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;
        CFLAGS=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cflags&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;
        LDFLAGS=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ldflags&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;
        NO_TCLTK=1
      ]&lt;/span&gt;
  
      &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mac?&lt;/span&gt;
        &lt;span class=&quot;sx&quot;&gt;%w[NO_OPENSSL=1 APPLE_COMMON_CRYPTO=1]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;openssl_prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Formula&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;openssl@1.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;opt_prefix&lt;/span&gt;
  
        &lt;span class=&quot;sx&quot;&gt;%W[NO_APPLE_COMMON_CRYPTO=1 OPENSSLDIR=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;openssl_prefix&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  		
  		&lt;span class=&quot;c1&quot;&gt;# 调用系统的cmake 进行install安装&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;make&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;install&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;
  
      &lt;span class=&quot;n&quot;&gt;git_core&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libexec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git-core&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git-svn&quot;&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;# Install the macOS keychain credential helper&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mac?&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;contrib/credential/osxkeychain&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;make&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CC=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;s2&quot;&gt;&quot;CFLAGS=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cflags&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;s2&quot;&gt;&quot;LDFLAGS=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ldflags&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;git_core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git-credential-osxkeychain&quot;&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;make&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;clean&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;# Generate diff-highlight perl script executable&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;contrib/diff-highlight&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;make&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;# Install the netrc credential helper&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;contrib/credential/netrc&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;make&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;git_core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git-credential-netrc&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;# Install git-subtree&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;contrib/subtree&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;make&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CC=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;s2&quot;&gt;&quot;CFLAGS=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cflags&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;s2&quot;&gt;&quot;LDFLAGS=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ldflags&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;git_core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git-subtree&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;# install the completion script first because it is inside &quot;contrib&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;bash_completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;contrib/completion/git-completion.bash&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;bash_completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;contrib/completion/git-prompt.sh&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;zsh_completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;contrib/completion/git-completion.zsh&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_git&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bash_completion&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/git-completion.bash&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zsh_completion&lt;/span&gt;
  
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;share&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git-core&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;contrib&quot;&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;# We could build the manpages ourselves, but the build process depends&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# on many other packages, and is somewhat crazy, this way is easier.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;man&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;man&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;share&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;doc/git-doc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;# Make html docs world-readable&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0644&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;share&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/doc/git-doc/**/*.{html,txt}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0755&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;share&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/doc/git-doc/{RelNotes,howto,technical}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;# git-send-email needs Net::SMTP::SSL or Net::SMTP &amp;gt;= 2.34&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Net::SMTP::SSL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stage&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;share&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;perl5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;lib/Net&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;# This is only created when building against system Perl, but it isn&apos;t&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# purged by Homebrew&apos;s post-install cleaner because that doesn&apos;t check&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# &quot;Library&quot; directories. It is however pointless to keep around as it&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# only contains the perllocal.pod installation file.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;rm_rf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Library/Perl&quot;&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;# Set the macOS keychain credential helper by default&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# (as Apple&apos;s CLT&apos;s git also does this).&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mac?&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buildpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gitconfig&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOS&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
          [credential]
          &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;helper = osxkeychain
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;        EOS&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gitconfig&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;caveats&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOS&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
        The Tcl/Tk GUIs (e.g. gitk, git-gui) are now in the `git-gui` formula.
        Subversion interoperability (git-svn) is now in the `git-svn` formula.
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;      EOS&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
		&lt;span class=&quot;c1&quot;&gt;# 测试方法，如果要发布到官方的tap中，test测试必须通过&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;init&quot;&lt;/span&gt;
      &lt;span class=&quot;sx&quot;&gt;%w[haunted house]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;touch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;add&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;haunted&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;house&quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;config&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;user.name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&apos;A U Thor&apos;&quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;config&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;user.email&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;author@example.com&quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;commit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-m&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Initial Commit&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;haunted&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;house&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shell_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/git ls-files&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strip&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;# Check Net::SMTP or Net::SMTP::SSL works for git-send-email&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mac?&lt;/span&gt;
        &lt;span class=&quot;sx&quot;&gt;%w[foo bar]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;touch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;add&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;commit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-m&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Second Commit&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assert_match&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Authentication Required&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/git send-email --from=test@example.com --to=dev@null.com &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;--smtp-server=smtp.gmail.com --smtp-server-port=587 &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;--smtp-encryption=tls --confirm=never HEAD^ 2&amp;gt;&amp;amp;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上我们把Formula类相关的属性、方法的作用都做了注释，大家可以看看~，对于install方法内部没有做过多的注释，原因是git 安装方式，不是今天的主要内容，大致就是利用系统命令或者依赖命令完成编译安装。&lt;/p&gt;

&lt;p&gt;如果有更多对Formula类方法了解的，可以参考官方的&lt;a href=&quot;https://rubydoc.brew.sh/Formula&quot;&gt;文档&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;结束语&quot;&gt;结束语&lt;/h3&gt;

&lt;p&gt;通过home brew的学习，我们可以从中了解到设计者的幽默和设计理念。以酿酒的过程应用到brew的软件安装过程中，实在属于很形象也和强大。如果有好的mac 缺失的工具，我们也可以提供一份自己的力量对于brew 社区，mac 社区。&lt;/p&gt;

&lt;h3 id=&quot;引用--学习&quot;&gt;引用 &amp;amp; 学习&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.brew.sh/&quot;&gt;home brew 官网&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Homebrew/install/blob/master/install.sh&quot;&gt;home brew install.sh&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://rubydoc.brew.sh/Formula&quot;&gt;brew class list&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/6894537190295109645&quot;&gt;有趣的home brew命名&lt;/a&gt;&lt;/p&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="homeBrew" /><summary type="html">前言 虽然已经对homeBrew 如何去指定自己的taps 、如何写Formula脚本、以及安装更新自己的软件，有了一定的了解和使用，但是终归感觉不了解整体homeBrew的架构、机制。 因此，需要对home brew 做一个深入的研究。 正文 home brew 简介 如果你是一名MacOs的使用者，那么我相信你肯定知道 home brew，也可能已经对于home brew 普通的一些命令非常熟悉了。那么home brew是什么？ 引用brew 官方文档的一句介绍的话：The Missing Package Manager for macOS (or Linux)， Homebrew Cask installs macOS apps, fonts and plugins and other non-open source software.，home brew 一个MacOS 或者 Linux缺失包的管理器，通过brew cask还可以安装MasOS app 、字体、插件和一些不开源的软件。 那么其实来说brew的意思呢是酿造的意思，home brew 呢也有着自家酿酒的意思，也就是说home brew 下载源码，自己进行编译。 总体来说，home brew 就是一个命令行工具和MacOS 软件包管理安装工具。 home brew 有趣命名 先来了解一下相关的概念： formula ：字面意思为配方，也就是homeBrew包的安装源码编译的脚本（ruby编写） cask ：字面意思也为桶，但是它功能类似于formula的，它是用来装定义了安装MacOS app的ruby脚本 keg ：字面意思是桶，那么就是我们酿完酒之后需要的桶子装。也就是给定的Formula编译之后套件资料夹e.g. /usr/local/Cellar/foo/0.1 rack：字面意思是支架的意思，也就是存放酒桶的架子，即keg的目录e.g. /usr/local/Cellar/foo **keg-only: ** 字面意思是不会超出桶，其实就是homeBrew不会做link到urs/bin操作的formula cellar：字面意思为地窖，也就是存放所有支架的，即代表/usr/local/Cellar/目录 Caskroom：字面意思呢是cask的房子，也就是用来存放一个或者多个cask的 external command：一些brew的子命令但是不是在Homebrew/brew仓库，相当于我们扩展的一些brew命令 tap：用来存放Formula、cask、external command的目录 bottle ：提前构建好的酒桶，放到就架子上，也就是说是提前构建好的keg，然后放到rack上 当我们了解了这些概念，在我们使用中或者理解homebrew工作机制会更有帮助。 用一张图来了解一下这些概念： 也就是说我们home brew是一个自己酿酒的过程，首先我们需要酿酒的配方（Formula），存放配方（Formula）的地方呢叫做tap，home brew 可以有多个tap。我们根据配方呢会造出来至少一桶酒keg，然后我们把酒桶呢是摆到了酒架子上。 最后呢我们存放酒架子的地方是酒窖。 那么tap呢就对应目录为urs/local/Homebrew/Library/Taps/; 配方呢是tap目录下个某个Formula脚本。 keg比如是/usr/local/Cellar/foo/0.1， rack呢就是/usr/local/Cellar/foo/ ，酒窖呢就对应为/usr/local/Cellar/ home brew 的一些机制 由上面的介绍我们可以知道，我们整个比较关键的点，其实就是formula（配方）的制作。home brew 会根据formula进行编译安装。 下面我们介绍一下整体的一个机制/命令： 先来讲讲我们经常用到的几个命令： 首先如果我们去执行 brew update，这个时候home brew 会更新自己tap 以及我们自定义的tap 如果我们自己创建了自己的tap，需要命名为homebrew-[特殊的名字]，否则你安装tap什么的会非常麻烦, 具体可以参看之前的文章 更新tap只能执行 brew update 卸载tap， brew untap [tap名字] 安装CLI， brew install [CLI名字]， 重新安装brew reinstall 卸载CLI， brew uninstall [CLI名字] 再来讲讲homebrew整体的一个机制 首先我们先了解一下MacOS的文件系统 bin/ 目录下存放的系统内置一些终端命令可执行文件，eg. ls、cp 等等 sbin/ 系统管理命令，这里存放的是系统管理员使用的管理程序 /etc 目录包含各种系统配置文件，许多网络配置文件也在/etc中 /home 用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示 /usr 是个很重要的目录，通常这一文件系统很大，因为所有程序安装在这里。/usr 里的所有文件一般来自linux发行版(distribution )；本地安装的程序和其他东西在/usr/local 下，因为这样可以在升级新版系统或新发行版时无须重新安装全部程序。/usr 目录下的许多内容是可选的，但这些功能会使用户使用系统更加有效。/usr可容纳许多大型的软件包和它们的配置文件。 /usr/bin 集中了几乎所有用户命令，是系统的软件库。另有些命令在/bin 或/usr/local/bin 中 /usr/sbin 包括了根文件系统不必要的系统管理命令 /usr/local 本地安装的软件和其他文件放在这里。这与/usr很相似。用户可能会在这发现一些比较大的软件包 /usr/local/bin 本地增加的命令 （就是在shell终端里执行的一些非系统命令） /usr/local/lib 本地增加的库 了解以上的目录之后，我们再来看一下和home brew 相关的目录 /usr/local/Homebrew 这里是homebrew的工程目录，我们采用homebrew提供的安装方式，他就会在这里建立Homebrew目录，以及clone 远程homebrew仓库。并且他会将自己的/usr/local/Homebrew/bin/brew下的 链接到/usr/local/bin 下，这样我们brew命令就可以在终端使用 我们home brew taps 在usr/local/Homebrew/Library/Taps/下，也就是说首次安装的时候其实不存在Taps，从github 我们可以看的出。首次安装后，brew 会执行 brew tap 操作去添加公开的两个taps：homebrew-core、homebrew-cask， homebrew-core用来存放公开的CLI formula， homebrew-cask 存放MacOsApp的formula。我们自己的三方tap也会安装到这个目录下。 就如上面有趣的命名一样，brew 采用 formula（配方）酿制好酒，装入keg（酒桶）放入到rack(酒架子)上存在Caller(酒窖)。没错urs/locall/Caller 就是这个酒窖。brew 会把所有的编译好的文件都摆好放进去。 上一步之后呢，他会把酒桶里的bin/的可执行文件，link到urs/bin下，实现可执行。 最后呢，它会在/Users/xxx/Library/Caches/Homebrew，缓存文件下缓存未解压文件。 以上呢就是我们对于brew 从安装到创建taps再到安装具体的软件，根据目录进行一个过程性描述。 用一个复杂的git formula 去了解 formula脚本内容 ​ 我们上面有讲到，最重要的其实就是Formula脚本的编写，配方决定着你酿出来的是什么酒。 ​ 那么我们就用一个复杂一点的Formula的脚本例子，从例子中讲述，每一部分是什么作用。 # Formula 脚本必须继承Formula类 class Git &amp;lt; Formula # 用来描述你的工具的一句话 desc &quot;Distributed revision control system&quot; # 必须是https的正确地址，可通过brew home 查看，如果发布到正式的tap这个有检验 homepage &quot;https://git-scm.com&quot; # 下载链接，也是一个源码库 url &quot;https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.39.1.tar.xz&quot; # 源码zip包对应的一个sha256，用来验证缓存的完整性和安全性 sha256 &quot;40a38a0847b30c371b35873b3afcf123885dd41ea3ecbbf510efa97f3ce5c161&quot; # 需要遵循的许可 license &quot;GPL-2.0-only&quot; # 可以直接通过--head 进行下载的，如果通过--head 就不会用url或者去下载 head &quot;https://github.com/git/git.git&quot;, branch: &quot;master&quot; # 检查是否有新版本的block livecheck do url &quot;https://www.kernel.org/pub/software/scm/git/&quot; regex(/href=.*?git[._-]v?(\d+(?:\.\d+)+)\.t/i) end # 已经编译好的可执行二进制文件对应的sha256, 如果有对应平台的bottle会直接采用 bottle do sha256 arm64_ventura: &quot;2d9a37ed166b873b440d958901013b1e654bbd5ac727ccf1aedbf2775ef1d755&quot; sha256 arm64_monterey: &quot;64f0c9cc05c506988b61e178562347032d86e4140063a57ca96fedb9c7ca7456&quot; sha256 arm64_big_sur: &quot;943e530d20cabe88ba728bf1e7c6a5872fa28701b42f6426372b813bd535922e&quot; sha256 ventura: &quot;f927b7c352d1e202cc072ea0f5582f8c09c57c6a374daf5682eae6de21ea04d5&quot; sha256 monterey: &quot;b9849b6591a22a1cc2326301b258299888c8fd03dbb479793bab971bf14aadc8&quot; sha256 big_sur: &quot;7119f027abde700c0f3c7a012cceb7b0246a862735b3309f5ee70a63f7e69251&quot; sha256 x86_64_linux: &quot;3c62fb80f565b24970423a4f882959377bbd8b67dc023ed8f47543faffe6fa36&quot; end # 依赖库，可指定具体场景时机使用 depends_on &quot;gettext&quot; depends_on &quot;pcre2&quot; # MacOS 提供的一些依赖库 uses_from_macos &quot;curl&quot;, since: :catalina # macOS &amp;lt; 10.15.6 has broken cert path logic uses_from_macos &quot;expat&quot; uses_from_macos &quot;zlib&quot;, since: :high_sierra # linux 系统的一些依赖 on_linux do depends_on &quot;linux-headers@5.15&quot; =&amp;gt; :build depends_on &quot;openssl@1.1&quot; # Uses CommonCrypto on macOS end # 额外的一些下载资源，会被定义为resource resource &quot;html&quot; do url &quot;https://mirrors.edge.kernel.org/pub/software/scm/git/git-htmldocs-2.39.1.tar.xz&quot; sha256 &quot;032de9396c907383c8236e094a038191d54822a212390c2ce2fcd749db90dfd0&quot; end resource &quot;man&quot; do url &quot;https://mirrors.edge.kernel.org/pub/software/scm/git/git-manpages-2.39.1.tar.xz&quot; sha256 &quot;b522a58e963fd5137f660802ec5a93283abfa3eaa0f069ebb6e7f00e529cc775&quot; end resource &quot;Net::SMTP::SSL&quot; do url &quot;https://cpan.metacpan.org/authors/id/R/RJ/RJBS/Net-SMTP-SSL-1.04.tar.gz&quot; sha256 &quot;7b29c45add19d3d5084b751f7ba89a8e40479a446ce21cfd9cc741e558332a00&quot; end # 安装方法， 定义了如何安装， 里面具体内容不做过多注释了~ def install # If these things are installed, tell Git build system not to use them ENV[&quot;NO_FINK&quot;] = &quot;1&quot; ENV[&quot;NO_DARWIN_PORTS&quot;] = &quot;1&quot; ENV[&quot;PYTHON_PATH&quot;] = which(&quot;python&quot;) ENV[&quot;PERL_PATH&quot;] = which(&quot;perl&quot;) ENV[&quot;USE_LIBPCRE2&quot;] = &quot;1&quot; ENV[&quot;INSTALL_SYMLINKS&quot;] = &quot;1&quot; ENV[&quot;LIBPCREDIR&quot;] = Formula[&quot;pcre2&quot;].opt_prefix ENV[&quot;V&quot;] = &quot;1&quot; # build verbosely perl_version = Utils.safe_popen_read(&quot;perl&quot;, &quot;--version&quot;)[/v(\d+\.\d+)(?:\.\d+)?/, 1] if OS.mac? ENV[&quot;PERLLIB_EXTRA&quot;] = %W[ #{MacOS.active_developer_dir} /Library/Developer/CommandLineTools /Applications/Xcode.app/Contents/Developer ].uniq.map do |p| &quot;#{p}/Library/Perl/#{perl_version}/darwin-thread-multi-2level&quot; end.join(&quot;:&quot;) end # The git-gui and gitk tools are installed by a separate formula (git-gui) # to avoid a dependency on tcl-tk and to avoid using the broken system # tcl-tk (see https://github.com/Homebrew/homebrew-core/issues/36390) # This is done by setting the NO_TCLTK make variable. args = %W[ prefix=#{prefix} sysconfdir=#{etc} CC=#{ENV.cc} CFLAGS=#{ENV.cflags} LDFLAGS=#{ENV.ldflags} NO_TCLTK=1 ] args += if OS.mac? %w[NO_OPENSSL=1 APPLE_COMMON_CRYPTO=1] else openssl_prefix = Formula[&quot;openssl@1.1&quot;].opt_prefix %W[NO_APPLE_COMMON_CRYPTO=1 OPENSSLDIR=#{openssl_prefix}] end # 调用系统的cmake 进行install安装 system &quot;make&quot;, &quot;install&quot;, *args git_core = libexec/&quot;git-core&quot; rm git_core/&quot;git-svn&quot; # Install the macOS keychain credential helper if OS.mac? cd &quot;contrib/credential/osxkeychain&quot; do system &quot;make&quot;, &quot;CC=#{ENV.cc}&quot;, &quot;CFLAGS=#{ENV.cflags}&quot;, &quot;LDFLAGS=#{ENV.ldflags}&quot; git_core.install &quot;git-credential-osxkeychain&quot; system &quot;make&quot;, &quot;clean&quot; end end # Generate diff-highlight perl script executable cd &quot;contrib/diff-highlight&quot; do system &quot;make&quot; end # Install the netrc credential helper cd &quot;contrib/credential/netrc&quot; do system &quot;make&quot;, &quot;test&quot; git_core.install &quot;git-credential-netrc&quot; end # Install git-subtree cd &quot;contrib/subtree&quot; do system &quot;make&quot;, &quot;CC=#{ENV.cc}&quot;, &quot;CFLAGS=#{ENV.cflags}&quot;, &quot;LDFLAGS=#{ENV.ldflags}&quot; git_core.install &quot;git-subtree&quot; end # install the completion script first because it is inside &quot;contrib&quot; bash_completion.install &quot;contrib/completion/git-completion.bash&quot; bash_completion.install &quot;contrib/completion/git-prompt.sh&quot; zsh_completion.install &quot;contrib/completion/git-completion.zsh&quot; =&amp;gt; &quot;_git&quot; cp &quot;#{bash_completion}/git-completion.bash&quot;, zsh_completion (share/&quot;git-core&quot;).install &quot;contrib&quot; # We could build the manpages ourselves, but the build process depends # on many other packages, and is somewhat crazy, this way is easier. man.install resource(&quot;man&quot;) (share/&quot;doc/git-doc&quot;).install resource(&quot;html&quot;) # Make html docs world-readable chmod 0644, Dir[&quot;#{share}/doc/git-doc/**/*.{html,txt}&quot;] chmod 0755, Dir[&quot;#{share}/doc/git-doc/{RelNotes,howto,technical}&quot;] # git-send-email needs Net::SMTP::SSL or Net::SMTP &amp;gt;= 2.34 resource(&quot;Net::SMTP::SSL&quot;).stage do (share/&quot;perl5&quot;).install &quot;lib/Net&quot; end # This is only created when building against system Perl, but it isn&apos;t # purged by Homebrew&apos;s post-install cleaner because that doesn&apos;t check # &quot;Library&quot; directories. It is however pointless to keep around as it # only contains the perllocal.pod installation file. rm_rf prefix/&quot;Library/Perl&quot; # Set the macOS keychain credential helper by default # (as Apple&apos;s CLT&apos;s git also does this). if OS.mac? (buildpath/&quot;gitconfig&quot;).write &amp;lt;&amp;lt;~EOS [credential] \thelper = osxkeychain EOS etc.install &quot;gitconfig&quot; end end def caveats &amp;lt;&amp;lt;~EOS The Tcl/Tk GUIs (e.g. gitk, git-gui) are now in the `git-gui` formula. Subversion interoperability (git-svn) is now in the `git-svn` formula. EOS end # 测试方法，如果要发布到官方的tap中，test测试必须通过 test do system bin/&quot;git&quot;, &quot;init&quot; %w[haunted house].each { |f| touch testpath/f } system bin/&quot;git&quot;, &quot;add&quot;, &quot;haunted&quot;, &quot;house&quot; system bin/&quot;git&quot;, &quot;config&quot;, &quot;user.name&quot;, &quot;&apos;A U Thor&apos;&quot; system bin/&quot;git&quot;, &quot;config&quot;, &quot;user.email&quot;, &quot;author@example.com&quot; system bin/&quot;git&quot;, &quot;commit&quot;, &quot;-a&quot;, &quot;-m&quot;, &quot;Initial Commit&quot; assert_equal &quot;haunted\nhouse&quot;, shell_output(&quot;#{bin}/git ls-files&quot;).strip # Check Net::SMTP or Net::SMTP::SSL works for git-send-email if OS.mac? %w[foo bar].each { |f| touch testpath/f } system bin/&quot;git&quot;, &quot;add&quot;, &quot;foo&quot;, &quot;bar&quot; system bin/&quot;git&quot;, &quot;commit&quot;, &quot;-a&quot;, &quot;-m&quot;, &quot;Second Commit&quot; assert_match &quot;Authentication Required&quot;, pipe_output( &quot;#{bin}/git send-email --from=test@example.com --to=dev@null.com &quot; \ &quot;--smtp-server=smtp.gmail.com --smtp-server-port=587 &quot; \ &quot;--smtp-encryption=tls --confirm=never HEAD^ 2&amp;gt;&amp;amp;1&quot;, ) end end end 以上我们把Formula类相关的属性、方法的作用都做了注释，大家可以看看~，对于install方法内部没有做过多的注释，原因是git 安装方式，不是今天的主要内容，大致就是利用系统命令或者依赖命令完成编译安装。 如果有更多对Formula类方法了解的，可以参考官方的文档 结束语 通过home brew的学习，我们可以从中了解到设计者的幽默和设计理念。以酿酒的过程应用到brew的软件安装过程中，实在属于很形象也和强大。如果有好的mac 缺失的工具，我们也可以提供一份自己的力量对于brew 社区，mac 社区。 引用 &amp;amp; 学习 home brew 官网 home brew install.sh brew class list 有趣的home brew命名</summary></entry><entry><title type="html">shell 杂记(不断更新…)</title><link href="http://localhost:4000/2023/04/07/shell-%E6%8A%80%E6%9C%AF%E7%82%B9%E5%A4%87%E5%BF%98%E5%BD%95.html" rel="alternate" type="text/html" title="shell 杂记(不断更新…)" /><published>2023-04-07T00:00:00+08:00</published><updated>2023-04-07T00:00:00+08:00</updated><id>http://localhost:4000/2023/04/07/shell%20%E6%8A%80%E6%9C%AF%E7%82%B9%E5%A4%87%E5%BF%98%E5%BD%95</id><content type="html" xml:base="http://localhost:4000/2023/04/07/shell-%E6%8A%80%E6%9C%AF%E7%82%B9%E5%A4%87%E5%BF%98%E5%BD%95.html">&lt;h4 id=&quot;终端输出奇技淫巧&quot;&gt;终端输出奇技淫巧&lt;/h4&gt;

&lt;h6 id=&quot;1-u1b1au1bk&quot;&gt;1. \u{1B}[1A\u{1B}[K&lt;/h6&gt;

&lt;p&gt;这是一种 ANSI 转义序列，通常用于控制终端的光标位置和清除屏幕上的文本。”\u{1B}[1A” 表示将光标向上移动一行，”\u{1B}[K” 表示清除当前光标位置后面的文本。组合在一起，这个序列的意思是将光标移动到当前行的开头并清除该行的文本。&lt;/p&gt;

&lt;p&gt;Pod cache&lt;/p&gt;

&lt;p&gt;http://blog.fpliu.com/it/os/macOS/software/CocoaPods/pod-cache&lt;/p&gt;

&lt;h1 id=&quot;shell-杂记&quot;&gt;shell 杂记&lt;/h1&gt;

&lt;h3 id=&quot;1-shell-语句中的while-循环语句&quot;&gt;1. shell 语句中的while 循环语句&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;条件
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; 
&lt;span class=&quot;c&quot;&gt;# 循环体代码&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done

while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-gt&lt;/span&gt; 0&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done

while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-gt&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-shell-语法中的shift语句&quot;&gt;2. shell 语法中的shift语句&lt;/h3&gt;

&lt;p&gt;​	用于移动参数的位置，它将命令行参数往左移动一个位置，即第二个参数移动到第一个位置，以此类推&lt;/p&gt;

&lt;p&gt;​	语法为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; shift [n]&lt;/code&gt;, 可选的参数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt;指定移动参数的数量。如果未指定&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt;，则默认为1，即只移动一个参数。&lt;/p&gt;

&lt;h3 id=&quot;3-shell-中方法的定义与调用&quot;&gt;3. shell 中方法的定义与调用&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 定义&lt;/span&gt;
function_name&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# method body&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 调用&lt;/span&gt;
function_name parameter1 parameter2

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4-shell-特殊变量&quot;&gt;4. shell 特殊变量&lt;/h3&gt;

&lt;p&gt;在shell编程中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$0&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$1&lt;/code&gt;是特殊变量，用于引用脚本名称和脚本的第一个参数。它们是内置的变量，可以在shell脚本中直接使用。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$0&lt;/code&gt;：代表当前脚本的名称，即执行脚本时输入的文件名或路径。例如，如果脚本名为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myscript.sh&lt;/code&gt;，则&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$0&lt;/code&gt;将为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myscript.sh&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$1&lt;/code&gt;：代表脚本的第一个参数，即在执行脚本时传递给它的第一个参数。例如，如果执行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myscript.sh&lt;/code&gt;时传递了一个参数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello&lt;/code&gt;，则&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$1&lt;/code&gt;将为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5-dirname-shell命令&quot;&gt;5. dirname shell命令&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dirname&lt;/code&gt; 是一个常用的 Unix/Linux shell 命令，用于获取文件或目录路径的父目录。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dirname&lt;/code&gt; 命令接受一个文件或目录路径作为参数，并返回该路径的父目录&lt;/p&gt;

&lt;h4 id=&quot;6-获取符号链接的真实地址&quot;&gt;6. 获取符号链接的真实地址&lt;/h4&gt;

&lt;p&gt;在 shell 脚本中，您可以使用以下方法获取当前执行符号链接（link）脚本的真实路径&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bashCopy code
&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 获取当前执行符号链接脚本的真实路径&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;real_script_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dirname&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;readlink&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BASH_SOURCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[0]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &amp;amp;&amp;gt; /dev/null &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;当前执行符号链接脚本的真实路径: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$real_script_path&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这段代码首先使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${BASH_SOURCE[0]}&lt;/code&gt; 获取脚本的相对路径，然后使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readlink -f&lt;/code&gt; 获取符号链接脚本的真实路径。接下来，使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dirname&lt;/code&gt; 获取脚本所在的目录。最后，使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt; 命令进入该目录，并使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pwd&lt;/code&gt; 命令获取脚本所在目录的绝对路径。将结果赋值给 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;real_script_path&lt;/code&gt; 变量。&lt;/p&gt;

&lt;h3 id=&quot;7-判断数组是否为空&quot;&gt;7. 判断数组是否为空&lt;/h3&gt;

&lt;p&gt;在 shell 脚本中，可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-z&lt;/code&gt; 测试运算符来检查数组是否为空。以下是一个示例，演示如何检查数组是否为空：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 创建一个空数组&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;empty_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 创建一个非空数组&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;non_empty_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;元素1&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;元素2&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;元素3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 数组增加新元素&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;non_empty_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;non_empty_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;元素4&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;元素5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 检查 empty_array 是否为空&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;empty_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;empty_array 是空的&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;empty_array 不是空的&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 检查 non_empty_array 是否为空&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;non_empty_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;non_empty_array 是空的&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;non_empty_array 不是空的&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;8-获取cpu架构&quot;&gt;8. 获取cpu架构&lt;/h3&gt;

&lt;p&gt;在 shell 脚本中，可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uname&lt;/code&gt; 命令来判断 CPU 的架构。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uname&lt;/code&gt; 命令用于输出系统信息，其中包括硬件架构。要获取硬件架构，可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uname -m&lt;/code&gt; 命令。&lt;/p&gt;

&lt;h3 id=&quot;9-读取管道传进来文本&quot;&gt;9. 读取管道传进来文本&lt;/h3&gt;

&lt;p&gt;在 shell 脚本中，可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read&lt;/code&gt; 命令从管道中读取传入的文本。以下是一个示例，演示如何在 shell 脚本中读取从管道传入的文本：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bashCopy code
#!/bin/bash

# 从管道中读取传入的文本
while IFS= read -r input_line; do
  # 输出传入的文本
  echo &quot;您传入的文本是：$input_line&quot;
done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在这个示例中，我们使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while&lt;/code&gt; 循环和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read&lt;/code&gt; 命令从管道中读取传入的文本。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IFS=&lt;/code&gt; 用于保留空白字符，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-r&lt;/code&gt; 选项用于防止反斜杠转义。对于从管道中读取的每一行文本，我们都会输出相应的内容。&lt;/p&gt;

&lt;h3 id=&quot;10-文字颜色背景颜色&quot;&gt;10. 文字颜色、背景颜色&lt;/h3&gt;

&lt;p&gt;在 shell 中，可以使用 ANSI 转义序列来更改文本颜色和背景颜色。ANSI 转义序列是一种特殊的字符序列，用于控制终端的显示属性，如颜色、粗体、下划线等。&lt;/p&gt;

&lt;p&gt;以下是一些常见的 ANSI 转义序列，用于更改文本颜色和背景颜色：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;文本颜色：
    &lt;ul&gt;
      &lt;li&gt;黑色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[30m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;红色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[31m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;绿色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[32m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;黄色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[33m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;蓝色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[34m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;洋红色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[35m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;青色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[36m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;白色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[37m&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;背景颜色：
    &lt;ul&gt;
      &lt;li&gt;黑色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[40m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;红色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[41m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;绿色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[42m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;黄色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[43m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;蓝色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[44m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;洋红色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[45m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;青色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[46m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;白色：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[47m&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;要在 shell 脚本中使用这些 ANSI 转义序列，请将它们与要显示的文本一起输出。例如，要输出红色文本，可以使用以下命令：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bashCopy code
echo -e &quot;\033[31mThis is red text\033[0m&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在这个示例中，我们使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-e&lt;/code&gt; 选项告诉 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo&lt;/code&gt; 命令解释转义序列。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[31m&lt;/code&gt; 将文本颜色更改为红色，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[0m&lt;/code&gt; 将颜色重置为默认值。&lt;/p&gt;

&lt;p&gt;要同时更改文本颜色和背景颜色，可以将相应的转义序列组合在一起。例如，要输出白色文本和蓝色背景，可以使用以下命令：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bashCopy code
echo -e &quot;\033[37;44mWhite text on a blue background\033[0m&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在这个示例中，我们将文本颜色的转义序列（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[37m&lt;/code&gt;）和背景颜色的转义序列（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\033[44m&lt;/code&gt;）组合在一起。请注意，这些转义序列之间用分号（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;;&lt;/code&gt;）分隔&lt;/p&gt;

&lt;h3 id=&quot;11-shell-中给命令传入一个数组作为多参数&quot;&gt;11. shell 中给命令传入一个数组作为多参数&lt;/h3&gt;

&lt;p&gt;如果一个命令比如test [paths] test 命令可以传入至少一个path作为参数, 我们需要如下给test传入：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;path1&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;path2&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;path3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%s &quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;12-如何判断脚本是否在bash-shell中运行&quot;&gt;12. 如何判断脚本是否在Bash shell中运行&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-z &quot;${BASH_VERSION:-}&quot;&lt;/code&gt; 是一个 Bash 条件表达式，用于检查当前 shell 是否为 Bash。这个表达式的含义如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-z&lt;/code&gt;：这是一个测试运算符，用于检查字符串的长度是否为零。如果字符串长度为零，则返回真（true）；否则返回假（false）。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;${BASH_VERSION:-}&quot;&lt;/code&gt;：这是一个参数扩展表达式，用于获取 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BASH_VERSION&lt;/code&gt; 变量的值。如果 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BASH_VERSION&lt;/code&gt; 变量未设置或为空，则使用空字符串替换。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BASH_VERSION&lt;/code&gt; 变量在 Bash shell 中自动设置，包含当前 Bash 版本的信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-z &quot;${BASH_VERSION:-}&quot;&lt;/code&gt; 表达式的含义是：如果 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BASH_VERSION&lt;/code&gt; 变量为空（即字符串长度为零），则返回真（true）；否则返回假（false）。换句话说，如果当前 shell 不是 Bash（即 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BASH_VERSION&lt;/code&gt; 未设置），则此表达式为真（true）。&lt;/p&gt;

&lt;h3 id=&quot;13--xargs-命令&quot;&gt;13.  xargs 命令&lt;/h3&gt;

&lt;p&gt;xargs 用于从标准输入（stdin）读取数据，并将这些数据作为参数传递给别的命令。&lt;/p&gt;

&lt;p&gt;-I 后跟一个字符串，用于指定一个占位符，xargs 从标准输入读取数据的时候，会将占位符替换成真正的数据。占位符可多次使用。&lt;/p&gt;

&lt;p&gt;-P 后跟一个数组，用于指定并行执行的进程数量。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# CMD 是一个占位符&lt;/span&gt;
xargs &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; CMD

&lt;span class=&quot;c&quot;&gt;# 最大并行执行进程为4个&lt;/span&gt;
xargs &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; CMD &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; 4

&lt;span class=&quot;c&quot;&gt;# eg.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test1 test2 test3&quot;&lt;/span&gt; | xargs &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; CMD &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; 4 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Processing: CMD&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 输出：&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Processing: test1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Processing: test2&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Processing: test3&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="shell" /><summary type="html">终端输出奇技淫巧 1. \u{1B}[1A\u{1B}[K 这是一种 ANSI 转义序列，通常用于控制终端的光标位置和清除屏幕上的文本。”\u{1B}[1A” 表示将光标向上移动一行，”\u{1B}[K” 表示清除当前光标位置后面的文本。组合在一起，这个序列的意思是将光标移动到当前行的开头并清除该行的文本。 Pod cache http://blog.fpliu.com/it/os/macOS/software/CocoaPods/pod-cache shell 杂记 1. shell 语句中的while 循环语句 while test 条件 do # 循环体代码 done while test $count -gt 0; do echo &quot;&quot; done while [ $count -gt 0 ]; do echo &quot;&quot; done 2. shell 语法中的shift语句 ​ 用于移动参数的位置，它将命令行参数往左移动一个位置，即第二个参数移动到第一个位置，以此类推 ​ 语法为 shift [n], 可选的参数n指定移动参数的数量。如果未指定n，则默认为1，即只移动一个参数。 3. shell 中方法的定义与调用 # 定义 function_name() { # method body } # 调用 function_name parameter1 parameter2 4. shell 特殊变量 在shell编程中，$0和$1是特殊变量，用于引用脚本名称和脚本的第一个参数。它们是内置的变量，可以在shell脚本中直接使用。 $0：代表当前脚本的名称，即执行脚本时输入的文件名或路径。例如，如果脚本名为myscript.sh，则$0将为myscript.sh。 $1：代表脚本的第一个参数，即在执行脚本时传递给它的第一个参数。例如，如果执行myscript.sh时传递了一个参数hello，则$1将为hello 5. dirname shell命令 dirname 是一个常用的 Unix/Linux shell 命令，用于获取文件或目录路径的父目录。dirname 命令接受一个文件或目录路径作为参数，并返回该路径的父目录 6. 获取符号链接的真实地址 在 shell 脚本中，您可以使用以下方法获取当前执行符号链接（link）脚本的真实路径 bashCopy code #!/bin/bash # 获取当前执行符号链接脚本的真实路径 real_script_path=&quot;$( cd &quot;$( dirname &quot;$(readlink -f &quot;${BASH_SOURCE[0]}&quot;)&quot; )&quot; &amp;amp;&amp;gt; /dev/null &amp;amp;&amp;amp; pwd )&quot; echo &quot;当前执行符号链接脚本的真实路径: $real_script_path&quot; 这段代码首先使用 ${BASH_SOURCE[0]} 获取脚本的相对路径，然后使用 readlink -f 获取符号链接脚本的真实路径。接下来，使用 dirname 获取脚本所在的目录。最后，使用 cd 命令进入该目录，并使用 pwd 命令获取脚本所在目录的绝对路径。将结果赋值给 real_script_path 变量。 7. 判断数组是否为空 在 shell 脚本中，可以使用 -z 测试运算符来检查数组是否为空。以下是一个示例，演示如何检查数组是否为空： #!/bin/bash # 创建一个空数组 empty_array=() # 创建一个非空数组 non_empty_array=(&quot;元素1&quot; &quot;元素2&quot; &quot;元素3&quot;) # 数组增加新元素 non_empty_array=(&quot;${non_empty_array[*]}&quot; &quot;元素4&quot; &quot;元素5&quot;) # 检查 empty_array 是否为空 if [ -z &quot;${empty_array[*]}&quot; ]; then echo &quot;empty_array 是空的&quot; else echo &quot;empty_array 不是空的&quot; fi # 检查 non_empty_array 是否为空 if [ -z &quot;${non_empty_array[*]}&quot; ]; then echo &quot;non_empty_array 是空的&quot; else echo &quot;non_empty_array 不是空的&quot; fi 8. 获取cpu架构 在 shell 脚本中，可以使用 uname 命令来判断 CPU 的架构。uname 命令用于输出系统信息，其中包括硬件架构。要获取硬件架构，可以使用 uname -m 命令。 9. 读取管道传进来文本 在 shell 脚本中，可以使用 read 命令从管道中读取传入的文本。以下是一个示例，演示如何在 shell 脚本中读取从管道传入的文本： bashCopy code #!/bin/bash # 从管道中读取传入的文本 while IFS= read -r input_line; do # 输出传入的文本 echo &quot;您传入的文本是：$input_line&quot; done 在这个示例中，我们使用 while 循环和 read 命令从管道中读取传入的文本。IFS= 用于保留空白字符，-r 选项用于防止反斜杠转义。对于从管道中读取的每一行文本，我们都会输出相应的内容。 10. 文字颜色、背景颜色 在 shell 中，可以使用 ANSI 转义序列来更改文本颜色和背景颜色。ANSI 转义序列是一种特殊的字符序列，用于控制终端的显示属性，如颜色、粗体、下划线等。 以下是一些常见的 ANSI 转义序列，用于更改文本颜色和背景颜色： 文本颜色： 黑色：\033[30m 红色：\033[31m 绿色：\033[32m 黄色：\033[33m 蓝色：\033[34m 洋红色：\033[35m 青色：\033[36m 白色：\033[37m 背景颜色： 黑色：\033[40m 红色：\033[41m 绿色：\033[42m 黄色：\033[43m 蓝色：\033[44m 洋红色：\033[45m 青色：\033[46m 白色：\033[47m 要在 shell 脚本中使用这些 ANSI 转义序列，请将它们与要显示的文本一起输出。例如，要输出红色文本，可以使用以下命令： bashCopy code echo -e &quot;\033[31mThis is red text\033[0m&quot; 在这个示例中，我们使用 -e 选项告诉 echo 命令解释转义序列。\033[31m 将文本颜色更改为红色，\033[0m 将颜色重置为默认值。 要同时更改文本颜色和背景颜色，可以将相应的转义序列组合在一起。例如，要输出白色文本和蓝色背景，可以使用以下命令： bashCopy code echo -e &quot;\033[37;44mWhite text on a blue background\033[0m&quot; 在这个示例中，我们将文本颜色的转义序列（\033[37m）和背景颜色的转义序列（\033[44m）组合在一起。请注意，这些转义序列之间用分号（;）分隔 11. shell 中给命令传入一个数组作为多参数 如果一个命令比如test [paths] test 命令可以传入至少一个path作为参数, 我们需要如下给test传入： array=(&quot;path1&quot;, &quot;path2&quot;, &quot;path3&quot;) test $(printf &quot;%s &quot; &quot;${array[@]}&quot;) 12. 如何判断脚本是否在Bash shell中运行 -z &quot;${BASH_VERSION:-}&quot; 是一个 Bash 条件表达式，用于检查当前 shell 是否为 Bash。这个表达式的含义如下： -z：这是一个测试运算符，用于检查字符串的长度是否为零。如果字符串长度为零，则返回真（true）；否则返回假（false）。 &quot;${BASH_VERSION:-}&quot;：这是一个参数扩展表达式，用于获取 BASH_VERSION 变量的值。如果 BASH_VERSION 变量未设置或为空，则使用空字符串替换。BASH_VERSION 变量在 Bash shell 中自动设置，包含当前 Bash 版本的信息。 因此，-z &quot;${BASH_VERSION:-}&quot; 表达式的含义是：如果 BASH_VERSION 变量为空（即字符串长度为零），则返回真（true）；否则返回假（false）。换句话说，如果当前 shell 不是 Bash（即 BASH_VERSION 未设置），则此表达式为真（true）。 13. xargs 命令 xargs 用于从标准输入（stdin）读取数据，并将这些数据作为参数传递给别的命令。 -I 后跟一个字符串，用于指定一个占位符，xargs 从标准输入读取数据的时候，会将占位符替换成真正的数据。占位符可多次使用。 -P 后跟一个数组，用于指定并行执行的进程数量。 # CMD 是一个占位符 xargs -I CMD # 最大并行执行进程为4个 xargs -I CMD -P 4 # eg. echo &quot;test1 test2 test3&quot; | xargs -I CMD -P 4 echo &quot;Processing: CMD&quot; # 输出： # Processing: test1 # Processing: test2 # Processing: test3</summary></entry><entry><title type="html">基于homebrew 的code lint 集成</title><link href="http://localhost:4000/2023/03/20/%E5%9F%BA%E4%BA%8EHomebrew%E7%9A%84CodeLint%E9%9B%86%E6%88%90-%E6%80%BB.html" rel="alternate" type="text/html" title="基于homebrew 的code lint 集成" /><published>2023-03-20T00:00:00+08:00</published><updated>2023-03-20T00:00:00+08:00</updated><id>http://localhost:4000/2023/03/20/%E5%9F%BA%E4%BA%8EHomebrew%E7%9A%84CodeLint%E9%9B%86%E6%88%90%EF%BC%88%E6%80%BB%EF%BC%89</id><content type="html" xml:base="http://localhost:4000/2023/03/20/%E5%9F%BA%E4%BA%8EHomebrew%E7%9A%84CodeLint%E9%9B%86%E6%88%90-%E6%80%BB.html">&lt;h3 id=&quot;基于homebrew-的code-lint-集成总&quot;&gt;基于homebrew 的code lint 集成(总)&lt;/h3&gt;

&lt;h4 id=&quot;前情&quot;&gt;前情&lt;/h4&gt;

&lt;p&gt;之前文章中我们已经讲到了采用pre-commit 集成工具去集成code lint 工具（&lt;a href=&quot;https://haoxiansen.github.io/2022/09/14/Objective_CLint.html&quot;&gt;Objective-CLint&lt;/a&gt;、swiftlint），&lt;a href=&quot;https://haoxiansen.github.io/2022/08/29/%E5%85%B3%E4%BA%8EiOS-%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%8A%8A%E6%8E%A7%E7%A0%94%E7%A9%B6.html&quot;&gt;文章地址&lt;/a&gt;，这种方式当然很方便，但是也很难扩展。比如swiftLint 我们就没有很好的办法让其以html或者其他的方式打开，只能显示到控制台，再比如我们后续想要整合oc和swift lint的结果。也没有好的办法实现。那么我们就要另辟西路。&lt;/p&gt;

&lt;p&gt;当然我们还是采用pre-commit 的时期，只是我们不在采用pre-commit工具集成，我们自己写pre-commit脚本、自己做工具的安装等等时期。&lt;/p&gt;

&lt;p&gt;这样我们的可扩展行很强，我们想干什么都可以，只要我们能想的到的…&lt;/p&gt;

&lt;h4 id=&quot;开发架构&quot;&gt;开发/架构&lt;/h4&gt;

&lt;h5 id=&quot;开发前景&quot;&gt;开发前景&lt;/h5&gt;

&lt;p&gt;首先我们需要开发一个类似于pre-commit工具的安装CLI。作为我们自己的pre-commit工具，它主要包含三个功能:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;pre-commit 脚本文件的移动；&lt;/li&gt;
  &lt;li&gt;Objective-CLint 、swiftLint 配置文件的下载+移动；&lt;/li&gt;
  &lt;li&gt;Objective-CLint、swiftLint 的安装。&lt;/li&gt;
&lt;/ol&gt;

&lt;h6 id=&quot;疑问为什么我们不用现成的pre-commit工具&quot;&gt;疑问？为什么我们不用现成的&lt;a href=&quot;https://pre-commit.com/&quot;&gt;pre-commit&lt;/a&gt;工具&lt;/h6&gt;

&lt;p&gt;为什么我们不用现成的pre-commit工具，直接配置.pre-commit-config.yaml yaml文件直接使用呢？&lt;/p&gt;

&lt;p&gt;不得不承认，pre-commit确实很好的支持了hooks，并且做到了整合所有hooks的工具。但是pre-commit仍然无法满足我们的一些需求。比如我们想要oclint之后能打开一个错误写法与正确写法相比较的html，swiftlint 能够打开一个lint之后错误、警告的html。这个时候如果原本的hooks并没有支持，他只是支持输出html，那么pre-commit将会限制我们的可定制化。也就是说，pre-commit确实好用，但是如果要实现一些可定制化的要求，它必须是hooks库本身就支持的，否则将无法完成可定制化或者需要一些非常规手段实现。&lt;/p&gt;

&lt;h5 id=&quot;整体架构&quot;&gt;整体架构&lt;/h5&gt;

&lt;h6 id=&quot;整体架构图&quot;&gt;整体架构图：&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230327114421image-20230327114420359.png&quot; alt=&quot;image-20230327114420359&quot; /&gt;&lt;/p&gt;

&lt;p&gt;整体我们采用homebrew 作为基础。在homebrew 的基础上我们创建自己的三方tap，作为存储自研库GZLintMaker、Objective-CLint 存储空间，也方便后续的使用、安装。swiftLint 已经支持homebrew的安装，所以我们不需要管。如果不知道homebrew 如何创建三方tap，请参考我前边的文章&lt;a href=&quot;https://haoxiansen.github.io/2023/02/03/%E5%88%9B%E5%BB%BA%E4%B8%89%E6%96%B9homeBrew.html&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;gzlintmaker-自制cli傻瓜式安装使用&quot;&gt;GZLintMaker 自制CLI（傻瓜式安装、使用）&lt;/h6&gt;

&lt;p&gt;​	想要学习怎么用swift写CLI工具的，请参考&lt;a href=&quot;https://haoxiansen.github.io/2023/01/05/01_Swift-%E6%9E%84%E5%BB%BACLI.html&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;​	GZLintMaker 功能结构&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230526110210image-20230526110209988.png&quot; alt=&quot;image-20230526110209988&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;GZLintMaker 是基于swift 写的一个CLI（Command-line interface， 命令行工具）。作为一个iOSer， 能够使用swift 去写CLI 工具其实也是一键很幸福的事情（题外话）。&lt;/p&gt;

&lt;h6 id=&quot;gzlintmaker-功能命令介绍&quot;&gt;GZLintMaker 功能命令介绍&lt;/h6&gt;

&lt;p&gt;GZLintMaker 主要包含紫色三部分功能， –install –clean –uninstall，我们先分别介绍一下这几个功能：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;–install&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;作为install 的flag命令。主要内容就是安装codeLint的所有内容。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;移动配置文件、hook 脚本文件&lt;/p&gt;

        &lt;p&gt;首先它会去默认的存放配置文件、执行脚本的git仓库，去clone 仓库内容。clone 完成			之后，我们把仓库里的.clang-formate . swiftlint移动到工程目录下（根目录）；将.pre-commit 脚本文件移动到.git/hooks/目录下，当然我们要确保这是一个基于git的仓库。最后我们删除远程存放这些文件的目录。
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230526111628image-20230526111628810.png&quot; alt=&quot;image-20230526111628810&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;lint 工具检查&lt;/p&gt;

        &lt;p&gt;检查项有：&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;homebrew，没有则安装&lt;/li&gt;
          &lt;li&gt;homebrew tap （https://github.com/haoxiansen/homebrew-private）安装/更新&lt;/li&gt;
          &lt;li&gt;Objective-CLint 安装/更新&lt;/li&gt;
          &lt;li&gt;swiftLint 安装/更新&lt;/li&gt;
          &lt;li&gt;coreutils 安装(用来脚本时长统计)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;–clean&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;清理当前工作空间&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;清理配置文件.clang-formate .swiftlint&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;清理脚本文件 pre-commit
    &lt;ul&gt;
      &lt;li&gt;清理配置文件存放的git 仓库目录（如果有的话）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;–uninstall&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;卸载Lint工具&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;ObjectiveC-lint&lt;/li&gt;
      &lt;li&gt;swiftLint&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;–project-path&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;安装工作目录， 如果未指定默认为当前目录为工作目录&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;可以和所有一级命令配合使用，作为指定工作目录&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;–configure-git-path&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;配置文件、脚本的git仓库&lt;/li&gt;
      &lt;li&gt;需要指定自己的git 仓库作为自适应配置。仓库必须包括.clang-format .swiftlint 配置文件以及pre-commit脚本文件&lt;/li&gt;
      &lt;li&gt;如果没有指定，默认使用我们的git仓库的配置作为配置&lt;/li&gt;
      &lt;li&gt;为什么要采用单独的一个库作为配置文件、脚本文件的存储呢？主要是在于更新快，如果我们的pre-commit脚本、或者配置文件有更新，只要执行lintMaker –install 就可以更新&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;pre-commit-脚本介绍&quot;&gt;pre-commit 脚本介绍&lt;/h6&gt;

&lt;p&gt;pre-commit 主要做了以下几件事情：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;lint 工具的执行
    &lt;ul&gt;
      &lt;li&gt;使用git diff –cached –named-only 删选出.h .hh .m .mm作为OC 文件，然后判断是否需要lint或者执行ObjectiveC-Lint的命令 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;format-objc-hook --reporter &quot;open_html&quot; --output &quot;${objc_lint_html_dir}&quot; --quiet&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;同样使用git diff –cached –named-only 删选出.swift 文件作为swift 文件，然后判断是否需要lint或者执行swiftlint 命令&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;swiftlint lint --quiet --reporter html --output &quot;${swift_lint_html_dir}&quot; &quot;${lint_swift_files[*]}&quot;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;lint 工具执行时间的统计
    &lt;ul&gt;
      &lt;li&gt;因为MacOs 自带date 命令行工具只能支持秒级别的时间，无法满足我们更精细的时间统计要求，所以我们也是在Lint工具安装的时候特意带着coreutils库。这个库支持了更精细的gdate命令&lt;/li&gt;
      &lt;li&gt;使用gdate分别在脚本开始和结束统计纳秒时间，然后进行相减 &amp;amp; 转化为秒数展示&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;lint 工具输出的可视化（打开html）
    &lt;ul&gt;
      &lt;li&gt;ObjectiveC-Lint 因为是自己的库，什么命令都好支持，所以支持了指定输出文件&lt;/li&gt;
      &lt;li&gt;swiftlint 本身支持了多种输出方式，并且可指定输出文件&lt;/li&gt;
      &lt;li&gt;这样我们在判断执行结果后，判断是否需要提示 &amp;amp; 打开html&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面是pre-commit的整体脚本文件：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# File generated by harry&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;HERE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dirname&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;37&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;31&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GRAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;90&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;RED_BACKGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;41m&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GREEN_BACKGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;42m&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SYAN_BACKGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;46m&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CACHE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HERE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.cache/&quot;&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;swift_files_to_format&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;git diff &lt;span class=&quot;nt&quot;&gt;--cached&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name-only&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;\.swift$&apos;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$files&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Pods/&apos;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Carthage/&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&amp;amp;1
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;objc_files_to_format&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;git diff &lt;span class=&quot;nt&quot;&gt;--cached&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name-only&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;\.h$&apos;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;\.hh$&apos;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;\.m$&apos;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;\.mm$&apos;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$files&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Pods/&apos;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Carthage/&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&amp;amp;1
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# params prefix, string, color, background_color, suffix&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;log_color&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status_color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status_background_color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$4&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;is_r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$5&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status_background_color&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$is_r&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 1 &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
            &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[%sm%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status_color&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else 
            &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[%sm%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status_color&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;fi
        
    else
        if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$is_r&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 1 &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
            &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[%s;%s%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status_color&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status_background_color&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else 
            &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[%s;%s%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status_color&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status_background_color&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;fi
    fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# log lint tool [prefix]......[sufix][color][backgroundColor][status][is_r]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;log_color_dot&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;terminal_width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;tput cols&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;suffix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status_color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$4&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status_background_color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$5&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;is_r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$6&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;prefix_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;suffix_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;suffix&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;status_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;dot_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$terminal_width&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; - &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix_length&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; - &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$suffix_length&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; - &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$status_length&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; - 10&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;dot_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;i&amp;lt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dot_length&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;i++&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dot_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dot_string&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;.&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;done

    &lt;/span&gt;log_color &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dot_string&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;suffix&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$status&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$status_color&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$status_background_color&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$is_r&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;print_exec_time&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;end_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# use bc command&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;elapsed_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;end_time&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; - &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | bc&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# convert um to s&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;seconds_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;scale=2; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;elapsed_time&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; / 1000000000.0&quot;&lt;/span&gt; | bc&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$seconds_time&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# objc files lint&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;lint_objc&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;return_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
    &lt;span class=&quot;nv&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;gdate +%s%N&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;external_log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; format-objc-hook&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[format-objc]&quot;&lt;/span&gt;
        log_color_dot &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Linting&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GREEN_BACKGROUND&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;lint_objc_files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;objc_files_to_format&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lint_objc_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
            &lt;/span&gt;log_color_dot &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;(no files to check)&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Skiped&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$WHITE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SYAN_BACKGROUND&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else
            &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;objc_lint_html_dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CACHE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;objclint.html
            format-objc-hook &lt;span class=&quot;nt&quot;&gt;--reporter&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;open_html&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;objc_lint_html_dir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--quiet&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;lint_result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$lint_result&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
                &lt;/span&gt;log_color_dot &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Success&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GREEN_BACKGROUND&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else 
                &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;return_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
                log_color_dot &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Failed&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RED_BACKGROUND&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;external_log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;❌ 已自动打开html，请修复html中的lint问题，之后再次commit...😭😭😭&quot;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;fi
        fi
    else 
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;return_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
    &lt;span class=&quot;k&quot;&gt;fi
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;end_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;gdate +%s%N&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;nv&quot;&gt;duration_seconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;print_exec_time &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$start_time&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$end_time&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;format_seconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%.2f&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$duration_seconds&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[%dm- duration: %ss&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GRAY&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;format_seconds&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;external_log&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;log_color &lt;span class=&quot;s2&quot;&gt;&quot;❌ 已自动打开html，请修复html中lint问题，之后再次commit...😭😭😭&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi
    return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;return_code&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# swift files lint&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;swift_lint&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;return_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
    &lt;span class=&quot;nv&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;gdate +%s%N&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;external_log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; swiftlint&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[swiftlint]&quot;&lt;/span&gt;
        log_color_dot &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Linting&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GREEN_BACKGROUND&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;lint_swift_files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;swift_files_to_format&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lint_swift_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
            &lt;/span&gt;log_color_dot &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;(no files to check)&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Skiped&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$WHITE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GREEN_BACKGROUND&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else
            &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;swift_lint_html_dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CACHE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;swiftlint.html
            swiftlint lint &lt;span class=&quot;nt&quot;&gt;--quiet&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--reporter&lt;/span&gt; html &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;swift_lint_html_dir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lint_swift_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;lint_result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$lint_result&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
                &lt;/span&gt;log_color_dot &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Success&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GREEN_BACKGROUND&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else 
                &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;return_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
                open &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;swift_lint_html_dir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
                log_color_dot &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Failed&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RED_BACKGROUND&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;external_log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;❌ 已自动打开html，请修复html中的lint问题，之后再次commit...😭😭😭&quot;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;fi
        fi
    else 
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;return_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
    &lt;span class=&quot;k&quot;&gt;fi
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;end_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;gdate +%s%N&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;nv&quot;&gt;duration_seconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;print_exec_time &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$start_time&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$end_time&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;format_seconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%.2f&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$duration_seconds&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[%dm- duration: %ss&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GRAY&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;format_seconds&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;external_log&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;log_color &lt;span class=&quot;s2&quot;&gt;&quot;❌ 已自动打开html，请修复html中lint问题，之后再次commit...😭😭😭&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi
    return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;return_code&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CACHE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CACHE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;lint_objc
&lt;span class=&quot;nv&quot;&gt;objc_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; swift_lint
&lt;span class=&quot;nv&quot;&gt;swift_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$objc_code&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$swift_code&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;span class=&quot;k&quot;&gt;else 
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;objectivec-lint&quot;&gt;ObjectiveC-Lint&lt;/h6&gt;

&lt;p&gt;ObjectiveC-Lint 有专刊介绍，感兴趣的话可以去&lt;a href=&quot;https://haoxiansen.github.io/2022/09/14/Objective_CLint.html&quot;&gt;瞅瞅!&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;swiftlint&quot;&gt;SwiftLint&lt;/h6&gt;

&lt;p&gt;SwiftLint 就没有什么可说的了，强大&amp;amp;实用&amp;amp;支持各种方式接入~，感兴趣的可以去&lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;github&lt;/a&gt;!&lt;/p&gt;

&lt;h4 id=&quot;使用&quot;&gt;使用&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;直接采用Unix可执行文件&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;table&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td&gt;去&lt;a href=&quot;https://github.com/HaoXianSen/LintMaker/releases&quot;&gt;github&lt;/a&gt; 下载可执行文件，直接使用&lt;/td&gt;
              &lt;td&gt;放入urs/local/bin下&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HomeBrew方式&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew tap haoxiansen/private
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew update 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;lintmaker &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; brew upgrade lintmaker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;``` shell
lintmaker –install&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;效果展示&quot;&gt;效果展示&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;无可检查文件
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230606162944image-20230606162944764.png&quot; alt=&quot;image-20230606162944764&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;存在问题&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230606163222image-20230606163221890.png&quot; alt=&quot;image-20230606163221890&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;oc-lint 成功， swiftlint 跳过&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230606163204image-20230606163204367.png&quot; alt=&quot;image-20230606163204367&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230606163259image-20230606163258916.png&quot; alt=&quot;image-20230606163258916&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/HaoXianSen/HaoXianSen.github.io@master/screenshots/20230606163316image-20230606163316722.png&quot; alt=&quot;image-20230606163316722&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;总结&quot;&gt;总结&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;整个code lint tool的集成断断续续花费了半年多的时间，整体上还是比较满意的&lt;/li&gt;
  &lt;li&gt;code lint 的接入，能够使得我们的代码更加的规范化，减少人工review的成本；&lt;/li&gt;
  &lt;li&gt;code lint的接入从某种程度上会降低我们的开发效率，因为要lint时间 + 改正时间，但是带来的好处远远大于一点点的效率降低，等到规则规范都提升之后，我们的效率自然会再次提起来&lt;/li&gt;
  &lt;li&gt;目前我们对ObjectiveC-Lint 做了进一步优化，支持了更多的&lt;/li&gt;
&lt;/ul&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="swift" /><category term="CLI" /><category term="objective-c" /><category term="homebrew" /><summary type="html">基于homebrew 的code lint 集成(总) 前情 之前文章中我们已经讲到了采用pre-commit 集成工具去集成code lint 工具（Objective-CLint、swiftlint），文章地址，这种方式当然很方便，但是也很难扩展。比如swiftLint 我们就没有很好的办法让其以html或者其他的方式打开，只能显示到控制台，再比如我们后续想要整合oc和swift lint的结果。也没有好的办法实现。那么我们就要另辟西路。 当然我们还是采用pre-commit 的时期，只是我们不在采用pre-commit工具集成，我们自己写pre-commit脚本、自己做工具的安装等等时期。 这样我们的可扩展行很强，我们想干什么都可以，只要我们能想的到的… 开发/架构 开发前景 首先我们需要开发一个类似于pre-commit工具的安装CLI。作为我们自己的pre-commit工具，它主要包含三个功能: pre-commit 脚本文件的移动； Objective-CLint 、swiftLint 配置文件的下载+移动； Objective-CLint、swiftLint 的安装。 疑问？为什么我们不用现成的pre-commit工具 为什么我们不用现成的pre-commit工具，直接配置.pre-commit-config.yaml yaml文件直接使用呢？ 不得不承认，pre-commit确实很好的支持了hooks，并且做到了整合所有hooks的工具。但是pre-commit仍然无法满足我们的一些需求。比如我们想要oclint之后能打开一个错误写法与正确写法相比较的html，swiftlint 能够打开一个lint之后错误、警告的html。这个时候如果原本的hooks并没有支持，他只是支持输出html，那么pre-commit将会限制我们的可定制化。也就是说，pre-commit确实好用，但是如果要实现一些可定制化的要求，它必须是hooks库本身就支持的，否则将无法完成可定制化或者需要一些非常规手段实现。 整体架构 整体架构图： 整体我们采用homebrew 作为基础。在homebrew 的基础上我们创建自己的三方tap，作为存储自研库GZLintMaker、Objective-CLint 存储空间，也方便后续的使用、安装。swiftLint 已经支持homebrew的安装，所以我们不需要管。如果不知道homebrew 如何创建三方tap，请参考我前边的文章这里 GZLintMaker 自制CLI（傻瓜式安装、使用） ​ 想要学习怎么用swift写CLI工具的，请参考这里 ​ GZLintMaker 功能结构 GZLintMaker 是基于swift 写的一个CLI（Command-line interface， 命令行工具）。作为一个iOSer， 能够使用swift 去写CLI 工具其实也是一键很幸福的事情（题外话）。 GZLintMaker 功能命令介绍 GZLintMaker 主要包含紫色三部分功能， –install –clean –uninstall，我们先分别介绍一下这几个功能： –install 作为install 的flag命令。主要内容就是安装codeLint的所有内容。 移动配置文件、hook 脚本文件 首先它会去默认的存放配置文件、执行脚本的git仓库，去clone 仓库内容。clone 完成 之后，我们把仓库里的.clang-formate . swiftlint移动到工程目录下（根目录）；将.pre-commit 脚本文件移动到.git/hooks/目录下，当然我们要确保这是一个基于git的仓库。最后我们删除远程存放这些文件的目录。 lint 工具检查 检查项有： homebrew，没有则安装 homebrew tap （https://github.com/haoxiansen/homebrew-private）安装/更新 Objective-CLint 安装/更新 swiftLint 安装/更新 coreutils 安装(用来脚本时长统计) –clean 清理当前工作空间 清理配置文件.clang-formate .swiftlint 清理脚本文件 pre-commit 清理配置文件存放的git 仓库目录（如果有的话） –uninstall 卸载Lint工具 ObjectiveC-lint swiftLint –project-path 安装工作目录， 如果未指定默认为当前目录为工作目录 可以和所有一级命令配合使用，作为指定工作目录 –configure-git-path 配置文件、脚本的git仓库 需要指定自己的git 仓库作为自适应配置。仓库必须包括.clang-format .swiftlint 配置文件以及pre-commit脚本文件 如果没有指定，默认使用我们的git仓库的配置作为配置 为什么要采用单独的一个库作为配置文件、脚本文件的存储呢？主要是在于更新快，如果我们的pre-commit脚本、或者配置文件有更新，只要执行lintMaker –install 就可以更新 pre-commit 脚本介绍 pre-commit 主要做了以下几件事情： lint 工具的执行 使用git diff –cached –named-only 删选出.h .hh .m .mm作为OC 文件，然后判断是否需要lint或者执行ObjectiveC-Lint的命令 format-objc-hook --reporter &quot;open_html&quot; --output &quot;${objc_lint_html_dir}&quot; --quiet 同样使用git diff –cached –named-only 删选出.swift 文件作为swift 文件，然后判断是否需要lint或者执行swiftlint 命令swiftlint lint --quiet --reporter html --output &quot;${swift_lint_html_dir}&quot; &quot;${lint_swift_files[*]}&quot; lint 工具执行时间的统计 因为MacOs 自带date 命令行工具只能支持秒级别的时间，无法满足我们更精细的时间统计要求，所以我们也是在Lint工具安装的时候特意带着coreutils库。这个库支持了更精细的gdate命令 使用gdate分别在脚本开始和结束统计纳秒时间，然后进行相减 &amp;amp; 转化为秒数展示 lint 工具输出的可视化（打开html） ObjectiveC-Lint 因为是自己的库，什么命令都好支持，所以支持了指定输出文件 swiftlint 本身支持了多种输出方式，并且可指定输出文件 这样我们在判断执行结果后，判断是否需要提示 &amp;amp; 打开html 下面是pre-commit的整体脚本文件： #!/usr/bin/env bash # File generated by harry HERE=&quot;$(cd &quot;$(dirname &quot;$0&quot;)&quot; &amp;amp;&amp;amp; pwd)&quot; WHITE=&quot;37&quot; RED=&quot;31&quot; GRAY=&quot;90&quot; RED_BACKGROUND=&quot;41m&quot; GREEN_BACKGROUND=&quot;42m&quot; SYAN_BACKGROUND=&quot;46m&quot; CACHE=&quot;${HERE}/.cache/&quot; function swift_files_to_format() { files=$(git diff --cached --name-only | grep -e &apos;\.swift$&apos;) echo &quot;$files&quot; | grep -v &apos;Pods/&apos; | grep -v &apos;Carthage/&apos; &amp;gt;&amp;amp;1 } function objc_files_to_format() { files=$(git diff --cached --name-only | grep -e &apos;\.h$&apos; -e &apos;\.hh$&apos; -e &apos;\.m$&apos; -e &apos;\.mm$&apos;) echo &quot;$files&quot; | grep -v &apos;Pods/&apos; | grep -v &apos;Carthage/&apos; &amp;gt;&amp;amp;1 } # params prefix, string, color, background_color, suffix function log_color() { local prefix=$1 local status=$2 local status_color=$3 local status_background_color=$4 local is_r=$5 if [[ -z &quot;${status_background_color}&quot; ]]; then if (( &quot;$is_r&quot; == 1 )); then printf &quot;%s\033[%sm%s\033[0m\r&quot; &quot;${prefix}&quot; &quot;${status_color}&quot; &quot;${status}&quot; else printf &quot;%s\033[%sm%s\033[0m\n&quot; &quot;${prefix}&quot; &quot;${status_color}&quot; &quot;${status}&quot; fi else if (( &quot;$is_r&quot; == 1 )); then printf &quot;%s\033[%s;%s%s\033[0m\r&quot; &quot;${prefix}&quot; &quot;${status_color}&quot; &quot;${status_background_color}&quot; &quot;${status}&quot; else printf &quot;%s\033[%s;%s%s\033[0m\n&quot; &quot;${prefix}&quot; &quot;${status_color}&quot; &quot;${status_background_color}&quot; &quot;${status}&quot; fi fi } # log lint tool [prefix]......[sufix][color][backgroundColor][status][is_r] function log_color_dot() { terminal_width=$(tput cols) local prefix=$1 local suffix=$2 local status=$3 local status_color=$4 local status_background_color=$5 local is_r=$6 prefix_length=${#prefix} suffix_length=${#suffix} status_length=${#status} dot_length=&quot;$terminal_width - $prefix_length - $suffix_length - $status_length - 10&quot; dot_string=&quot;&quot; for((i=0;i&amp;lt;&quot;$dot_length&quot;;i++)); do dot_string=&quot;${dot_string}&quot;&quot;.&quot; done log_color &quot;${prefix}${dot_string}${suffix}&quot; &quot;$status&quot; &quot;$status_color&quot; &quot;$status_background_color&quot; &quot;$is_r&quot; } function print_exec_time() { start_time=$1 end_time=$2 # use bc command elapsed_time=$(echo &quot;${end_time} - ${start_time}&quot; | bc) # convert um to s seconds_time=$(echo &quot;scale=2; ${elapsed_time} / 1000000000.0&quot; | bc) echo &quot;$seconds_time&quot; } # objc files lint function lint_objc() { return_code=0 start_time=$(gdate +%s%N) external_log=&quot;&quot; if [ &quot;$(command -v format-objc-hook)&quot; ]; then prefix=&quot;[format-objc]&quot; log_color_dot &quot;$prefix&quot; &quot;&quot; &quot;Linting&quot; &quot;${WHITE}&quot; &quot;${GREEN_BACKGROUND}&quot; &quot;1&quot; lint_objc_files=$(objc_files_to_format) if [ -z &quot;${lint_objc_files[*]}&quot; ]; then log_color_dot &quot;$prefix&quot; &quot;(no files to check)&quot; &quot;Skiped&quot; &quot;$WHITE&quot; &quot;$SYAN_BACKGROUND&quot; &quot;0&quot; else objc_lint_html_dir=&quot;${CACHE}&quot;objclint.html format-objc-hook --reporter &quot;open_html&quot; --output &quot;${objc_lint_html_dir}&quot; --quiet lint_result=$? if (( &quot;$lint_result&quot; == 0 )); then log_color_dot &quot;$prefix&quot; &quot;&quot; &quot;Success&quot; &quot;${WHITE}&quot; &quot;$GREEN_BACKGROUND&quot; &quot;0&quot; else return_code=1 log_color_dot &quot;$prefix&quot; &quot;&quot; &quot;Failed&quot; &quot;${WHITE}&quot; &quot;$RED_BACKGROUND&quot; &quot;0&quot; external_log=&quot;❌ 已自动打开html，请修复html中的lint问题，之后再次commit...😭😭😭&quot; fi fi else return_code=1 fi end_time=$(gdate +%s%N) duration_seconds=$(print_exec_time &quot;$start_time&quot; &quot;$end_time&quot;) format_seconds=$(printf &quot;%.2f&quot; &quot;$duration_seconds&quot;) printf &quot;\033[%dm- duration: %ss\033[0m\n&quot; &quot;${GRAY}&quot; &quot;${format_seconds}&quot; if [[ -n &quot;${external_log}&quot; ]]; then log_color &quot;❌ 已自动打开html，请修复html中lint问题，之后再次commit...😭😭😭&quot; &quot;&quot; &quot;${RED}&quot; &quot;&quot; &quot;0&quot; fi return &quot;${return_code}&quot; } # swift files lint function swift_lint() { return_code=0 start_time=$(gdate +%s%N) external_log=&quot;&quot; if [ &quot;$(command -v swiftlint)&quot; ]; then prefix=&quot;[swiftlint]&quot; log_color_dot &quot;$prefix&quot; &quot;&quot; &quot;Linting&quot; &quot;${WHITE}&quot; &quot;${GREEN_BACKGROUND}&quot; &quot;1&quot; lint_swift_files=$(swift_files_to_format) if [ -z &quot;${lint_swift_files[*]}&quot; ]; then log_color_dot &quot;$prefix&quot; &quot;(no files to check)&quot; &quot;Skiped&quot; &quot;$WHITE&quot; &quot;$GREEN_BACKGROUND&quot; &quot;0&quot; else swift_lint_html_dir=&quot;${CACHE}&quot;swiftlint.html swiftlint lint --quiet --reporter html --output &quot;${swift_lint_html_dir}&quot; &quot;${lint_swift_files[*]}&quot; lint_result=$? if (( &quot;$lint_result&quot; == 0 )); then log_color_dot &quot;$prefix&quot; &quot;&quot; &quot;Success&quot; &quot;${WHITE}&quot; &quot;$GREEN_BACKGROUND&quot; &quot;0&quot; else return_code=1 open &quot;${swift_lint_html_dir}&quot; log_color_dot &quot;$prefix&quot; &quot;&quot; &quot;Failed&quot; &quot;${WHITE}&quot; &quot;$RED_BACKGROUND&quot; &quot;0&quot; external_log=&quot;❌ 已自动打开html，请修复html中的lint问题，之后再次commit...😭😭😭&quot; fi fi else return_code=1 fi end_time=$(gdate +%s%N) duration_seconds=$(print_exec_time &quot;$start_time&quot; &quot;$end_time&quot;) format_seconds=$(printf &quot;%.2f&quot; &quot;$duration_seconds&quot;) printf &quot;\033[%dm- duration: %ss\033[0m\n&quot; &quot;${GRAY}&quot; &quot;${format_seconds}&quot; if [[ -n &quot;${external_log}&quot; ]]; then log_color &quot;❌ 已自动打开html，请修复html中lint问题，之后再次commit...😭😭😭&quot; &quot;&quot; &quot;${RED}&quot; &quot;&quot; &quot;0&quot; fi return &quot;${return_code}&quot; } if ! [ -d &quot;${CACHE}&quot; ]; then mkdir &quot;${CACHE}&quot; fi lint_objc objc_code=$? echo &quot;&quot; &amp;amp;&amp;amp; swift_lint swift_code=$? echo &quot;&quot; if (( &quot;$objc_code&quot; == 0 )) &amp;amp;&amp;amp; (( &quot;$swift_code&quot; == 0 )); then exit 0 else exit 1 fi ObjectiveC-Lint ObjectiveC-Lint 有专刊介绍，感兴趣的话可以去瞅瞅! SwiftLint SwiftLint 就没有什么可说的了，强大&amp;amp;实用&amp;amp;支持各种方式接入~，感兴趣的可以去github! 使用 直接采用Unix可执行文件 去github 下载可执行文件，直接使用 放入urs/local/bin下 HomeBrew方式 brew tap haoxiansen/private brew update brew install lintmaker &amp;amp;&amp;amp; brew upgrade lintmaker ``` shell lintmaker –install 效果展示 无可检查文件 存在问题 oc-lint 成功， swiftlint 跳过 总结 整个code lint tool的集成断断续续花费了半年多的时间，整体上还是比较满意的 code lint 的接入，能够使得我们的代码更加的规范化，减少人工review的成本； code lint的接入从某种程度上会降低我们的开发效率，因为要lint时间 + 改正时间，但是带来的好处远远大于一点点的效率降低，等到规则规范都提升之后，我们的效率自然会再次提起来 目前我们对ObjectiveC-Lint 做了进一步优化，支持了更多的</summary></entry><entry><title type="html">如何创建一个三方home brew tap</title><link href="http://localhost:4000/2023/02/03/%E5%88%9B%E5%BB%BA%E4%B8%89%E6%96%B9homeBrew.html" rel="alternate" type="text/html" title="如何创建一个三方home brew tap" /><published>2023-02-03T00:00:00+08:00</published><updated>2023-02-03T00:00:00+08:00</updated><id>http://localhost:4000/2023/02/03/%E5%88%9B%E5%BB%BA%E4%B8%89%E6%96%B9homeBrew</id><content type="html" xml:base="http://localhost:4000/2023/02/03/%E5%88%9B%E5%BB%BA%E4%B8%89%E6%96%B9homeBrew.html">&lt;h4 id=&quot;前情提要&quot;&gt;前情提要&lt;/h4&gt;

&lt;p&gt;为什么要创建三方的homeBrew呢？原因在于呀，我们想要官方的homebrew添加软件是有很多限制的，比如需要在官方的homeBrew Formula里添加ruby脚本文件，并且要增加测试脚本，诸如此，还需要像官方的brew仓库提交MR，等待官方的合并，相对来说，如果不是公开的三方库，我们这样做无非是增加了很多的工作量。那么另外一种简单，同样是brew支持的方式就是创建自己的三方brew 仓库。（当然我们是因为有需求驱动的，简单说我想要借助brew的便捷性，达到内部lint工具的快捷安装），接下来，我会把我创建以及成功使用的步骤做以下几点记录。&lt;/p&gt;

&lt;h4 id=&quot;1-创建三方tap仓库&quot;&gt;1. 创建三方Tap仓库&lt;/h4&gt;

&lt;p&gt;​	如何创建三方tap库？&lt;/p&gt;

 	1. 首先，我们需要再github上创建一个公开的仓库，并且名字以 &lt;strong&gt;homebrew-&lt;/strong&gt;   开头的。然后将建好的tap仓库git clone到本地；
 	2. 在仓库里添加Formula目录，这个目录是放我们三方软件安装脚本的，具体的脚本我会在3点里细说。

&lt;p&gt;​		如下：https://github.com/xxxx/homebrew-private&lt;/p&gt;

&lt;p&gt;​	这样我们的准备工作就完成了。ok，那怎么添加到brew呢？&lt;/p&gt;

&lt;h4 id=&quot;2-开发brew-三方库lib&quot;&gt;2. 开发brew 三方库lib&lt;/h4&gt;

&lt;p&gt;比如我们用shell 开发了一个命令行工具exampleLint， 我们把他放到了github里，地址为https://github.com/xxx/xxx/exampleLint.&lt;/p&gt;

&lt;p&gt;这样来说我们的三方lib就准备完成了…&lt;/p&gt;

&lt;p&gt;当然你可以选择任何语言去写，shell、swift、ruby、python等等&lt;/p&gt;

&lt;h4 id=&quot;3-编写formula-ruby脚本文件&quot;&gt;3. 编写Formula ruby脚本文件&lt;/h4&gt;

&lt;p&gt;来到了比较重要的环节，home brew 当然需要我们提供给它一个脚本，告诉他这个lib的一些信息啊，download地址等等，这个文件就是放在Formula目录下，是一个ruby脚本文件。&lt;/p&gt;

&lt;p&gt;1、将2步骤中的lib可执行文件，打包成tar包&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 将release文件打包成xxx.tar.gz&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-czf&lt;/span&gt; xxx.tar.gz release
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果是shell开发，我们可以直接用github生成的.tar.gz文件&lt;/p&gt;

&lt;p&gt;2、生成SHA256&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;shasum &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; 256 xxx.tar.gz | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;{print $1}&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; xxx-sha256.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3、如果自己生成的tar包，则需要上传到github的release中，上传完会得到下载链接。&lt;/p&gt;

&lt;p&gt;4、生成formula安装脚本&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;brew&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xxx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exampleLint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gz&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExampleLint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Formula&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/HaoXianSen/exampleLint&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;homepage&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/HaoXianSen/exampleLint&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/HaoXianSen/exampleLint/releases/download/1.0.0/exampleLint-mac.tar.gz&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bde3c29d31576ad833d3e22c5ed2889589917a367b749977a7703e018fc99a43&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;exampleLint&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将对应的信息添加补充到上边脚本里。&lt;/p&gt;

&lt;p&gt;ExampleLint 继承于Formula类。具体文档查看https://docs.brew.sh/Formula-Cookbook&lt;/p&gt;

&lt;h4 id=&quot;4-小试牛刀&quot;&gt;4. 小试牛刀&lt;/h4&gt;

&lt;p&gt;安装我们自己的工具包：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;brew&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xxxx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;或者&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;brew&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xxxx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;homebrew&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 我们可以带前缀homebrew-也可以不带，xxxx是github中最后地址的前一段，一般是自己github名&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样我们就可以将我们三方tap加入到brew中了，可到具体位置查看：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nt&quot;&gt;--repository&lt;/span&gt; 可查看brew 安装位置，查看/Library/Taps/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来就可以安装我们自己的软件了, 如下方式：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;exampleLint
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;就可以安装我们的软件。&lt;/p&gt;

&lt;h4 id=&quot;5-更新与版本&quot;&gt;5. 更新与版本&lt;/h4&gt;

&lt;p&gt;我们难免会遇到lib版本需要更新。如何更新版本？&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew tap &amp;lt;user/repo&amp;gt; &amp;lt;URL&amp;gt;
brew tap &lt;span class=&quot;nt&quot;&gt;--force-auto-update&lt;/span&gt; &amp;lt;user/repo&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;与安装brew 三方库一样，只要我们执行这个命令，github三方仓库就会更新到最新。&lt;/p&gt;

&lt;h4 id=&quot;6-移除tap&quot;&gt;6. 移除tap&lt;/h4&gt;

&lt;p&gt;移除使用以下命令&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew untap user/repo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;参考文献&quot;&gt;参考文献&lt;/h4&gt;

&lt;p&gt;1、 &lt;a href=&quot;https://docs.brew.sh/&quot;&gt;homebrew 官网&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2、https://www.jianshu.com/p/df351f34c160&lt;/p&gt;</content><author><name>harry</name><email>harry_c2016@163.com</email></author><category term="homeBrew" /><summary type="html">前情提要 为什么要创建三方的homeBrew呢？原因在于呀，我们想要官方的homebrew添加软件是有很多限制的，比如需要在官方的homeBrew Formula里添加ruby脚本文件，并且要增加测试脚本，诸如此，还需要像官方的brew仓库提交MR，等待官方的合并，相对来说，如果不是公开的三方库，我们这样做无非是增加了很多的工作量。那么另外一种简单，同样是brew支持的方式就是创建自己的三方brew 仓库。（当然我们是因为有需求驱动的，简单说我想要借助brew的便捷性，达到内部lint工具的快捷安装），接下来，我会把我创建以及成功使用的步骤做以下几点记录。 1. 创建三方Tap仓库 ​ 如何创建三方tap库？ 1. 首先，我们需要再github上创建一个公开的仓库，并且名字以 homebrew- 开头的。然后将建好的tap仓库git clone到本地； 2. 在仓库里添加Formula目录，这个目录是放我们三方软件安装脚本的，具体的脚本我会在3点里细说。 ​ 如下：https://github.com/xxxx/homebrew-private ​ 这样我们的准备工作就完成了。ok，那怎么添加到brew呢？ 2. 开发brew 三方库lib 比如我们用shell 开发了一个命令行工具exampleLint， 我们把他放到了github里，地址为https://github.com/xxx/xxx/exampleLint. 这样来说我们的三方lib就准备完成了… 当然你可以选择任何语言去写，shell、swift、ruby、python等等 3. 编写Formula ruby脚本文件 来到了比较重要的环节，home brew 当然需要我们提供给它一个脚本，告诉他这个lib的一些信息啊，download地址等等，这个文件就是放在Formula目录下，是一个ruby脚本文件。 1、将2步骤中的lib可执行文件，打包成tar包 # 将release文件打包成xxx.tar.gz tar -czf xxx.tar.gz release 如果是shell开发，我们可以直接用github生成的.tar.gz文件 2、生成SHA256 shasum -a 256 xxx.tar.gz | awk &apos;{print $1}&apos; &amp;gt; xxx-sha256.txt 3、如果自己生成的tar包，则需要上传到github的release中，上传完会得到下载链接。 4、生成formula安装脚本 brew create https://xxx/exampleLint.tar.gz class ExampleLint &amp;lt; Formula desc &quot;https://github.com/HaoXianSen/exampleLint&quot; homepage &quot;https://github.com/HaoXianSen/exampleLint&quot; url &quot;https://github.com/HaoXianSen/exampleLint/releases/download/1.0.0/exampleLint-mac.tar.gz&quot; sha256 &quot;bde3c29d31576ad833d3e22c5ed2889589917a367b749977a7703e018fc99a43&quot; version &quot;1.0.0&quot; def install bin.install &quot;exampleLint&quot; end end 将对应的信息添加补充到上边脚本里。 ExampleLint 继承于Formula类。具体文档查看https://docs.brew.sh/Formula-Cookbook 4. 小试牛刀 安装我们自己的工具包： brew tap xxxx/private 或者 brew tap xxxx/homebrew-private # 我们可以带前缀homebrew-也可以不带，xxxx是github中最后地址的前一段，一般是自己github名 这样我们就可以将我们三方tap加入到brew中了，可到具体位置查看： brew --repository 可查看brew 安装位置，查看/Library/Taps/ 接下来就可以安装我们自己的软件了, 如下方式： brew install exampleLint 就可以安装我们的软件。 5. 更新与版本 我们难免会遇到lib版本需要更新。如何更新版本？ brew tap &amp;lt;user/repo&amp;gt; &amp;lt;URL&amp;gt; brew tap --force-auto-update &amp;lt;user/repo&amp;gt; 与安装brew 三方库一样，只要我们执行这个命令，github三方仓库就会更新到最新。 6. 移除tap 移除使用以下命令 brew untap user/repo 参考文献 1、 homebrew 官网 2、https://www.jianshu.com/p/df351f34c160</summary></entry></feed>